-- put the demoname field set in the main ini file into the suitable config option

demoName = "TressFX 4.0 "..API
demoVersion = "1.0"



display.windowTitle = demoName or "Sushi v4.0 Template"
display.backBufferColorBits = 8
display.depthBits = 24
display.stencilBits = 8

display.d3dPool = POOL_DEFAULT          -- D3D9 only
display.d3dUsePureDevice = true         -- D3D9 only
display.d3dResourceShadowBuffers = false
--display.d3dUseDebugLayer = false


-- Finds a suitable display mode based on the desktop resolution (tries to match
-- aspect ratio of the display based on the desktop shape).
function FindSuitableDisplayMode()

   -- list of preferred display modes (landscape listed first, then portrait)
   local standardModes = { 
                            {3840,2160}, 
                            {2800,2100},
                            {2560,2048}, {2560,1600}, {2560,1440}, 
                            {2048,1536}, {1920,1440}, {1920,1200}, {1920,1080}, {1856,1392}, 
                           {1800,1400}, {1792,1344}, {1680,1050}, {1600,1200}, {1440, 900}, {1360,1024},
                           {1360, 768}, {1280,1024}, {1280, 960}, {1280, 900}, {1280, 800}, {1280, 768},
                           {1280, 720}, {1152, 864}, {1152, 648}, {1024, 768}, { 800, 600},
			   {1600,2560}, {1536,2048}, {1440,1920}, {1200,1920}, {1080,1920}, {1392,1856}, 
                           {1400,1800}, {1344,1792}, {1050,1680}, {1200,1600}, { 900,1440}, {1024,1360},
                           { 768,1360}, {1024,1280}, { 960,1280}, { 900,1280}, { 800,1280}, { 768,1280},
                           { 720,1280}, { 864,1152}, { 648,1152}, { 768,1024}, { 600, 800} }   


   local eyefinityModes = { {7680,1600}, {5760,1080}, {5760,1200}, {3840,1024}, {3240,1920}, {3600,1920} }
   local cardResolutionLimit = { 3840*2160 }
  
   -- get the desktop resolution and aspect ratio
   local desktopResX = WM:GetDesktopWidth()
   local desktopResY = WM:GetDesktopHeight()
   display.screenAspectRatio = desktopResX / desktopResY
   
   -- Figure out which card this is based on the PCI ID
   local DeviceID = WM:GetPCIDeviceId()
   local cardIndex = 1
  
   local bScreenResFound = false
  
   -- first check for eyefinity on 58xx+
   if cardIndex == 1 then
      -- bScreenResFound, display.windowWidth, display.windowHeight = FindSupportedDisplayMode( eyefinityModes, display.screenAspectRatio, -1 )
      bScreenResFound, display.windowWidth, display.windowHeight = FindSupportedDisplayMode( eyefinityModes, display.screenAspectRatio, -1 )
   end
   
   -- if eyefinity check didn't pass, try "standard" modes
   if not bScreenResFound then
      bScreenResFound, display.windowWidth, display.windowHeight = FindSupportedDisplayMode( standardModes, display.screenAspectRatio, cardResolutionLimit[ cardIndex ] )
   end
   
   -- this is pretty weird. Pick a standard res and 4:3 aspect ratio. I don't expect we'll hit this case much if at all
   if not bScreenResFound then
      display.windowWidth = 1024
      display.windowHeight = 768      
   end
   
   print( string.format( "Screen resolution is %dx%d", display.windowWidth, display.windowHeight ) )
end


function FindSupportedDisplayMode( modeTable, desiredAspectRatio, maxPixels )
   maxPixels = maxPixels or -1
   for _, mode in ipairs( modeTable ) do
      -- does this resolution have a right aspect ratio
      if math.abs( desiredAspectRatio - mode[1]/mode[2]) < 0.01 then
         -- is this resolution below the max cap?
         if mode[1]*mode[2] <= maxPixels or maxPixels == -1 then
            if WM:IsDisplayModeSupported( mode[1], mode[2], display.backBufferColorBits ) then
               return true, mode[1], mode[2]
            end
         end
      end
   end

   return false, 0, 0
end

if display.windowWidth == AUTO or display.windowHeight == AUTO then
   FindSuitableDisplayMode()     -- auto-detect best display mode
end

if display.screenAspectRatio == AUTO then
   if display.fullScreen then
      display.screenAspectRatio = WM:GetDesktopWidth() / WM:GetDesktopHeight()
   else
      display.screenAspectRatio = display.windowWidth / display.windowHeight
   end
end

-- #define symbol to control loop unrolling.  Set this to '[unroll]' to add D3D10's forced loop unrolling to any shaders that use it
-- Set this to the empty string to let everybody use whatever their defaults are  
EM:AddDefine( "SU_LOOP_UNROLL", "[unroll]" )
-- EM:AddDefine( "OFFSCREEN_MSAA", OffscreenMSAA )

-- Effect search paths

if API == "D3D11" or API == "D3D12" then
	EM:AddSearchPath( "../../amd_tressfx/src/shaders" )
	EM:AddSearchPath( "Effects/D3D11" )
	EM:AddSearchPath( "Effects/D3D11/Include" )
	EM:AddSearchPath( "Effects/D3DCommon/Include" )
end

OM:AddSearchPath( "Objects" )

SuFont:AddSearchPath( "Fonts" )

AM:AddSearchPath( "Audio" )

PM:AddSearchPath( "." )

objectListFileName = "Objects/objects.ini"
loadingScreenUI = "UI/LoadingScreen.swf"
mainMenuUI = "UI/MainMenu.swf"
mainMenuNeedsKeyReleaseEmulation = true -- emulate left mouse button release at menu selection time

warmCaches = false;


DemoMode{ scriptFileName = "Scripts/Normal.lua",
          command = "Draw()",
          soundTrack = "Soundtrack.mp3",
          name = "Normal",
          mouseVisible = false }

logoQuad = nil
launchModeQuad = nil

