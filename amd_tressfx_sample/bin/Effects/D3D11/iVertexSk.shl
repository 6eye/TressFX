//=================================================================================================================================
//
// Author: GPU Technology Initiatives
//         AMD, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/iVertexSk.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2012 All rights reserved. 
//=================================================================================================================================

// INCLUDES =======================================================================================================================
#define SU_SKINNING_MAX_BONES 200
#define SU_SKINNING_NUM_BONES 4

#include "SuMath.shl"
#include "SuSkinning.shl"

// STREAMS ========================================================================================================================

Stream sSkinnedStream <Normal>
{
   float3 POSITION     Position,
   dec3n  NORMAL0      Normal,
   half2  UV           UV <slot = "color">,
   float4 BLENDWEIGHT  BlendWeights <firstIndex = 0>,      // weights 0-4
   ubyte4 BLENDINDICES BlendIndices <firstIndex = 0>
}


Stream sSkinnedTangentStream <Normal>
{
   float3 POSITION     Position,
   dec3n  NORMAL0      Normal,
	dec3n Tangent      <slot = "NormalCamera">,
	dec3n Binormal     <slot = "NormalCamera">,
   half2  UV           UV <slot = "color">,
   float4 BLENDWEIGHT  BlendWeights <firstIndex = 0>,      // weights 0-4
   ubyte4 BLENDINDICES BlendIndices <firstIndex = 0>
}

Stream sSkinnedDepthOnly <Normal>
{
   float3 POSITION     Position,
   float4 BLENDWEIGHT  BlendWeights <firstIndex = 0>,      // weights 0-4
   ubyte4 BLENDINDICES BlendIndices <firstIndex = 0>
}

StreamMap smSkinnedStream { sSkinnedStream }
StreamMap smSkinnedTangentStream { sSkinnedTangentStream }
StreamMap smSkinnedDepthOnly { sSkinnedDepthOnly }

// HLSL ===========================================================================================================================

// NORMAL *************************************************************************************************************************


StartHLSL "VertexSkinned"

        $include "Math"
        $include "Skinning4x3"

        float4x4 mVP;

        struct VsInput
        {
           float4 vPosition    : POSITION;
           float3 vNormal      : NORMAL0;
           float2 vUV          : UV;
           float4 vWeights     : BLENDWEIGHT;
           uint4  nIndices     : BLENDINDICES;
           uint   nVertID      : SV_VertexID;
        };

        struct VsOutput
        {
           float2 vUV         : UV;
           float3 vPositionWS : TEXCOORD0;
           float3 vNormalWS   : TEXCOORD1;
		   float3 vCentroidNormalWS : TEXCOORD2;
           float4 vPosition   : SV_POSITION;
        };

        VsOutput VS ( VsInput i )
        {
           VsOutput o;

           // Skinning matrix

           float3x4 mSkinning = SuGetSkinningMatrix4x3( i.vWeights, i.nIndices );
      
           float3 vPositionWS = mul( mSkinning, i.vPosition );                        // Skin Position
           float3 vNormalWS   = mul( mSkinning, SuDecodeDec3N( i.vNormal ) );         // Skin Normal

           o.vPosition = mul( mVP, float4(vPositionWS,1) );
           o.vPositionWS = vPositionWS;
           o.vNormalWS = vNormalWS;
		   o.vCentroidNormalWS = vNormalWS;
           o.vUV = i.vUV;

           return o;
        }
EndHLSL 





StartHLSL "VertexSkinnedTangentSpace"

        $include "Math"
        $include "Skinning4x3"

        float4x4 mVP;

        struct VsInput
        {
           float4 vPosition    : POSITION;
           float3 vNormal      : NORMAL0;
           float3 vTangent     : Tangent;
           float3 vBinormal    : Binormal;
           float2 vUV          : UV;
           float4 vWeights     : BLENDWEIGHT;
           uint4  nIndices     : BLENDINDICES;
           uint   nVertID      : SV_VertexID;
        };

        struct VsOutput
        {
           float2 vUV         : UV;
           float3 vPositionWS : TEXCOORD0;
           float3 vNormalWS   : TEXCOORD1;
           float3 vTangentWS   : TEXCOORD2;
           float3 vBinormalWS   : TEXCOORD3;
		   float3 vCentroidNormalWS : TEXCOORD4;
           float4 vPosition   : SV_POSITION;
        };

        VsOutput VS ( VsInput i )
        {
           VsOutput o;

           // Skinning matrix
           float3x4 mSkinning = SuGetSkinningMatrix4x3( i.vWeights, i.nIndices );
      
           float3 vPositionWS = mul( mSkinning, i.vPosition );                        // Skin Position
           float3 vNormalWS   = mul( mSkinning, SuDecodeDec3N( i.vNormal ) );         // Skin Normal
           float3 vTangentWS   = mul( mSkinning, SuDecodeDec3N( i.vTangent) );                        // Skin Tangent
           float3 vBinormalWS  = mul( mSkinning, SuDecodeDec3N( i.vBinormal ) );                       // Skin Binormal

           o.vPosition = mul( mVP, float4(vPositionWS,1) );
           o.vPositionWS = vPositionWS;
           o.vNormalWS = vNormalWS;
		   o.vCentroidNormalWS = vNormalWS;
           o.vTangentWS = vTangentWS; 
           o.vBinormalWS = vBinormalWS;
           o.vUV = i.vUV;

           return o;
        }
EndHLSL 



StartHLSL "VertexSkinnedDepth" 

        $include "Math"
        $include "Skinning4x3"

        float4x4 mVP;

        struct VsInput
        {
           float4 vPosition    : POSITION;
           float4 vWeights     : BLENDWEIGHT;
           uint4  nIndices     : BLENDINDICES;
        };

        float4 VS ( VsInput i ) : SV_Position
        {
           // Skinning matrix
           float3x4 mSkinning = SuGetSkinningMatrix4x3( i.vWeights, i.nIndices );
           float3 vPositionWS = mul( mSkinning, i.vPosition );                // Skin position

           float4 o = mul( mVP, float4(vPositionWS,1) );
           return o;
        }

EndHLSL

