//=================================================================================================================================
//
// Author: Ryan Mayne
//         AMD, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/oPBRDefault.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2012 All rights reserved. 
//=================================================================================================================================

#include "SuMath.shl"
#include "iShadows.shl"
#include "iShadowedLighting.shl"
#define SU_LINEAR_SPACE_LIGHTING
#include "SuLighting.shl"
#include "iBRDF.shl"
#include "iLighting.shl"
#include "iParalaxOcclusion.shl"
#include "iUpsampleAO.shl"




// TEXTURES =======================================================================================================================
Texture2D tDiffuse      < format = DXT1, colorSpace = sRGB,
                          source0 = < slot = "color", label = "Diffuse Color", channels = RGB, colorSpace = sRGB > >
                          
Texture2D tRoughness    < format = R8, colorSpace = Linear,
                          source0 = < slot = "roughness", label = "Roughness Texture", channels = R, colorSpace = Linear, semantic = Gray >  >
                          
Texture2D tMettalic     < format = R8, colorSpace = Linear,
						  source0 = < slot = "mettalic", label = "Mettalic Texture", channels = R, colorSpace = Linear, semantic = Gray > >                         
                          
Texture2D tNormal       < format = DXT1, colorSpace = Linear,
						  source0 = < slot = "normal", label = "Normal Texture", channels = RGB, colorSpace = Linear > >
                     
                          
// MATERIAL PARAMETERS ============================================================================================================
// None For now

// CONSTANTS ======================================================================================================================
Matrix mViewProjectionMatrix < AppUpdate = ViewProjMatrix >
Vector vCameraPositionWS < AppUpdate = CameraPosition >


Vector vCameraParams < AppUpdate = CameraProjParams > // FOV, Aspect, NearClip, FarClip
Matrix mVP < AppUpdate = ViewProjMatrix >
Matrix mInvP < AppUpdate = ProjMatrixInverse >
Vector vViewport < AppUpdate = Viewport >

//Bool useParalaxOcclusion(1) < AppUpdate = "Script Variable", Name = "g_UseParalaxOcclusion" >

// SAMPLERS =======================================================================================================================
Sampler sDefaultSampler
{
   Filter = ANISOTROPIC;
   MaxAniso = 16;
   Texture = tDiffuse;
   AddressU = WRAP;
   AddressV = WRAP;
}

// INPUT STREAM ===================================================================================================================
Stream stream < Normal >
{
   float3 POSITION    Position,
   float3 NORMAL      Normal,
   float3 TANGENT     Tangent  <slot = "normal">,
   float3 BINORMAL    Binormal <slot = "normal">,
   half2  UV          UV       <slot = "normal">
}

Stream Depth
{
    float3 POSITION  Position
}

StreamMap DepthOnly { Depth }

StreamMap Default { stream }

// HLSL ============================================================================================================================

Technique Default
{
    Properties { "Normal", "Opaque" }

    Pass P0
    {
        StreamMap = Default;
    
        FillMode = SOLID;
        
        CullMode = BACK;
        
        VertexShader( HLSL, EntryPoint = "VS" )
        
            float4x4 mViewProjectionMatrix;
            
            struct VSInput
            {
                float3 Position  : POSITION;
                float3 normal    : NORMAL;
                float3 tangent   : TANGENT;
                float3 bitangent : BINORMAL;
                float2 TexCoord  : UV;
            };
            
            struct VSOutput
            {
                float2   TexCoord   : TEXCOORD0;
                float3x3 TBNMatrix  : TBNMat;
                float3   PositionWS : PositionWS;
                float3   Normal     : Normal;
                float4   Position   : SV_POSITION;
            };
            
            VSOutput VS( VSInput i)
            {
                VSOutput output;
                
                output.TexCoord = i.TexCoord;
                output.Normal = i.normal;
                output.TBNMatrix = float3x3(i.tangent, i.bitangent, i.normal);
                output.PositionWS = i.Position;
                output.Position = mul(mViewProjectionMatrix, float4(i.Position, 1.0));
                
                return output;
            }
            
            
        EndVertexShader
        
        PixelShader( HLSL, EntryPoint = "PS" )
            
            Matrix mInvP;
			float4 vViewport;
            float3 vCameraPositionWS;
			float4 vCameraParams;
            
            $include "Math"
            $include "OpaqueHairShadow"
            $include "ShadowMap"
            $include "ShadowedLighting"
            $include "SuLighting"
            $include "FrostbiteBRDF"
			$include "AccumulateLight"
            $include "ParalaxOcclusion"
	        $include "UpsampleAO"
            
            sampler sDefaultSampler;
            
            Texture2D<float3> tDiffuse;
            Texture2D<float3> tNormal;
            Texture2D<float>  tMettalic;
            Texture2D<float>  tRoughness;
            
            
            struct PSInput
            {
                float2   TexCoord   : TEXCOORD0;
                float3x3 TBNMatrix  : TBNMat;
                float3   PositionWS : PositionWS;
                float3   Normal     : Normal;
                float4   Position   : SV_POSITION;
            };
            
            
            float4 PS(PSInput i) : SV_TARGET
            {
            
                float3 tangentPosition = mul(i.TBNMatrix, i.PositionWS);
                float3 tangentViewPos = mul(i.TBNMatrix, vCameraPositionWS);
                
                float3 tangentViewDirection = normalize(tangentViewPos - tangentPosition);
                
                float2 parallaxedUV = CalculateParalaxOcclusion(i.TexCoord, tangentViewDirection);
                
                float roughness = tRoughness.Sample(sDefaultSampler, parallaxedUV);
                float mettalic  = tMettalic.Sample(sDefaultSampler, parallaxedUV);
                float3 diffuse  = tDiffuse.Sample(sDefaultSampler, parallaxedUV);
                
                float3 normal   = tNormal.Sample(sDefaultSampler, parallaxedUV);
                normal = normalize(normal * 2.0 - 1.0);
                normal = normalize(mul(normal, i.TBNMatrix));
                
                BRDFParams params;
				params.cDiffuse = diffuse;
				params.fSmoothness = roughness;
				params.cSpecular = float3(mettalic,mettalic,mettalic);
                
                float3 viewRay = normalize(vCameraPositionWS - i.PositionWS);
                
                float3 finalColor = AccumulateLightNPV(normal, i.PositionWS, viewRay, params, 1);
                
                float2 UV_AO = i.Position.xy / vViewport.zw;
                float3 depth = i.Position.z;
                float LinearDepth = (2 * vCameraParams.z) / (vCameraParams.w + vCameraParams.z - depth * (vCameraParams.w - vCameraParams.z));

                int2 PositionSS = floor( i.Position.xy );
                float AO = FetchUpsampledAO(PositionSS, UV_AO, normal, LinearDepth);
                AO = pow(AO, 1.5);
                AO = min(AO, 1.0);
                
                finalColor *= AO;
                
                return float4(finalColor, 1.0);
            }
            
            
            
        EndPixelShader
    }
}

Technique Normals : Default
{
	Properties { "Normals" }
	
	Pass P0
	{
        RenderTargetFormat = SU_FORMAT_R10G10B10A2_UNORM
        DepthStencilFormat = SU_FORMAT_D32_FLOAT
		StreamMap = Default
		
		FillMode = SOLID
		
		// Render state
		CullMode = BACK;
		
		// Blend state
		
		
		PixelShader( HLSL, EntryPoint="PS" )
		
			
            Texture2D<float3> tNormal;
            sampler sDefaultSampler;
		
            
            float3 vCameraPositionWS;
            
            $include "ParalaxOcclusion"
            
			struct PSInput
            {
                float2   TexCoord   : TEXCOORD0;
                float3x3 TBNMatrix  : TBNMat;
                float3   PositionWS : PositionWS;
                float3   Normal     : Normal;
                float4   Position   : SV_POSITION;
            };

			float4 PS( PSInput i ) : SV_TARGET
			{
                float3 tangentPosition = mul(i.TBNMatrix, i.PositionWS);
                float3 tangentViewPos = mul(i.TBNMatrix, vCameraPositionWS);
                
                float3 tangentViewDirection = normalize(tangentViewPos - tangentPosition);
                
                float2 parallaxedUV = CalculateParalaxOcclusion(i.TexCoord, tangentViewDirection);
            
				float3 normal = tNormal.Sample(sDefaultSampler, parallaxedUV);
                normal = normalize(normal * 2.0 - 1.0);
                normal = normalize(mul(normal, i.TBNMatrix));

				return float4( normal*.5+.5, 1 );			
			}
		EndPixelShader
	}
}

Technique DepthOnly
{
   Properties { "ShadowMap", "DepthOnly" }

   Pass P0
   {
      NumRenderTargets = 0
	  DepthStencilFormat = SU_FORMAT_D32_FLOAT

      // Input stream
      StreamMap = DepthOnly;

      // disable color writes
      ColorWriteEnableR = false
      ColorWriteEnableG = false
      ColorWriteEnableB = false
      ColorWriteEnableA = false      

      VertexShader( HLSL, EntryPoint="VS" )
        
        float4x4 mViewProjectionMatrix;
            
            struct VSInput
            {
                float3 Position  : POSITION;
            };
            
            struct VSOutput
            {
                float4   Position   : SV_POSITION;
            };
            
            VSOutput VS( VSInput i)
            {
                VSOutput output;
                
                output.Position = mul(mViewProjectionMatrix, float4(i.Position, 1.0));
                
                return output;
            }
      
      EndVertexShader


      PixelShader( NULL )

   }
}

Technique DepthCopy : DepthOnly
{
   Properties { "ShadowMap", "DepthCopy" }
   Pass P0
   {
      NumRenderTargets = 1
	  RenderTargetFormat = SU_FORMAT_R32_FLOAT
      DepthStencilFormat = SU_FORMAT_D32_FLOAT

      // disable color writes
      ColorWriteEnableR = true
      ColorWriteEnableG = true
      ColorWriteEnableB = true
      ColorWriteEnableA = true     

      PixelShader( HLSL )

			struct PSInput
			{
                float4   Position   : SV_POSITION;
			}; 

			float main ( PSInput i ) : SV_TARGET
			{
				return float(i.Position.z);
				//return 0.0;
			}

		EndPixelShader
   }
}

