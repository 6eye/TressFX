Texture2D tAO < BindRT = "ScriptVariable", Name = "tAOIn" >
Texture2D tNormals < BindRT = "ScriptVariable", Name = "tNormals" >
Texture2D tDepth < BindRT = "ScriptVariable", Name = "tDepthSS" >

Bool bDownsampledSSAO < AppUpdate = "ScriptVariable", Name = "SSAO.bDownsampled" >

StartHLSL "UpsampleAO"

   Texture2D<float4>  tAO;
   Texture2D<float4> tNormals;
   Texture2D<float>  tDepth;
   //SamplerState sLinearClamp;

   bool bDownsampledSSAO;

   float3 GetViewSpaceFromUV( float2 vUV, float fZ )
   {
      float4 vPosCS = float4( 0, 0, fZ, 1 );
                     // 0-2,-2-0         //-1 to 1, 1 to -1
      vPosCS.xy = vUV*float2(2.0,-2.0) + float2(-1.0,1.0);      // transform position into clip-space
      float4 vPosVS = mul( mInvP, vPosCS );
      vPosVS.xyz /= vPosVS.w;
      return vPosVS.xyz;
   }

   // Fetch and upsample the SSAO
   // nPosSS = integer screen coordinate of the high-res pixel
   float FetchUpsampledAO( int2 nPosSS, float2 vUV, float3 vNormalWS, float fLinearDepth )
   {
      // We need to upsample AO, which was computed at a lower resolution.
      float fUpsampledShading = 0;

      if( bDownsampledSSAO )
         {
         // Calculate low res integer coords
         int2 nCoordLowRes = 0;
         nCoordLowRes = floor((nPosSS-1) / 2);

         int2 nOffset[4] = { int2(0,0), int2(1,0), int2(0,1), int2(1,1) };

         // Get 2x2 low res AO values (try and use fetch4 here)
         float fShading_LR[4] = { 0,0,0,0 };
         float fValid[4] = { 0,0,0,0 };

         [unroll]
         for( int nSample=0; nSample<4; nSample++ )
         {
            float4 vShading = tAO.Load( int3( nCoordLowRes + nOffset[nSample], 0 ) );
            fShading_LR[nSample] = vShading.x;
            fValid[nSample] = vShading.a;
         }

         // Get 2x2 low res Normals
         float3 vNormalWS_LR[4] = { float3(0,0,0), float3(0,0,0), float3(0,0,0), float3(0,0,0) };

         [unroll]
         for( int nSample1=0; nSample1<4; nSample1++ )
         {
            vNormalWS_LR[nSample1] = tNormals.Load( int3( (nCoordLowRes + nOffset[nSample1])*2+1, 0 ) ).xyz;
         }

         // Get 2x2 low res Depth  (try and use fetch4 here)
         float fDepth_LR[4] = { 0,0,0,0 };

         [unroll]
         for( int nSample2=0; nSample2<4; nSample2++ )
         {
            fDepth_LR[nSample2] = tDepth.Load( int3( (nCoordLowRes + nOffset[nSample2])*2+1, 0 ) );
            fDepth_LR[nSample2] = -GetViewSpaceFromUV( vUV, fDepth_LR[nSample2] ).z/(vCameraParams.w-vCameraParams.z);

         }

         // Standard bilinear weights
         float4 vBilinear_list[4] = { float4( 0.5625, 0.1875, 0.1875, 0.0625 ), float4( 0.1875, 0.5625, 0.0625, 0.1875 ), 
                                      float4( 0.1875, 0.0625, 0.5625,0.1875 ),  float4( 0.0625, 0.1875, 0.1875, 0.5625 ) };
         //float4 vBilinear_list[4] = { float4( 0.25, 0.25, 0.25, 0.25 ), float4( 0.25, 0.25, 0.25, 0.25 ), 
         //                             float4( 0.25, 0.25, 0.25,0.25 ),  float4( 0.25, 0.25, 0.25, 0.25 ) };
         int nBilinear    = ( ( (nPosSS.x+1) % 2 ) == 0 ) ? 0 : 1; // first row
         int nBilinearTmp = ( ( (nPosSS.x+1) % 2 ) == 0 ) ? 2 : 3; // second row
         nBilinear        = ( ( (nPosSS.y+1) % 2 ) == 0 ) ? nBilinear : nBilinearTmp;

         float4 vBilinear = vBilinear_list[nBilinear];

         // "Normalness" weights
         float fNormalWeights[4] = { 0, 0, 0, 0 };
         [unroll]
         for( int nSample3=0; nSample3<4; nSample3++ )
         {
            fNormalWeights[nSample3] = pow( saturate(dot( vNormalWS_LR[nSample3]*2.0-1.0, vNormalWS )), 32 );
         }

         // "Depthness" weights
         float fDepthWeights[4] = { 0, 0, 0, 0 };
         [unroll]
         for( int nSample4=0; nSample4<4; nSample4++ )
         {
            fDepthWeights[nSample4] = 1.0/(.00001 + abs(fLinearDepth - fDepth_LR[nSample4]) );
         }

         float fTotalWeight = 0;

         [unroll]
         for( int nSample5=0; nSample5<4; nSample5++ )
         {
            float fWeight = fNormalWeights[nSample5]*fDepthWeights[nSample5]*vBilinear[nSample5]*fValid[nSample5];
            fTotalWeight += fWeight;
            fUpsampledShading += fShading_LR[nSample5]*fWeight;
         }

         fUpsampledShading /= (fTotalWeight);
      }
      else
      {
         // Perform a weighted-blend of nearby samples
         int2 nCoord = nPosSS;

         int2 nOffset[9] = { 
            int2(0,0), 
            int2(1,1), 
            int2(-1,-1), 
            int2(-1,1), 
            int2(1,-1),
            int2(0,1), 
            int2(0,-1), 
            int2(-1,0), 
            int2(1,0)
         };

         const int nSamples = 5;

         // Get 2x2 low res AO values (try and use fetch4 here)
         float fShading_LR[9] = { 0,0,0,0,0,0,0,0,0 };
         float fValid[9] = { 0,0,0,0,0,0,0,0,0 };

         [unroll]
         for( int nSample=0; nSample<nSamples; nSample++ )
         {
            float4 vShading = tAO.Load( int3( nCoord + nOffset[nSample], 0 ) );
            fShading_LR[nSample] = vShading.x;
            fValid[nSample] = vShading.a;
         }

         // Get 2x2 low res Normals
         float3 vNormalWS_LR[9] = { float3(0,0,0), float3(0,0,0), float3(0,0,0), float3(0,0,0), float3(0,0,0), float3(0,0,0), float3(0,0,0), float3(0,0,0), float3(0,0,0) };

         [unroll]
         for( int nSample1=0; nSample1<nSamples; nSample1++ )
         {
            vNormalWS_LR[nSample1] = tNormals.Load( int3( nCoord + nOffset[nSample1], 0 ) ).xyz;
         }

         // Get 2x2 low res Depth  (try and use fetch4 here)
         float fDepth_LR[9] = { 0,0,0,0,0,0,0,0,0 };

         [unroll]
         for( int nSample2=0; nSample2<nSamples; nSample2++ )
         {
            fDepth_LR[nSample2] = tDepth.Load( int3( nCoord + nOffset[nSample2], 0 ) );
            fDepth_LR[nSample2] = -GetViewSpaceFromUV( vUV, fDepth_LR[nSample2] ).z/(vCameraParams.w-vCameraParams.z);

         }

         // "Normalness" weights
         float fNormalWeights[9] = { 0,0,0,0,0,0,0,0,0 };
         [unroll]
         for( int nSample3=0; nSample3<nSamples; nSample3++ )
         {
            fNormalWeights[nSample3] = pow( saturate(dot( vNormalWS_LR[nSample3]*2.0-1.0, vNormalWS )), 32 );
         }

         // "Depthness" weights
         float fDepthWeights[9] = { 0,0,0,0,0,0,0,0,0 };
         [unroll]
         for( int nSample4=0; nSample4<nSamples; nSample4++ )
         {
            fDepthWeights[nSample4] = 1.0/(.00001 + abs(fLinearDepth - fDepth_LR[nSample4]) );
         }

         float fTotalWeight = 0;
         float fValidWeight = 0;

         [unroll]
         for( int nSample5=0; nSample5<nSamples; nSample5++ )
         {
            float fWeight = fNormalWeights[nSample5]*fDepthWeights[nSample5]*fValid[nSample5];//*fDistanceWeight[nSample5];
            fValidWeight += fValid[nSample5];
            fTotalWeight += fWeight;
            fUpsampledShading += fShading_LR[nSample5]*fWeight;
         }

         fUpsampledShading /= (fTotalWeight);
         //fUpsampledShading = tAO.Load( int3( nPosSS, 0 ) );
      }
      return fUpsampledShading;
   }

EndHLSL
