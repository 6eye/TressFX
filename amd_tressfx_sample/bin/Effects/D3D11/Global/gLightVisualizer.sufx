//=================================================================================================================================
//
// Author: Thorsten Scheuermann
//         3D Application Research Group
//         ATI Research, Inc.
//
// Global shader used to visualize light sources
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/Global/gLightVisualizer.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

ArtNotes
{
   This is an internal shader. Don't apply it in Maya.
}

#include "SuMath.shl"

// PARAMETERS =====================================================================================================================

Matrix mVP < AppUpdate = ViewProjMatrix >
Matrix mLightViewToWorld
Matrix mConeAngleRot
Vector vZeroNearFarPlane
Vector vLightPos
Vector cColor
Vector qOrientation
Vector vScale

Float fPointLightScale( 0.5 )

// STREAMS ========================================================================================================================
Stream SpotLightStream <Normal>
{
   float TEXCOORD0 Angle,        // These semantics aren't recognized by the preprocessor, but it doesn't matter to us
   float TEXCOORD1 Distance,
   float TEXCOORD2 ConeFlag
}

Stream PointLightStream <Normal>
{
   float3 POSITION Position
}

Stream VolumeLightSphereStream <Normal>
{
   float3 POSITION Position
}

Stream VolumeLightConeStream <Normal>
{
   float3 POSITION Position
}

Stream AreaLightStream <Normal>
{
   float3 POSITION Position
}

StreamMap SpotLightSM { SpotLightStream }
StreamMap PointLightSM { PointLightStream }
StreamMap VolumeLightSphereSM { VolumeLightSphereStream }
StreamMap VolumeLightConeSM { VolumeLightConeStream }
StreamMap AreaLightSM { AreaLightStream }

//=================================================================================================================================
// Shader techniques
//=================================================================================================================================

Technique RenderSpotLight
{
   Properties { "Normal" }
   
   Pass P0
   {
      StreamMap = SpotLightSM

      VertexShader( HLSL )

         float4x4 mVP;
         float4x4 mLightViewToWorld;
         float4x4 mConeAngleRot;
         float3   vZeroNearFarPlane;

         struct VsInput
         {
            float fAngle      : TEXCOORD0;
            float fDistance   : TEXCOORD1;
            float fConeFlag   : TEXCOORD2;
         };

         struct VsOutput
         {
            float4 vPos      : SV_POSITION;
         };

         VsOutput main( VsInput i )
         {
            VsOutput o;

            float4 vPosLVS = float4( 0, 0, -1, 1 );    // position in light's view space
            vPosLVS = mul( mConeAngleRot, vPosLVS );  // rotate around X
            
            // rotate around Z
            float2 vTmp;
            vTmp.x = cos( i.fAngle ) * vPosLVS.x - sin( i.fAngle ) * vPosLVS.y;
            vTmp.y = sin( i.fAngle ) * vPosLVS.x + cos( i.fAngle ) * vPosLVS.y;
            vPosLVS.xy = vTmp;
            
            // apply near and far plane distance
            vPosLVS.xyz *= vZeroNearFarPlane[ i.fDistance ] / abs( vPosLVS.z );
            
            // tranform from light view into world space
            float4 vPosWS = mul( mLightViewToWorld, vPosLVS );
            
            o.vPos = mul( mVP, vPosWS );

            return o;
         }
      EndVertexShader

      PixelShader( HLSL )
         float4 cColor;
         
         float4 main() : SV_TARGET
         {
            return cColor;
         }
      EndPixelShader
   }   
}

Technique RenderPointLight
{
   Properties { "Normal" }
   
   Pass P0
   {
      StreamMap = PointLightSM

      VertexShader( HLSL )

         float4x4 mVP;
         float3   vLightPos;
         float    fPointLightScale;

         struct VsInput
         {
            float4 vPos : POSITION;
         };

         struct VsOutput
         {
            float4 vPos : SV_POSITION;
         };

         VsOutput main( VsInput i )
         {
            VsOutput o;

            float4 vPos = i.vPos;
            vPos.xyz *= fPointLightScale;
            vPos.xyz += vLightPos;
            
            o.vPos = mul( mVP, vPos );

            return o;
         }
      EndVertexShader

      PixelShader( HLSL )
         float4 cColor;
         
         float4 main() : SV_TARGET
         {
            return cColor;
         }
      EndPixelShader
   }   
}

Technique RenderVolumeLightSphere
{
   Properties { "Normal" }
   
   Pass P0
   {
      StreamMap = VolumeLightSphereSM

      VertexShader( HLSL )

      $include "MathQuaternion"

      float4x4 mVP;
      float3   vLightPos;
      float4   qOrientation;
      float3   vScale;

      struct VsInput
      {
         float4 vPos : POSITION;
      };

      struct VsOutput
      {
         float4 vPos : SV_POSITION;
      };

      VsOutput main( VsInput i )
      {
         VsOutput o;

         float4 vPos = i.vPos;

         // scale
         vPos.x *= vScale.x;
         vPos.y *= vScale.y;
         vPos.z *= vScale.z;

         // rotation
         float4 vTmp = mul( SuQuatToMatrix(qOrientation), vPos );
         vPos=vTmp;

         // translation
         vPos.xyz += vLightPos;
         o.vPos = mul( mVP, vPos );

         return o;
      }
      EndVertexShader

      PixelShader( HLSL )
         float4 cColor;
         
         float4 main() : SV_TARGET
         {
            return cColor;
         }
      EndPixelShader
   }   
}

Technique RenderVolumeLightCone
{
   Properties { "Normal" }
   
   Pass P0
   {
      StreamMap = VolumeLightConeSM

      VertexShader( HLSL )

      $include "MathMatrix"
      $include "MathQuaternion"

         float4x4 mVP;
         float3   vLightPos;
         float4   qOrientation;
         float3   vScale;

         struct VsInput
         {
            float4 vPos : POSITION;
         };

         struct VsOutput
         {
            float4 vPos : SV_POSITION;
         };

         VsOutput main( VsInput i )
         {
            VsOutput o;

            float4 vPos = i.vPos;

         // scale
         vPos.x *= vScale.x;
         vPos.y *= vScale.y;
         vPos.z *= vScale.z;

         // rotation
         float4x4 mTmp = SuQuatToMatrix(qOrientation);
         float4 vTmp = mul( mTmp, vPos );
         vPos=vTmp;

         //translation
         vPos.xyz += vLightPos;
         o.vPos = mul( mVP, vPos );

         return o;
      }
      EndVertexShader

      PixelShader( HLSL )
         float4 cColor;
         
         float4 main() : SV_TARGET
         {
            return cColor;
         }
      EndPixelShader
   }   
}

Technique RenderAreaLight
{
   Properties { "Normal" }
   
   Pass P0
   {
      StreamMap = AreaLightSM

      VertexShader( HLSL )

      $include "MathQuaternion"

      float4x4 mVP;
      float3   vLightPos;
      float4   qOrientation;
      float3   vScale;

      struct VsInput
      {
         float4 vPos : POSITION;
      };

      struct VsOutput
      {
         float4 vPos : SV_POSITION;
      };

      VsOutput main( VsInput i )
      {
         VsOutput o;

         float4 vPos = i.vPos;

         // scale
         vPos.x *= vScale.x;
         vPos.y *= vScale.y;
         vPos.z *= vScale.z;

         // rotation
         float4 vTmp = mul( SuQuatToMatrix(qOrientation), vPos );
         vPos=vTmp;

         // translation
         vPos.xyz += vLightPos;
         o.vPos = mul( mVP, vPos );

         return o;
      }
      EndVertexShader

      PixelShader( HLSL )
         float4 cColor;
         
         float4 main() : SV_TARGET
         {
            //return cColor;
            return float4(1,0,0,1);
         }
      EndPixelShader
   }   
}
