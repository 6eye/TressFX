//=================================================================================================================================
//
// Author: Josh Barczak
//         3D Application Research Group
//         ATI Research, Inc.
//
//    D3D11 shader for font rendering
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/Global/gCustomFont.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

// ART NOTES ===================================================================
ArtNotes
{
   Standard effect file for font rendering.
}

// INCLUDES ====================================================================

// MISC ========================================================================
Options <normal>

// TEXTURES ====================================================================

Texture2D tFontTexture <blah>   // it won't compile without annotations

Sampler sSampler
{
   Texture = tFontTexture
   Filter = MIN_MAG_LINEAR_MIP_POINT   // bilinear filtering only, since they're always flat
   AddressU = CLAMP
   AddressV = CLAMP
};

// VARIABLES ===================================================================

// scale factors that convert from the font's logical space to NDC space
Float fFontScaleX (1)
Float fFontScaleY (1)

// font offset in NDC space
Float fFontOffsetX(0)
Float fFontOffsetY(0)

// scale factor to apply to font color
Vector vFontColor(1,1,1)

// STREAMS =====================================================================
Stream sFontVB <text>
{
   float2 POSITION  Position,
   float2 TEXCOORD0 UV
}


StreamMap sm1 { sFontVB }


// TECHNIQUES  ==================================================================

Technique Default
{
   Pass P0
   {
      StreamMap = sm1;
      CullMode = NONE;
      ZEnable     = false;
      BlendEnable = true;
      SrcBlend = SRCALPHA;
      DstBlend = INVSRCALPHA;
      SrcBlendAlpha = ONE;
      DstBlendAlpha = ONE;

      VertexShader ( HLSL )
      
         struct VSInput
         {
            float2 vPosition : POSITION;  // font position in logical space
            float2 vUV       : TEXCOORD0; // font UVs
         };

         struct VSOutput
         {
            float2 vUV       : TEXCOORD0;
            float4 vPosition : SV_POSITION;
         };

         float fFontScaleX;
         float fFontScaleY;
         float fFontOffsetX;
         float fFontOffsetY;

         VSOutput main( VSInput i )
         {
            VSOutput o;
            o.vUV = i.vUV;
            o.vPosition = float4( i.vPosition, 0, 1 );

            // convert position from logical space to NDC space
            o.vPosition.xy *= float2( fFontScaleX, fFontScaleY );

            // apply the font offset
            o.vPosition += float4( fFontOffsetX, fFontOffsetY, 0, 0 );

            // convert from NDC space to clip space
            o.vPosition *= float4(2,-2,1,1);
            o.vPosition -= float4(1,-1,0,0);
            return o;
         }

      EndVertexShader

      PixelShader ( HLSL )

         struct PSInput
         {
            float2 vUV : TEXCOORD0;
         };

         sampler sSampler;
         Texture2D<float4> tFontTexture;
         
         float4 vFontColor;
         
         float4 main( PSInput i ) : SV_TARGET
         {
            float4 vColor = tFontTexture.Sample( sSampler, i.vUV );
            vColor *= vFontColor;
            return vColor;
         }

      EndPixelShader
      
   }
}