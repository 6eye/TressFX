//=====================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/Global/gUI.sufx#1 $ 
//
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=====================================================================
//   (C) ATI Research, Inc.  All rights reserved.               
//=====================================================================

// ART NOTES ===================================================================
ArtNotes
{
   Effect file for use with Flash renderer
}

// INCLUDES ====================================================================

// MISC ========================================================================
Options <normal>

// TEXTURES ====================================================================

Texture2D tTex <blah>

Sampler sTexLinear
{
   Texture = tTex
   Filter = MIN_MAG_MIP_LINEAR
   AddressU = WRAP
   AddressV = WRAP
}

Sampler sTexPoint
{
   Texture = tTex
   Filter = MIN_MAG_MIP_POINT
   AddressU = WRAP
   AddressV = WRAP
}

// VARIABLES ===================================================================
Matrix mTransform
Vector vTexCoordTransform[2]

Bool bUseTextureFiltering
Bool bClampTexCoords
Bool bUseTexture
Vector cColor(1, 1, 1, 1)
Vector vColorTransform[2]

// STREAMS =====================================================================
Stream normalVerts <Normal>
{
   short2 POSITION Position
}

Stream glyphVerts <Normal>
{
   float2 POSITION  Position,
   float2 TEXCOORD0 TexCoord
}

StreamMap vertSM { normalVerts }
StreamMap glyphSM { glyphVerts }

// CODE BLOCKS =================================================================

Technique Base
{
   Properties { "Normal" }

   Pass P0
   {
      StreamMap = vertSM

      ZEnable = false
      ZWriteEnable = false
      ZFunc = ALWAYS
      CullMode = NONE
      BlendEnable = true
      BlendOp = ADD
      //FillMode = WIREFRAME
      
      VertexShader( HLSL )
         float4x4 mTransform;
         float4 vTexCoordTransform[2];
         
         struct VsInput
         {
            int2 vPos : POSITION;
         };
         
         struct VsOutput
         {
            float4 vPos : SV_POSITION;
            float2 vUV  : TEXCOORD0;
         };
         
         VsOutput main( VsInput i )
         {
            VsOutput o;
            
            o.vPos = mul( mTransform, float4( float2(i.vPos), 0.0, 1.0 ) );
            o.vUV.x = dot( float4(  float2(i.vPos), 0.0, 1.0 ), vTexCoordTransform[0] );
            o.vUV.y = dot( float4(  float2(i.vPos), 0.0, 1.0 ), vTexCoordTransform[1] );
            
            return o;
         }
         
      EndVertexShader
      
      PixelShader( HLSL )
         bool bUseTextureFiltering;
         bool bClampTexCoords;
         bool bUseTexture;
         float4 cColor;
         float4 vColorTransform[2];
         
         sampler sTexLinear;
         sampler sTexPoint;
         Texture2D<float4> tTex;
         
         struct PsInput
         {
            float4 vPos : SV_POSITION;
            float2 vUV: TEXCOORD0;
         };
         
         float4 main( PsInput i ) : SV_TARGET
         {
            float4 o = cColor;
            if( bUseTexture )
            {
               float2 vUV = bClampTexCoords ? saturate( i.vUV ) : i.vUV;
               float4 cTexColor = bUseTextureFiltering ? tTex.Sample( sTexLinear, vUV ).bgra : tTex.Sample( sTexPoint, vUV ).bgra;
               cTexColor *= vColorTransform[0];
               cTexColor.rgb += vColorTransform[1].rgb;
               o *= cTexColor;
            }

            return o;
         }
      EndPixelShader
   }
}

Technique Glyph_Base : Base
{
   Properties { "Normal" }

   Pass P0
   {
      StreamMap = glyphSM
      
      VertexShader( HLSL )
         float4x4 mTransform;
         
         struct VsInput
         {
            float2 vPos : POSITION;
            float2 vUV  : TEXCOORD0;
         };
         
         struct VsOutput
         {
            float4 vPos : SV_POSITION;
            float2 vUV  : TEXCOORD0;
         };
         
         VsOutput main( VsInput i )
         {
            VsOutput o;
            
            o.vPos = mul( mTransform, float4( i.vPos, 0.0, 1.0 ) );
            o.vUV = i.vUV;
            
            return o;
         }         
      EndVertexShader

      PixelShader( HLSL )
         bool bUseTextureFiltering;
         bool bClampTexCoords;
         float4 cColor;
         float4 vColorTransform[2];
         
         sampler sTexLinear;
         sampler sTexPoint;
         Texture2D<float4> tTex;
         
         struct PsInput
         {
            float4 vPos : SV_POSITION;
            float2 vUV: TEXCOORD0;
         };
         
         float4 main( PsInput i ) : SV_TARGET
         {
            float4 o = cColor;
            float2 vUV = bClampTexCoords ? saturate( i.vUV ) : i.vUV;
            o.a = bUseTextureFiltering ? tTex.Sample( sTexLinear, vUV ).a : tTex.Sample( sTexPoint, vUV ).a;
            
            return o;
         }
      EndPixelShader

   }
}

Technique Normal_RenderMask
{
   Properties { "Normal" }

   Pass P0
   {
      StreamMap = vertSM

      ZEnable = false
      ZWriteEnable = false
      ZFunc = ALWAYS
      CullMode = NONE
      BlendEnable = false

      ColorWriteEnableR = false
      ColorWriteEnableG = false
      ColorWriteEnableB = false
      ColorWriteEnableA = false      
      
      StencilEnable = true
      StencilRef = 1
      StencilReadMask = 1
      StencilWriteMask = 1

/*
      StencilFunc = ALWAYS
      StencilFailOp = KEEP
      StencilZFailOp = KEEP
      StencilPassOp = REPLACE
*/
      BackStencilFailOp = KEEP
      BackStencilZFailOp = KEEP
      BackStencilPassOp = REPLACE
      BackStencilFunc = ALWAYS

      VertexShader( HLSL )
         float4x4 mTransform;
         
         struct VsInput
         {
            int2 vPos : POSITION;
         };
         
         struct VsOutput
         {
            float4 vPos : SV_POSITION;
         };
         
         VsOutput main( VsInput i )
         {
            VsOutput o;
            
            o.vPos = mul( mTransform, float4( float2(i.vPos), 0.0, 1.0 ) );
            
            return o;
         }
         
      EndVertexShader
      
      PixelShader( HLSL )
         float4 main() : SV_TARGET
         {
            return float4(1, 1, 1, 1);
         }
      EndPixelShader
   }
}

Technique Base_UseMask : Base
{
   Pass P0
   {
      StencilEnable = true
      StencilRef = 1
      StencilReadMask = 1
      StencilWriteMask = 1
/*
      StencilFunc = EQUAL
      StencilFailOp = KEEP
      StencilZFailOp = KEEP
      StencilPassOp = KEEP
*/
      BackStencilFailOp = KEEP
      BackStencilZFailOp = KEEP
      BackStencilPassOp = KEEP
      BackStencilFunc = EQUAL
   }
}

Technique Glyph_Base_UseMask : Glyph_Base
{
   Pass P0
   {
      StencilEnable = true
      StencilRef = 1
      StencilReadMask = 1
      StencilWriteMask = 1

/*
      StencilFunc = EQUAL
      StencilFailOp = KEEP
      StencilZFailOp = KEEP
      StencilPassOp = KEEP
*/
      BackStencilFailOp = KEEP
      BackStencilZFailOp = KEEP
      BackStencilPassOp = KEEP
      BackStencilFunc = EQUAL
   }
}


Technique ClearBackground : Base
{
   Properties { "Normal" }

   Pass P0
   {
      BlendEnable = false
      
      PixelShader( HLSL )
         float4 cColor;
         
         float4 main() : SV_TARGET
         {
            return cColor;
         }
      EndPixelShader
   }
}

Technique ClearBackground_Alpha : ClearBackground
{
   Properties { "Normal" }

   Pass P0
   {
      BlendEnable = true
      SrcBlend = SRCALPHA
      DstBlend = INVSRCALPHA
   }
}

// ================================================================================================================================
// ================================================================================================================================
// ================================================================================================================================

Technique Normal_BlendNormal : Base // Modes 0, 1, 2, 4, 7, 10, 13, 14
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = INVSRCALPHA
   }
}

Technique Normal_BlendMultiply : Base  // Multiply
{
   Pass P0
   {
      SrcBlend = DESTCOLOR
      DstBlend = ZERO
   }
}

Technique Normal_BlendLighten : Base  // Lighten
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_BlendDarken : Base  // Darken
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_BlendAdd : Base  // Add
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_BlendSubtract : Base  // Subtract
{
   Pass P0
   {
      BlendOp = REVSUBSTRACT
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_BlendAlpha : Base // Alpha, also 12
{
   Pass P0
   {
      SrcBlend = ZERO
      DstBlend = ONE
   }
}

// ================================================================================================================================
// ================================================================================================================================
// ================================================================================================================================

Technique Normal_UseMask_BlendNormal : Base_UseMask // Modes 0, 1, 2, 4, 7, 10, 13, 14
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = INVSRCALPHA
   }
}

Technique Normal_UseMask_BlendMultiply : Base_UseMask  // Multiply
{
   Pass P0
   {
      SrcBlend = DESTCOLOR
      DstBlend = ZERO
   }
}

Technique Normal_UseMask_BlendLighten : Base_UseMask  // Lighten
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_UseMask_BlendDarken : Base_UseMask  // Darken
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_UseMask_BlendAdd : Base_UseMask  // Add
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_UseMask_BlendSubtract : Base_UseMask  // Subtract
{
   Pass P0
   {
      BlendOp = REVSUBSTRACT
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Normal_UseMask_BlendAlpha : Base_UseMask // Alpha, also 12
{
   Pass P0
   {
      SrcBlend = ZERO
      DstBlend = ONE
   }
}

// ================================================================================================================================
// ================================================================================================================================
// ================================================================================================================================

Technique Glyph_BlendNormal : Glyph_Base // Modes 0, 1, 2, 4, 7, 10, 13, 14
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = INVSRCALPHA
   }
}

Technique Glyph_BlendMultiply : Glyph_Base  // Multiply
{
   Pass P0
   {
      SrcBlend = DESTCOLOR
      DstBlend = ZERO
   }
}

Technique Glyph_BlendLighten : Glyph_Base  // Lighten
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_BlendDarken : Glyph_Base  // Darken
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_BlendAdd : Glyph_Base  // Add
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_BlendSubtract : Glyph_Base  // Subtract
{
   Pass P0
   {
      BlendOp = REVSUBSTRACT
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_BlendAlpha : Glyph_Base // Alpha, also 12
{
   Pass P0
   {
      SrcBlend = ZERO
      DstBlend = ONE
   }
}

// ================================================================================================================================
// ================================================================================================================================
// ================================================================================================================================

Technique Glyph_UseMask_BlendNormal : Glyph_Base_UseMask // Modes 0, 1, 2, 4, 7, 10, 13, 14
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = INVSRCALPHA
   }
}

Technique Glyph_UseMask_BlendMultiply : Glyph_Base_UseMask  // Multiply
{
   Pass P0
   {
      SrcBlend = DESTCOLOR
      DstBlend = ZERO
   }
}

Technique Glyph_UseMask_BlendLighten : Glyph_Base_UseMask  // Lighten
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_UseMask_BlendDarken : Glyph_Base_UseMask  // Darken
{
   Pass P0
   {
      BlendOp = MAX
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_UseMask_BlendAdd : Glyph_Base_UseMask  // Add
{
   Pass P0
   {
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_UseMask_BlendSubtract : Glyph_Base_UseMask  // Subtract
{
   Pass P0
   {
      BlendOp = REVSUBSTRACT
      SrcBlend = SRCALPHA
      DstBlend = ONE
   }
}

Technique Glyph_UseMask_BlendAlpha : Glyph_Base_UseMask // Alpha, also 12
{
   Pass P0
   {
      SrcBlend = ZERO
      DstBlend = ONE
   }
}
