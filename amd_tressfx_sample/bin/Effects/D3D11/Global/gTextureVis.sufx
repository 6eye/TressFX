//=================================================================================================================================
//
// Author: Josh Barczak
//         3D Application Research Group
//         ATI Research, Inc.
//
//    D3D10 shader for texture visualization mode.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/Global/gTextureVis.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

// ART NOTES ===================================================================
ArtNotes
{
   Effect file for use in texture visualization mode.
}

// INCLUDES ====================================================================

// MISC ========================================================================
Options <normal>

// TEXTURES ====================================================================

Texture2D         tTex <blah>
Texture2DArray    tTexArray <foo>
Texture3D         tTex3D <blah>
TextureCube       tTexCube <i_need_an_annotation_or_it_wont_compile>
TextureCubeArray  tTexCubeArray <i_need_an_annotation_or_it_wont_compile>


Sampler sSampler
{
   Texture = tTex
   Filter = MIN_MAG_MIP_LINEAR   // bilinear filtering only, since they're always flat
   AddressU = CLAMP
   AddressV = CLAMP
}

Sampler sSamplerArray
{
   Texture = tTexArray;
   Filter  = MIN_MAG_MIP_LINEAR
   AddressU = CLAMP;
   AddressV = CLAMP;
}

Sampler sSamplerCUBE
{
   Texture = tTexCube
   Filter = MIN_MAG_MIP_LINEAR   // bilinear filtering only, since they're always flat
   AddressU = WRAP
   AddressV = WRAP
}

Sampler sSampler3D
{
   Texture = tTex3D
   Filter = MIN_MAG_MIP_LINEAR;
   AddressU = CLAMP;
   AddressV = CLAMP;
   AddressW = CLAMP;
}

// VARIABLES ===================================================================

Vector vConstantColor   // color to draw with for the 'ConstantColor' technique

Vector vViewPosition    // location of the viewer in "layout" space
Float  fZoomLevel       // zoom level to use to scale quads
Float  fMipBias         // mip bias to use for texture lookups
Float  fMipLevel        // mip level to use for texture lookups

Bool   bDrawAlpha       // visualize the alpha channel
Bool   bDrawGreyscale   // render in greyscale using red channel as input

Int nArrayIndex         // Array slice to sample from, for a texture array
Float  fVolumeSliceOffset // Offset for volume textures

// STREAMS =====================================================================

// stream that contains vertex positions
Stream sPositions <Normal>
{
   float2 POSITION Position
}

// static stream that contains screen-aligned quad UVs
Stream sUV <Normal>
{
   float2 TEXCOORD0 Uv
}

StreamMap smPosition   { sPositions }
StreamMap smPositionUV { sPositions, sUV }


/// Technique for rendering constant-colored geometry without panning or zooming
Technique BackGround 
{
   Pass P0
   {
      ZEnable = false
      CullMode = NONE
      BlendEnable = true
      SrcBlend = SRCALPHA
      DstBlend = INVSRCALPHA
      StreamMap = smPosition

      // replace vertex shader so that it doesn't transform the vertices
      VertexShader( HLSL )

         float fZoomLevel;
         float2 vViewPosition;

         struct VSIn
         {
            float2 vPos : POSITION;    // vertex position in "layout" space
         };

         struct VSOut
         {
            float4 vPos : SV_POSITION;
         };

         VSOut main( VSIn input )
         {
            VSOut output;
            
            // do not transform positions
            
            // convert from NDC space to clip space
            output.vPos = float4(input.vPos*float2(2,-2),0,1) - float4(1,-1,0,0);
            return output;
         }

      EndVertexShader
      
      PixelShader( HLSL )
         
         
         float4 main( ) : SV_TARGET
         {
            return float4( 0.2,0.2,0.4,0.6 );
         }
      
      EndPixelShader
   }
}





/// Base technique for texture visualization
Technique Base
{
   Pass P0
   {
      ZEnable = false
      StreamMap = smPositionUV
      CullMode = NONE
      
      VertexShader( HLSL )
      
         float fZoomLevel;
         float2 vViewPosition;
         
         struct VSIn
         {
            float2 vPos : POSITION;    // vertex position in "layout" space
            float2 vUV  : TEXCOORD0;
         };
         
         struct VSOut
         {
            float2 vUV  : TEXCOORD0;
            float4 vPos : SV_POSITION;
         };
         
         VSOut main( VSIn input )
         {
            VSOut output;
            
            float2 vPos = input.vPos;
            
            // position quad relative to viewer position
            vPos = vPos - (vViewPosition);
            
            // convert from NDC space to clip space
            output.vPos = float4(vPos*float2(2,-2),0,1) - float4(1,-1,0,0);
            
            // apply zoom
            float fZoom = pow( 2.0, fZoomLevel );
            output.vPos *= float4( fZoom,fZoom, 0, 1 );
            output.vUV = input.vUV;
            return output;
         }
      
      EndVertexShader
      
      // dummy pixel shader, so it compiles
      PixelShader( HLSL )
      
         float4 main() : SV_TARGET
         {
            return float4(1,1,1,1);
         }
      EndPixelShader
   }
}


/// Technique for rendering constant-colored quads in layout space
Technique ConstantColor : Base
{
   Pass P0
   {
      PixelShader( HLSL )
         
         float4 vConstantColor;
         
         float4 main() : SV_TARGET
         {
            return vConstantColor;
         }
      
      EndPixelShader
   }
}


/// Technique for rendering gridlines (just make them black)
Technique Grid : Base
{
   Pass P0
   {
      PixelShader( HLSL )
      
         float4 main( ) : SV_TARGET
         {
            return float4(0,0,0,1);
         }
         
      EndPixelShader
   }
}



/// Technique for rendering a textured quad
Technique Tex2D : Base
{
   Pass P0
   {
   
      PixelShader( HLSL )
         
         sampler sSampler;
         Texture2D<float4> tTex;
         
         float fMipBias;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PSIn
         {
            float2 vUV : TEXCOORD0;
         };
         
         float4 main( PSIn input ) : SV_TARGET
         {
            float4 vUV = float4( input.vUV.x, input.vUV.y, 0, fMipBias );
            float4 vColor = tTex.SampleBias( sSampler, vUV.xy, fMipBias );
            
            if( bDrawAlpha )
            {
               vColor = vColor.aaaa;
            }
            else if( bDrawGreyscale )
            {
               vColor = vColor.rrrr;
            }
            return float4( vColor.rgb, 1 );
            
         }
      
      EndPixelShader
   }
}


Technique Tex2D_LOD : Tex2D
{
   Pass P0
   {
   
      PixelShader( HLSL )
         
         sampler sSampler;
         Texture2D<float4> tTex;
         
         float fMipLevel;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PSIn
         {
            float2 vUV : TEXCOORD0;
         };
         
         float4 main( PSIn input ) : SV_TARGET
         {
            float4 vUV = float4( input.vUV.x, input.vUV.y, 0, fMipLevel );
            float4 vColor = tTex.SampleLevel( sSampler, vUV.xy, fMipLevel );
            
            if( bDrawAlpha )
            {
               vColor = vColor.aaaa;
            }
            else if( bDrawGreyscale )
            {
               vColor = vColor.rrrr;
            }
            return float4( vColor.rgb, 1 );
            
         }
      
      EndPixelShader
   }
}


Technique Tex2DArray : Base
{
   Pass P0
   {
      PixelShader( HLSL )
         
         sampler sSamplerArray;
         Texture2DArray<float4> tTexArray;

         float fMipBias;
         int  nArrayIndex;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PSIn
         {
            float2 vUV : TEXCOORD0;
         };
         
         float4 main( PSIn input ) : SV_TARGET
         {
            float3 vUV = float3( input.vUV.x, input.vUV.y, nArrayIndex ); // first slice only for now
            float4 vColor = tTexArray.Sample( sSamplerArray, vUV ); 
            
            if( bDrawAlpha )
            {
               vColor = vColor.aaaa;
            }
            else if( bDrawGreyscale )
            {
               vColor = vColor.rrrr;
            }
            return float4( vColor.rgb, 1 );
            
         }
      
      EndPixelShader
   }
}

Technique Tex2DArray_LOD : Tex2DArray
{
   Pass P0
   {
      PixelShader( HLSL )
         
         sampler sSamplerArray;
         Texture2DArray<float4> tTexArray;

         float fMipLevel;
         int  nArrayIndex;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PSIn
         {
            float2 vUV : TEXCOORD0;
         };
         
         float4 main( PSIn input ) : SV_TARGET
         {
            float3 vUV = float3( input.vUV.x, input.vUV.y, nArrayIndex ); // first slice only for now
            float4 vColor = tTexArray.SampleLevel( sSamplerArray, vUV, fMipLevel ); 
            
            if( bDrawAlpha )
            {
               vColor = vColor.aaaa;
            }
            else if( bDrawGreyscale )
            {
               vColor = vColor.rrrr;
            }
            return float4( vColor.rgb, 1 );
            
         }
      
      EndPixelShader
   }
}

Technique Tex3D : Base
{
   Pass P0
   {
   
      PixelShader( HLSL )
         
         sampler sSampler3D;
         Texture3D<float4> tTex3D;
         float fMipBias;
         float fVolumeSliceOffset;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PSIn
         {
            float2 vUV : TEXCOORD0;
         };
         
         float4 main( PSIn input ) : SV_TARGET
         {
            float3 vUV;
            vUV.xy = input.vUV;
            vUV.z = fVolumeSliceOffset;
            float4 vColor = tTex3D.Sample( sSampler3D, vUV );
            
            if( bDrawAlpha )
            {
               vColor = vColor.aaaa;
            }
            else if( bDrawGreyscale )
            {
               vColor = vColor.rrrr;
            }
            return float4( vColor.rgb, 1 );
            
         }
      
      EndPixelShader
   }
}


Technique Tex3D_LOD : Tex3D
{
   Pass P0
   {
   
      PixelShader( HLSL )
         
         sampler sSampler3D;
         Texture3D<float4> tTex3D;
         float fMipLevel;
         float fVolumeSliceOffset;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PSIn
         {
            float2 vUV : TEXCOORD0;
         };
         
         float4 main( PSIn input ) : SV_TARGET
         {
            float3 vUV;
            vUV.xy = input.vUV;
            vUV.z = fVolumeSliceOffset;
            float4 vColor = tTex3D.SampleLevel( sSampler3D, vUV, fMipLevel );
            
            if( bDrawAlpha )
            {
               vColor = vColor.aaaa;
            }
            else if( bDrawGreyscale )
            {
               vColor = vColor.rrrr;
            }
            return float4( vColor.rgb, 1 );
            
         }
      
      EndPixelShader
   }
}

/// Code to draw a cube map, unwrapped into a cross shape.  This shader was stole verbatim from Sushi2
StartHLSL "VisualizeCubemap"
   float3 Su2DToCubeTexCoord( float2 vUV,
                              out bool bDrawBlack )
   {
      bDrawBlack = false;
      float3 vec = float3( 0, 0, 0 );
      float x = vUV.x;
      float y = vUV.y;
      float x2 = frac ((vUV.x) * 3.0f) * 2.0f - 1.0f;
      float y2 = frac ((vUV.y) * 4.0f) * 2.0f - 1.0f;
      if ((x >= 0.3333f) && (x <= 0.6666f)) //Center row
      {
         if (y >= 0.75f) //Top
            vec = float3(x2, y2, -1.0);
         else if (y >= 0.5f)
            vec = float3(x2, -1.0, -y2);
         else if (y >= 0.25f)
            vec = float3(x2, -y2, 1.0);
         else if (y >= 0.0f) //Bottom
            vec = float3(x2, 1.0, y2);
      }
      else if ((y >= 0.5f) && (y <= 0.75f))
      {
         if (x <= 0.3333f) //Left
            vec = float3(-1.0f, -x2, -y2);
         else if (x >= 0.6666f) //Left
            vec = float3(1.0f, x2, -y2);
         else
            bDrawBlack = true;
      }
      else
      {
         bDrawBlack = true;
      }
      return vec;
   }
EndHLSL

Technique TexCube : Base
{
   Pass P0
   {
   
      PixelShader( HLSL )
         
         $include "VisualizeCubemap"

         sampler sSamplerCUBE;
         TextureCube<float4> tTexCube;

         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PsInput
         {
            float2 texCoord : TEXCOORD0;
         };
      
         float4 main (PsInput i) : SV_TARGET
         {
            bool drawBlack = false;
            float3 vec = Su2DToCubeTexCoord( i.texCoord, drawBlack );

            // Sample base texture
            float4 cBase = tTexCube.Sample( sSamplerCUBE, vec );
            if (drawBlack == true)
               cBase = float4 (0.0f, 0.0f, 0.0f, 0.0f);

            if( bDrawAlpha )
            {
               cBase = cBase.aaaa;
            }
            else if( bDrawGreyscale )
            {
               cBase = cBase.rrrr;
            }

            // Compute final lighting
            return float4( cBase.rgb, 1 );
         }
      EndPixelShader
   }
}

Technique TexCube_LOD : TexCube
{
   Pass P0
   {
      PixelShader( HLSL )

         $include "VisualizeCubemap"

         sampler sSamplerCUBE;
         TextureCube<float4> tTexCube;

         float fMipLevel;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PsInput
         {
            float2 texCoord : TEXCOORD0;
         };
      
         float4 main (PsInput i) : SV_TARGET
         {
            bool drawBlack = false;
            float3 vec = Su2DToCubeTexCoord( i.texCoord, drawBlack );

            float4 cBase = tTexCube.SampleLevel( sSamplerCUBE, vec, fMipLevel );
            if (drawBlack == true)
               cBase = float4 (0.0f, 0.0f, 0.0f, 0.0f);

            if( bDrawAlpha )
            {
               cBase = cBase.aaaa;
            }
            else if( bDrawGreyscale )
            {
               cBase = cBase.rrrr;
            }

            return float4( cBase.rgb, 1 );
         }
      EndPixelShader
   }
}

Technique TexCubeArray : Base
{
   Pass P0
   {
      PixelShader( HLSL )
         
         $include "VisualizeCubemap"

         sampler sSamplerCUBE;
         TextureCubeArray<float4> tTexCubeArray;

         int  nArrayIndex;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PsInput
         {
            float2 texCoord : TEXCOORD0;
         };
      
         float4 main (PsInput i) : SV_TARGET
         {
            bool drawBlack = false;
            float3 vec = Su2DToCubeTexCoord( i.texCoord, drawBlack );

            // Sample base texture
            float4 cBase = tTexCubeArray.Sample( sSamplerCUBE, float4( vec, nArrayIndex ) );
            if (drawBlack == true)
               cBase = float4 (0.0f, 0.0f, 0.0f, 0.0f);

            if( bDrawAlpha )
            {
               cBase = cBase.aaaa;
            }
            else if( bDrawGreyscale )
            {
               cBase = cBase.rrrr;
            }

            // Compute final lighting
            return float4( cBase.rgb, 1 );
         }
      EndPixelShader
   }
}

Technique TexCubeArray_LOD : Base
{
   Pass P0
   {
   
      PixelShader( HLSL )
         
         $include "VisualizeCubemap"

         sampler sSamplerCUBE;
         TextureCubeArray<float4> tTexCubeArray;

         float fMipLevel;
         int  nArrayIndex;
         bool bDrawAlpha;
         bool bDrawGreyscale;
         
         struct PsInput
         {
            float2 texCoord : TEXCOORD0;
         };
      
         float4 main (PsInput i) : SV_TARGET
         {
            bool drawBlack = false;
            float3 vec = Su2DToCubeTexCoord( i.texCoord, drawBlack );

            // Sample base texture
            float4 cBase = tTexCubeArray.SampleLevel( sSamplerCUBE, float4( vec, nArrayIndex ), fMipLevel );
            if (drawBlack == true)
               cBase = float4 (0.0f, 0.0f, 0.0f, 0.0f);

            if( bDrawAlpha )
            {
               cBase = cBase.aaaa;
            }
            else if( bDrawGreyscale )
            {
               cBase = cBase.rrrr;
            }

            // Compute final lighting
            return float4( cBase.rgb, 1 );
         }
      EndPixelShader
   }
}

