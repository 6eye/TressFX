//=================================================================================================================================
//
// Author: Thorsten Scheuermann
//         3D Application Research Group
//         ATI Research, Inc.
//
// Global shader used by the object manager to accumulate blend shapes into a render target.
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/Global/gBlendShapeAnimation.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

#ifndef MAX_BLENDSHAPE_ACCUMULATION_QUADS
#error "MAX_BLENDSHAPE_ACCUMULATION_QUADS must be defined before loading this shader"
#endif

ArtNotes
{
   This is an internal shader. Don't apply it in Maya.
}

//Options <>

// TEXTURES =======================================================================================================================

Texture2DArray tBlendShapes < BlendShapeTexture >

Sampler sBlendShapes
{
   Texture = tBlendShapes
   Filter = MIN_MAG_MIP_POINT
   AddressU = CLAMP
   AddressV = CLAMP
   AddressW = CLAMP
}

// PARAMETERS =====================================================================================================================

Vector vIndexAndWeight[MAX_BLENDSHAPE_ACCUMULATION_QUADS]   // Contains slice index and blend weight for active blend shapes

// STREAMS ========================================================================================================================
Stream s1 <Normal>
{
   float3 Position,
   float2 TexCoord,
   float  QuadID
}

StreamMap sm1 {s1}

//=================================================================================================================================
// Shader techniques
//=================================================================================================================================

Technique AccumulateBlendShapes
{
   Properties { "Normal" }
   
   Pass P0
   {
      StreamMap = sm1

      ZEnable = false
      ZWriteEnable = false
      FillMode = SOLID
      CullMode = NONE

      BlendEnable = true
      SrcBlend = ONE
      DstBlend = ONE
      SrcBlendAlpha = ONE
      DstBlendAlpha = ONE
      BlendOp = ADD

      VertexShader( HLSL )

         float4 vIndexAndWeight[MAX_BLENDSHAPE_ACCUMULATION_QUADS];   // x contains blendshape index, y contains blend weight

         struct VsInput
         {
            float4 vPos        : Position;
            float2 vTexCoord   : TexCoord;
            float  fArrayIndex : QuadID;
         };

         struct VsOutput
         {
            float4 vTexCoord : TEXCOORD0; // w component contains blend weight
            float4 vPos      : SV_POSITION;
         };

         VsOutput main( VsInput i )
         {
            VsOutput o;

            o.vPos = i.vPos;    // Draw as fullscreen Quad

            float2 vBlendInfo = vIndexAndWeight[ i.fArrayIndex ].xy;
            o.vTexCoord = float4( i.vTexCoord, vBlendInfo );

            return o;
         }
      EndVertexShader

      PixelShader( HLSL )

         sampler sBlendShapes;
         Texture2DArray<float4> tBlendShapes;

         float4 main( float4 vTexCoord : TEXCOORD0 ) : SV_TARGET
         {
            return vTexCoord.w * tBlendShapes.Sample( sBlendShapes, vTexCoord.xyz );
         }
      EndPixelShader
   }   
}
