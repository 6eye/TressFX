//==============================================================================
// $File: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/Global/gSimple.sufx $
// $Revision: #1 $
// $Author: khillesl $
//==============================================================================
// (C) 2005 ATI Research, Inc., All rights reserved.
//==============================================================================

// ART NOTES ===================================================================
ArtNotes
{
   Shader used for rendering bounding volumes (SuBox and SuSphere objects)
}

// INCLUDES ====================================================================

// MISC ========================================================================
Options <animation = Skinned  >

// TEXTURES ====================================================================

// VARIABLES ===================================================================
Matrix mMW // model-world transform
Matrix mWVP < AppUpdate = ViewProjMatrix >

Vector cColor(0.8, 0.3, 0.1)

// STREAMS =====================================================================
Stream s1 <Normal>
{
   float3 Position,
   float3 Normal,
   float2 TexCoord
}

StreamMap sm1 {s1}

// Stream used by the batch line renderer.  Contains only positions
Stream sLines <Lines>
{
   float3 Position
};
StreamMap smLines{sLines};

// CODE BLOCKS =================================================================

Technique Solid
{
   Properties { "Normal" }

   Pass P0
   {
      StreamMap = sm1

      VertexShader(HLSL, EntryPoint="VS")
        float4x4 mMW;
        float4x4 mWVP;

        struct VsInput
        {
           float3 vPos : Position;
           float3 vNormal : Normal;
           float2 vTexCoord: TexCoord;
        };

        struct VsOutput
        {
           float4 vPos   : SV_POSITION;
        };

        VsOutput VS( VsInput i )
        {
           VsOutput o;
           float4 vPos = mul( mMW, float4( i.vPos, 1.0f ) );
           o.vPos = mul( mWVP, vPos );
           return o;
        }
      EndVertexShader

      PixelShader(HLSL, EntryPoint="PS")
         struct PsInput
         {
            float4 vPos   : SV_POSITION;
         };

         float3 cColor;

         float4 PS( PsInput i ) : SV_TARGET
         {
            return float4( cColor.xyz, 1 );
         }
      EndPixelShader
   }
}

Technique WireFrame
{
   Properties { "Normal" }

   Pass P0
   {
      StreamMap = sm1
   
      CullMode = NONE

      VertexShader(HLSL, EntryPoint="VS")
        float4x4 mWVP;
        float4x4 mMW;

        struct VsInput
        {
           float3 vPos : Position;
        };

        struct VsOutput
        {
           float4 vPos   : SV_POSITION;
        };

        VsOutput VS( VsInput i )
        {
           VsOutput o;
           float4 vPos = mul( mMW , float4( i.vPos, 1.0f ) );
           o.vPos = mul( mWVP, vPos );
           return o;
        }
      EndVertexShader

      PixelShader(HLSL, EntryPoint="PS")
         float3 cColor;

         struct PsInput
         {
            float4 vPos   : SV_POSITION;
         };

         float4 PS( PsInput i ) : SV_TARGET
         {
            return float4( cColor, 1.0 );
         }
      EndPixelShader
   }
}

Technique Lines : WireFrame
{
   Pass P0
   {
      StreamMap = smLines;
   }
}

Technique OcclusionQuery
{
   Pass P0
   {
      StreamMap = sm1

      ZEnable = true;
      ZWriteEnable = false;
      ZFunc = LESS;


      VertexShader(HLSL, EntryPoint="VS")
        float4x4 mMW;
        float4x4 mWVP;

        struct VsInput
        {
           float3 vPos : Position;
           float3 vNormal : Normal;
           float2 vTexCoord: TexCoord;
        };

        struct VsOutput
        {
           float4 vPos   : SV_POSITION;
        };

        VsOutput VS( VsInput i )
        {
           VsOutput o;
           float4 vPos = mul( mMW, float4( i.vPos, 1.0f ) );
           o.vPos = mul( mWVP, vPos );
           return o;
        }
      EndVertexShader

      PixelShader(NULL)
   }
}
