//=================================================================================================================================
//
// Author: Thorsten Scheuermann
//         3D Application Research Group
//         ATI Research, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/Global/gATILogo.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

// ART NOTES ===================================================================
ArtNotes
{
   Fullscreen Quad shader for showing ATI logo during launch mode
}

Texture2D tBase < format = RGBA, colorSpace = Linear, NoMips,
                  source0 = < slot = "Color", label = "Base", channels = RGBA, colorSpace=Linear > >

Sampler sBase
{
   Texture = tBase
   Filter = MIN_MAG_MIP_LINEAR
   AddressU = BORDER
   AddressV = BORDER
   BorderColor = (0, 0, 0, 0)
}

Vector vRTSize    < AppUpdate = Viewport > // Rendertarget dimensions in zw
Float  fFade      < AppUpdate = ScriptVar, Name = "Sushi.Internal.fLaunchScreenFade" >

// STREAMS =====================================================================
Stream QuadStream <Normal>
{
   float3 POSITION Position,
   float2 TEXCOORD0 UV <slot = "Color">
}

StreamMap sm1 { QuadStream }

// HLSL ========================================================================

StartHLSL "QuadVS"
   float4 vRTSize;

   struct VsInput
   {
      float3 vPos : POSITION;
      float2 vUV  : TEXCOORD0;
   };

   struct VsOutput
   {
      float2 vUV    : TEXCOORD0;
      float4 vPos   : SV_POSITION;
   };

   VsOutput main( VsInput i )
   {
      VsOutput o;

      /*
      o.vPos = float4( i.vPos, 1 );
      o.vPos.z = 0.5;
      o.vPos.y *= -1;   // make it not be behind the camera, and flip quad so that UVs are aligned to top-left
      o.vUV = i.vUV;
      */

      o.vPos = float4( sign( i.vPos.xy ), 0.5, 1 );
      o.vPos.y *= -1.0;

      o.vUV = o.vPos.xy * 1.5;
      o.vUV.x *= ( vRTSize.z / vRTSize.w );
      o.vUV = 0.5 * o.vUV + 0.5;

      o.vPos.xy += float2( -0.5, 0.5 ) / vRTSize.zw;

      //o.vUV = i.vPos.xz + 0.5;
      //o.vUV.y = 1 - o.vUV.y;
      return o;
   }
EndHLSL

// TECHNIQUES ==================================================================
Technique Default
{
   Properties { "Normal" }

   Pass P0
   {
      StreamMap = sm1

      FillMode = SOLID
      CullMode = NONE

      // DEPTH STATE
      ZEnable = false
      ZWriteEnable = false

      VertexShader( HLSL )
         $include "QuadVS"
      EndVertexShader

      PixelShader( HLSL )

         Texture2D<float4> tBase;
         sampler sBase;
         float fFade;

         struct PSInput
         {
            float2 vUV : TEXCOORD0;
         }; 

         float4 main( PSInput i ) : SV_TARGET
         {
            float4 o = float4( 0, 0, 0, 1 );
            o.rgb = fFade * tBase.Sample( sBase, i.vUV ).rgb; // texture is formated for DX9.  Swizzle for DX10
            return o;
         }
      EndPixelShader
   }
}
