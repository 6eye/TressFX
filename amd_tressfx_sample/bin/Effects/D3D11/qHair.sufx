

Vector g_vViewport < AppUpdate = Viewport >
Vector g_vCameraParams < AppUpdate = CameraProjParams >
Matrix g_mInvViewProj < AppUpdate = ViewProjMatrixInverse >
Vector g_vEye < AppUpdate = CameraPosition >

// TRESSFX Binding =========================================

Vector vFragmentBufferSize < >
Int nNodePoolSize < >

Texture2D tFragmentListHead     <  >
StructuredBuffer LinkedListSRV <  >

// =========================================



#include "SuGamma.shl"
#include "iHairShading.shl"
#include "TressFXRendering.hlsl"
#include "TressFXPPLL.hlsl"

#define SU_LINEAR_SPACE_LIGHTING
#include "SuLighting.shl"
#include "iBRDF.shl"
#include "iShadows.shl"
#include "iShadowedLighting.shl"
#include "iLighting.shl"

#include "iCommon.shl"
#include "iShortCut.shl"
#include "TressFXShortCut.hlsl"

Stream QuadStream <Normal>
{
   float2 vPosition
}

StreamMap sm1 { QuadStream }

Technique Default
{
   Pass P0
   {
	  StreamMap = sm1

		FillMode = SOLID
		CullMode = NONE
		ZEnable = false
		ZWriteEnable = false

		StencilEnable =  true
		StencilReadMask = 255
		StencilWriteMask = 0
		StencilZFailOp = KEEP
		StencilFailOp = KEEP
		StencilPassOp = KEEP
		StencilFunc = LESS
		BackStencilFailOp = KEEP
		BackStencilZFailOp = KEEP
		BackStencilPassOp = KEEP
		BackStencilFunc = LESS

		// Blending matches SDK Sample, which 
		// works in terms of (1-a) and otherwise premultiplied.
		BlendEnable = true
		SrcBlend = ONE
		DstBlend = SRCALPHA
		BlendOp = ADD
		SrcBlendAlpha = ZERO
		DstBlendAlpha = ZERO
		BlendOpAlpha = ADD

		VertexShader( HLSL )

			struct VS_OUTPUT_SCREENQUAD
			{
				float4 vPosition : SV_POSITION;
				float2 vTex      : TEXCOORD;
			};

			static const float2 Positions[] = { {-1, -1}, {1, -1}, {-1,1}, {1,1} };

			VS_OUTPUT_SCREENQUAD main(uint gl_VertexID : SV_VertexID)
			{
				VS_OUTPUT_SCREENQUAD output;
				//gl_Position = vec4( vPosition.xy, 0.5, 1);
				output.vPosition = float4( Positions[gl_VertexID].xy, 0, 1 );

				// y down.
				output.vTex = float2(Positions[gl_VertexID].x, -Positions[gl_VertexID].y) * 0.5 + 0.5;
				return output;
			}

		EndVertexShader

		PixelShader(NULL)


	}
}





Technique TressFX2 : Default
{
   Properties { "Quad" }

   Pass P0
   {
	  StreamMap = sm1

		FillMode = SOLID
		CullMode = NONE
		ZEnable = false
		ZWriteEnable = false

		StencilEnable =  true
		StencilReadMask = 255
		StencilWriteMask = 0
		StencilZFailOp = KEEP
		StencilFailOp = KEEP
		StencilPassOp = KEEP
		StencilFunc = LESS
		BackStencilFailOp = KEEP
		BackStencilZFailOp = KEEP
		BackStencilPassOp = KEEP
		BackStencilFunc = LESS

		// Blending matches SDK Sample, which 
		// works in terms of (1-a) and otherwise premultiplied.
		BlendEnable = true
		SrcBlend = ONE
		DstBlend = SRCALPHA
		BlendOp = ADD
		SrcBlendAlpha = ZERO
		DstBlendAlpha = ZERO
		BlendOpAlpha = ADD


		PixelShader( HLSL )

			float4x4 g_mInvViewProj;
			float4 g_vViewport;
            float3 g_vEye;

			$include "ErrorChecking"
			$include "GetWorldPos"
			$include "TressFXRendering"
            $include "TressFXPPLL_Common"


            $include "Math"
			$include "Gamma"
			$include "ShadowMap"
			$include "ShadowedLighting"
			$include "SuLighting"
			$include "AccumulateHairLight"

			////////////////////////////////////////////////////////////////
			// Code to Unroll K-buffer


            float4 ComputeSushiRGBA(float2 pixelCoord, float depth, float4 vTangentCoverage, float3 baseColor)
            {
                float3 vTangent = 2.0 * vTangentCoverage.xyz - 1.0;
                float3 vNDC = ScreenToNDC(float3(pixelCoord, depth), g_vViewport);
                float3 vPositionWS = NDCToWorld(vNDC, g_mInvViewProj);
                float3 vViewWS = g_vEye - vPositionWS;

                // TODO remove params, since we are using globals anyways.
                HairShadeParams params;

                params.cColor = baseColor;
                params.fRadius = g_FiberRadius;
                params.fSpacing = g_FiberSpacing;
                params.fAlpha = g_HairShadowAlpha;

                float3 color = AccumulateHairLight(vTangent, vPositionWS, vViewWS, params);
                return float4(color, vTangentCoverage.w);
            }


			#define HEAD_SHADING ComputeSushiRGBA
			#define TAIL_SHADING ComputeSushiRGBA

            $include "TressFXPPLL_Resolve"


			///////////////////////////////////////////////////////////////

			struct VS_OUTPUT_SCREENQUAD
			{
				float4 vPosition : SV_POSITION;
				float2 vTex      : TEXCOORD;
			};




			[earlydepthstencil]
			float4 main(VS_OUTPUT_SCREENQUAD input) : SV_Target
			{
				return GatherLinkedList(input.vPosition.xy);
			}

		EndPixelShader
	}
}




Technique ShortCutResolveDepth : Default
{
   Properties { "Quad" }

   Pass P0
   {
		StreamMap = sm1

		FillMode = SOLID
		CullMode = NONE
		ZEnable = true
		ZWriteEnable = true

		NumRenderTargets = 0
		ColorWriteEnableR = false
		ColorWriteEnableG = false
		ColorWriteEnableB = false
		ColorWriteEnableA = false

		StencilEnable =  false

		StencilReadMask = 255
		StencilWriteMask = 0
		StencilZFailOp = KEEP
		StencilFailOp = KEEP
		StencilPassOp = KEEP
		StencilFunc = LESS
		BackStencilFailOp = KEEP
		BackStencilZFailOp = KEEP
		BackStencilPassOp = KEEP
		BackStencilFunc = LESS

		PixelShader( HLSL )

			$include "TressFXShortCut_Common"
			$include "ErrorChecking"

            $include "TressFXShortCut_ResolveDepthPS"
            
		EndPixelShader
	}
}

Technique ShortCutResolveColor : Default
{
   Properties { "Quad" }

   Pass P0
   {
		StreamMap = sm1

		FillMode = SOLID
		CullMode = NONE
		ZEnable = false
		ZWriteEnable = false

		StencilEnable =  true
		StencilReadMask = 255
		StencilWriteMask = 0
		StencilZFailOp = KEEP
		StencilFailOp = KEEP
		StencilPassOp = KEEP
		StencilFunc = LESS
		BackStencilFailOp = KEEP
		BackStencilZFailOp = KEEP
		BackStencilPassOp = KEEP
		BackStencilFunc = LESS

		// Blending matches SDK Sample, which 
		// works in terms of (1-a) and otherwise premultiplied.
		BlendEnable = true
		SrcBlend = ONE
		DstBlend = SRCALPHA
		BlendOp = ADD
		SrcBlendAlpha = ZERO
		DstBlendAlpha = ZERO
		BlendOpAlpha = ADD

		PixelShader( HLSL )

			$include "TressFXShortCut_Common"
			$include "ErrorChecking"
			$include "GetWorldPos"
			$include "TressFXRendering"

            $include "TressFXShortCut_ResolveColorPS"

		EndPixelShader
	}
}
