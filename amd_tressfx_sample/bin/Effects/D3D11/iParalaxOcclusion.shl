Texture2D tHeight    < format = R8, colorSpace = Linear,
                          source0 = < slot = "bumpMap", label = "HeightMap Texture", channels = R, colorSpace = Linear, semantic = Gray >  >


Sampler DefaultSampler
{
    Filter = MIN_MAG_LINEAR_MIP_POINT;
    Texture = tHeight;
    AddressU = CLAMP;
    AddressV = WRAP;
}

StartHLSL ParalaxOcclusion
    
    Texture2D<float> tHeight;
    sampler DefaultSampler;
    
    float2 CalculateParalaxOcclusion(float2 UV, float3 viewDirection)
	{
        // The minimum and maximum number of layers to sample.
        // While looking straight at the surface you will need less layers because there isn't as much
        // texture displacement happening. By taking less samples while looking straight on a surface but
        // more samples while looking at the surface from an angle you only sample the necessary amount.
        float minimumLayers = 10;
        float maximumLayers = 20;
    
        float numLayers = lerp(maximumLayers, minimumLayers, abs(dot(float3(0.0,0.0,1.0), viewDirection)));
        
        float layerSize = 1.0 / numLayers;
        float currentLayerDepth = 0.0;
        
        // Dividing the viewDirection's xy by its z we are essentially giving us a much larger P vector
        // because the viewD is normalized, therefor the z component will be between 0.0 and 1.0.
        // when viewD is largly parralel to the surface its z component is close to 0.0, which will
        // return an even larger z value.
        float occlusionScale = 0.01;
        float2 p = viewDirection.xy / viewDirection.z * occlusionScale;
        
        float2 deltaUV = p / numLayers;
        
        float2 currentUV = UV;
        float currentDepthMapValue = 1 - tHeight.Sample(DefaultSampler, currentUV);
        
        // Iterate through all the depth layers until we find a depthMap value less than the layer's depth value.
        [loop]
        while(currentLayerDepth < currentDepthMapValue)
        {
            // shift texture coordinates along direction of P
            currentUV -= deltaUV;
            // get depthmap value at current texture coordinates
            currentDepthMapValue = 1 - tHeight.SampleLevel(DefaultSampler, currentUV,0);
            // get depth of next layer
            currentLayerDepth += layerSize;
        }
        
        // UV Before collision
        float2 previousUV = currentUV + deltaUV;
        
        float afterDepth = currentDepthMapValue - currentLayerDepth;
        float beforDepth = 1 - tHeight.Sample(DefaultSampler, previousUV) - currentLayerDepth + layerSize;
        
        float weight = afterDepth / (afterDepth - beforDepth);
        float2 finalUV = previousUV * weight + currentUV * (1.0 - weight);
        
        //finalUV.x = (finalUV.x < 0) ? 0 : finalUV.x;
        //finalUV.x = (finalUV.x > 1) ? 0 : finalUV.x;
        //finalUV.y = (finalUV.y < 0) ? 0 : finalUV.y;
        //finalUV.y = (finalUV.y > 1) ? 0 : finalUV.y;
        
        return finalUV;
	}
    
    
EndHLSL

