
// These are from TressFX11

// Per object quantities.

Int g_NumVerticesPerStrand < > // should be 2^n (n is integer and greater and 3) and less than or equal to THREAD_GROUP_SIZE. i.e. 8, 16, 32 or 64


Vector g_MatKValue< AppUpdate = ScriptVariable, Name = "g_MatKValue" >
Vector g_MatBaseColor < AppUpdate = ScriptVariable, Name = "g_cHairColor" >

Float g_fHairKs2 < AppUpdate = ScriptVariable, Name = "g_fHairKs2" >
Float g_fHairEx2 < AppUpdate = ScriptVariable, Name = "g_fHairEx2" >

Float g_FiberRadius < AppUpdate = ScriptVariable, Name = "g_FiberRadius" >
Float g_FiberSpacing < AppUpdate = ScriptVariable, Name = "g_FiberSpacing" >

Float g_HairShadowAlpha < AppUpdate = ScriptVariable, Name = "g_HairShadowAlpha" >




Texture2D g_txHairColor < >

Sampler g_samLinearWrap
{
   Texture = g_txHairColor
   Filter = MIN_MAG_LINEAR_MIP_POINT;
   AddressU = WRAP;
   AddressV = WRAP;
}








StartHLSL "TressFXConstants"



EndHLSL


StartHLSL "Kajiya_SDK"


#define SIMPLESHADING
#define SIMPLESHADOWING
//#define SUPERSIMPLESHADING		// constant diffuse (doesn't change with light angle)


#define SM_EPSLON 0.01
#define KERNEL_SIZE 5
#define USE_MAD_FOR_SHADOW 0

$include "TressFXConstants"








EndHLSL

StartHLSL "PhysicalKajiya"

#define PI 3.1415926

float4 g_MatKValue;
float4 g_MatBaseColor;
float4 g_PointLightColor;
float4 g_PointLightPos;
float4 g_AmbientLightColor;

float g_fHairKs2;
float g_fHairEx2;

float4 g_vEye;

//--------------------------------------------------------------------------------------
// HairColor
//
// Returns the hair base color modulated by the light/shadow intensity
//--------------------------------------------------------------------------------------

float Schlick( float c_spec, float l_dot_n )
{
    float x = (1.0 - l_dot_n);
    float raised = x*x*x*x*x;
    return c_spec + (1 - c_spec)*raised;
}



///--------------------------------------------------------------------------------------
// ComputeHairShading
//
// Hair shading using dual highlight approach and Kajiya lighting model
// dual highlight: marschner 03 
// kajiya model: kajiya 84
//--------------------------------------------------------------------------------------
float3 ComputeHairShading(float3 iPos, float3 iTangent, float4 iTex, float amountLight)
{

    float3 baseColor = g_MatBaseColor.xyz;
    float4 rand_value = float4(1,1,1,1);

//    if(abs(iTex.x) + abs(iTex.y) >1e-5) // if texcoord is available, use texture map
//        rand_value = g_txNoise.SampleLevel(g_samLinearWrap, iTex.xy, 0);
    
    // define baseColor and Ka Kd Ks coefficient for hair
    float Ka = g_MatKValue.x, Kd = g_MatKValue.y, 
          Ks1 = g_MatKValue.z, Ex1 = g_MatKValue.w,
          Ks2 = g_fHairKs2, Ex2 = g_fHairEx2;

	// If phong -> blinn
	Ex1 *= 4;
	Ex2 *= 4;


	// New parameters
	float fThickness = 1;  // Hair thickness for optical purposes
	float3 vAbsorption = float3(0.44,0.64,0.9); // chromatic absorption in exponential.
	float ExTT = 2*Ex1;  // Arbitrarily sharper, although I think 


	//----------------------------------------------------------
	// Light and Eye Vectors and Trigs
	//
    float3 lightPos = g_PointLightPos.xyz;
    float3 vLightDir = normalize(lightPos - iPos.xyz);
    float3 vEyeDir = normalize(g_vEye.xyz - iPos.xyz);
    float3 tangent = normalize(iTangent);

    float cosTL = (dot(tangent, vLightDir));
    float sinTL = sqrt(1 - cosTL*cosTL);
    float cosTE = min(dot(tangent, vEyeDir),1);
    float sinTE = sqrt(1- cosTE*cosTE);

	// For phong only.
    float cosTRL = -cosTL;
    float sinTRL = sinTL;



	//----------------------------------------------------------
	// Begin Specular computations.
	//

    float alpha = (rand_value.x*10)*PI/180; // tiled angle (5-10 dgree)

    // in Kajiya's model: specular component: cos(t, rl)*cos(t, e) + sin(t, rl)sin(t, e)
	// which is the same as cos ( theta_rl - theta_e ) with both measured from t.


	//----------------------------------------------------------
	// Transmissive vs Reflective
	//
	// Compute a weighting as to how reflective or transmissive.
	// i.e., Are E and L on opposite sides of T?
	// This creates an azimuthal dependence.
	//
	float3 Etheta = vEyeDir - cosTE * tangent;
	float3 Ltheta = vLightDir - cosTL * tangent;

	float fReflection = saturate(dot(Etheta,Ltheta));
	fReflection = sqrt(fReflection);
	float fTransmission = saturate(-dot(Etheta,Ltheta));
	fTransmission = sqrt(fTransmission);


	//-------------------------
	// Half-angle computation

	float cosTH = sqrt( 0.25*(1+cosTE)*(1+cosTL) ) - sqrt( 0.25*(1-cosTE)*(1-cosTL) );
	float sinTH = sqrt(1 -cosTH*cosTH);

	// This is how it's normally done, but didn't resolve catastrophic cancellation issues.
	//float3 hVector = normalize(vEyeDir + vLightDir); 
	//float cosTH = dot(hVector,tangent);


	// Shifted half angle for R as well as fresnel.
	float cosTH_r = cosTH*cos(alpha) + sinTH*sin(alpha);
	float sinTH_r = sqrt( max(1 - cosTH_r*cosTH_r,0));


	//----------------------------------------------------------
	// Diffuse
	//
    // in Kajiya's model: diffuse component: sin(t, l)
	//
	//float fDiffuse = sinTL_r / PI; 


	// Fresnel for first reflection.
	float F = Schlick(Ks1, sinTH_r);
	//F = Ks1;  //Old method



	float fSpecular_r = 0;
	float3 vSpecular_tt = 0;
	float3 vSpecular_trt = 0;





	//----------------------------------------------------------
	// primary highlight: reflected direction shift towards root (2*Alpha)
	//
	if(fReflection > 0 )
	{
		// Nromalization is a little different from Blinn due to 
		// sqrt(cos(theta)).  Blinn would be (Ex1+2)/2*PI
		//fSpecular_r = (Ex1 + 2) / (4.79256) * fReflection * F * pow(sinTH_r, Ex1);
		fSpecular_r = fReflection * F * pow(sinTH_r, Ex1);

		// Phong version
		//float cosTRL_r = cosTRL*cos(2*alpha) - sinTRL*sin(2*alpha);
		//float sinTRL_r = sqrt(1 - cosTRL_r*cosTRL_r);
		//float fSpecularPhong = max(0, cosTRL_r*cosTE + sinTRL_r*sinTE);
		//fSpecular_r = F*pow(fSpecularPhong, Ex1);
	}




	//----------------------------------------------------------
	// TT and TRT reflections only relevant if angle not too steep.
	//
	//if( abs(cosTL) > 0.001) // This could be a fresnel check.
	{
		float d_theta = fThickness / sqrt( 1 - 1.0/1.55*abs(cosTL)); //should be cosTL_r

		//----------------------------------------------------------
		// TT
		if(fTransmission > 0)
		{
			float cosTH_tt = cosTH*cos(0.5*alpha) - sinTH*sin(0.5*alpha);
			float sinTH_tt = sqrt( max(1 - cosTH_tt*cosTH_tt,0));

			float blinn_tt = sinTH_tt;
			float F_tt = (1 - F ) * ( 1 - F );

			float3 vAttenuation_tt = exp( -d_theta*vAbsorption );
			//vSpecular_tt = (ExTT + 2) / 4.79256 * fTransmission * F_tt  *vAttenuation_tt * pow(sinTH_tt, ExTT);
			vSpecular_tt = fTransmission * F_tt  *vAttenuation_tt * pow(sinTH_tt, ExTT);
		}
		//----------------------------------------------------------
		// TRT
		//
		// secondary highlight: reflected direction shifted toward tip (3*Alpha)
		else if(fReflection > 0)
		{

			float cosTH_trt = cosTH*cos(1.5*alpha) - sinTH*sin(1.5*alpha);
			float sinTH_trt = sqrt( max(1 - cosTH_trt*cosTH_trt,0));
			float F_trt = (1-F)*(1-F)*Schlick(Ks1, sinTH_trt); // a bit hacky.
			float3 vAttenuation = exp( -2.0 * d_theta*vAbsorption );
			//vSpecular_trt = (Ex2 + 2) / 4.79256 * fReflection * F_trt * vAttenuation * pow(sinTH_trt, Ex2);
			vSpecular_trt = fReflection * F_trt * vAttenuation * pow(sinTH_trt, Ex2);

			// Phong version
			//float cosTRL_trt = cosTRL*cos(-3*alpha) - sinTRL*sin(-3*alpha);
			//float sinTRL_trt = sqrt(1 - cosTRL_trt*cosTRL_trt);
			//float phong_trt = max(0, cosTRL_trt*cosTE + sinTRL_trt*sinTE);
		}
	}
    
    float3 vColor = //Ka * g_AmbientLightColor.rgb * baseColor + // ambient
                    amountLight * g_PointLightColor.rgb * sinTH_r * (
					1.0 / PI * baseColor // diffuse
                    + fSpecular_r.xxx // primary hightlight r
					+ vSpecular_tt
                    + vSpecular_trt
					); // secondary highlight rtr 
                    
    return vColor;
}


EndHLSL
