


//=================================================================================================================================
//
// Author: Karl Hillesland (karl.hillesland@amd.com)
//         AMD, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/oHair.sufx#3 $ 
// 
// Last check-in:  $DateTime: 2017/03/31 12:58:07 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2013 All rights reserved. 
//=================================================================================================================================


// ART NOTES ======================================================================================================================

ArtNotes
{
	Hair shader
}


// INCLUDES ======================================================================================================================

#include "SuMath.shl"
#include "SuGamma.shl"

#include "iHairShading.shl"
#include "TressFXPPLL.hlsl"
#include "TressFXRendering.hlsl"
#include "TressFXStrands.hlsl"
#include "iCommon.shl"
#include "iShortCut.shl"
#include "TressFXShortCut.hlsl"

#define SU_LINEAR_SPACE_LIGHTING
#include "SuLighting.shl"
#include "iBRDF.shl"
#include "iShadows.shl"
#include "iShadowedLighting.shl"
#include "iLighting.shl"


Matrix g_mVP < AppUpdate = ViewProjMatrix >
Matrix g_mInvViewProj < AppUpdate = ViewProjMatrixInverse >
Matrix g_mView < AppUpdate = ViewMatrix >
Matrix g_mProjection < AppUpdate = ProjMatrix >
Vector g_vEye < AppUpdate = CameraPosition >
Vector g_vViewport < AppUpdate = Viewport >
Vector g_vCameraParams < AppUpdate = CameraProjParams >

Bool g_bThinTip < AppUpdate = ScriptVariable, Name = "g_bThinTip" >
Float g_Ratio < AppUpdate = ScriptVariable, Name = "g_Ratio" >

Float zNear < AppUpdate = ScriptVariable, Name = "DOF.zNear" >
Float zFar  < AppUpdate = ScriptVariable, Name = "DOF.zFar" >
Float focusDistance < AppUpdate = ScriptVariable, Name = "DOF.focusDistance" >
Float fStop < AppUpdate = ScriptVariable, Name = "DOF.fStop" >
Float focalLength < AppUpdate = ScriptVariable, Name = "DOF.focalLength" >
Float cocHairThreshold <AppUpdate = ScriptVariable, Name = "DOF.cocHairThreshold" >

// TRESSFX Binding =========================================

StructuredBuffer g_GuideHairVertexPositions < >
StructuredBuffer g_GuideHairVertexTangents < >
StructuredBuffer g_HairThicknessCoeffs < >
StructuredBuffer g_HairStrandTexCd < >

RWTexture2D tRWFragmentListHead     <  >
RWStructuredBuffer LinkedListUAV <  ViewParams = < Counter = true > >

Vector vFragmentBufferSize < >
Int nNodePoolSize < >

// =========================================



StreamMap smNothing {  }


Technique DefaultVS
{

	Properties { "Normal" }
	Pass P0
	{
		StreamMap = smNothing
		FillMode = SOLID
		CullMode = BACK

		ZEnable = true
		ZFunc = LESSEQUAL

		ColorWriteEnableR = true
		ColorWriteEnableG = true
		ColorWriteEnableB = true
		ColorWriteEnableA = true

		BlendEnable = false

		StencilEnable =  false


		VertexShader( HLSL, EntryPoint="VS_RenderHair_AA"  )

            $include "TressFXRendering"
            $include "TressFXStrands"

            float4x4 g_mVP;
            float3 g_vEye;
            float4 g_vViewport;

            struct PS_INPUT_HAIR
            {
                float4 Position    : SV_POSITION;
                float4 Tangent     : Tangent;
                float4 p0p1        : TEXCOORD0;
                float3 strandColor : TEXCOORD1;
            };
            
            
            PS_INPUT_HAIR VS_RenderHair_AA( uint vertexId : SV_VertexID )
            {
                TressFXVertex tressfxVert = 
                    GetExpandedTressFXVert(vertexId, g_vEye, g_vViewport.zw, g_mVP);

                PS_INPUT_HAIR Output;

                Output.Position = tressfxVert.Position;    
                Output.Tangent  = tressfxVert.Tangent; 
                Output.p0p1     = tressfxVert.p0p1;  
                Output.strandColor = tressfxVert.strandColor;
                
                return Output;
            }


		EndVertexShader



	}
}


Technique Default: DefaultVS
{
	Pass P0
	{
	}
}




Technique DepthOnly: DefaultVS
{
   Properties { "ShadowMap", "DepthOnly" }
	Pass P0
	{
		DepthStencilFormat = SU_FORMAT_D32_FLOAT

        NumRenderTargets = 0

		ColorWriteEnableR = false
		ColorWriteEnableG = false
		ColorWriteEnableB = false
		ColorWriteEnableA = false	

		PixelShader(NULL)
	}
}

Technique DepthCopy: DefaultVS
{
   Properties { "ShadowMap", "DepthCopy" }
	Pass P0
	{
      NumRenderTargets = 1
	  RenderTargetFormat = SU_FORMAT_R32_FLOAT
      DepthStencilFormat = SU_FORMAT_D32_FLOAT

      ColorWriteEnableR = true
      ColorWriteEnableG = true
      ColorWriteEnableB = true
      ColorWriteEnableA = true     

      PixelShader( HLSL )

			struct PS_INPUT_HAIR
			{
				float4 Position   : SV_POSITION;
			}; 

			float main ( PS_INPUT_HAIR i ) : SV_TARGET
			{
				return float(i.Position.z);
				//return 0.0;
			}

		EndPixelShader
	}
}

Technique Stenciled : Default
{
	Pass P0
	{
		StencilEnable =  true
		StencilReadMask = 255
		StencilWriteMask = 255
		StencilZFailOp = KEEP
		StencilFailOp = KEEP
		StencilPassOp = INCRSAT
		StencilFunc = ALWAYS
		BackStencilFailOp = KEEP
		BackStencilZFailOp = KEEP
		BackStencilPassOp = INCRSAT
		BackStencilFunc = ALWAYS
	}

}

Technique TressFX2 : Stenciled
{
	Pass P0
	{
        NumRenderTargets = 1

		ZWriteEnable = false

		// disable color writes
		ColorWriteEnableR = false
		ColorWriteEnableG = false
		ColorWriteEnableB = false
		ColorWriteEnableA = false

		PixelShader( HLSL )


			float4x4 g_mInvViewProj;
			float4 g_vViewport;


			$include "TressFXPPLL_Common"
			$include "TressFXPPLL_Build"

			$include "GetWorldPos"
			$include "TressFXRendering"
			$include "ErrorChecking"


			struct PS_INPUT_HAIR_AA
			{
				float4 Position	: SV_POSITION;
				float4 Tangent	: Tangent;
				float4 p0p1		: TEXCOORD0;
				float3 strandColor : TEXCOORD1;
				//float4 PosCheck : POSCHECK;
			};



			[earlydepthstencil]
			VOID_RETURN main( PS_INPUT_HAIR_AA input ) VOID_RETURN_SEMANTIC
			{
				float3 vNDC = ScreenToNDC(input.Position.xyz, g_vViewport);
				float3 vPositionWS = NDCToWorld(vNDC, g_mInvViewProj);

				float coverage = ComputeCoverage(input.p0p1.xy, input.p0p1.zw, vNDC.xy, g_vViewport.zw);
				float alpha = coverage*g_MatBaseColor.a;

				ASSERT(coverage >= 0)
				if(alpha < 1.0 / 255.0)
					RETURN_NOTHING

			int2   vScreenAddress = int2(input.Position.xy);
			// Allocate a new fragment
			int nNewFragmentAddress = AllocateFragment(vScreenAddress);
			ASSERT ( nNewFragmentAddress != FRAGMENT_LIST_NULL )

			int nOldFragmentAddress = MakeFragmentLink(vScreenAddress, nNewFragmentAddress);
			WriteFragmentAttributes(nNewFragmentAddress, nOldFragmentAddress, float4(input.Tangent.xyz*0.5 + float3(0.5,0.5,0.5),alpha), input.strandColor.xyz, input.Position.z); 

            RETURN_NOTHING


			}
		EndPixelShader
	}
}



Technique ShortCutDepthsAlpha : Stenciled
{
	Pass P0
	{
		RenderTargetFormat = SU_FORMAT_R16_FLOAT
		NumRenderTargets = 1

		ZEnable = true
		ZWriteEnable = false

		ColorWriteEnableG = false
		ColorWriteEnableB = false
		ColorWriteEnableA = false

		// multiplicative blend
		BlendEnable = true
		SrcBlend = ZERO
		DstBlend = SRCCOLOR
		BlendOp = ADD
		SrcBlendAlpha = ZERO
		DstBlendAlpha = SRCALPHA
		BlendOpAlpha = ADD

		PixelShader( HLSL )

			$include "TressFXShortCut_Common"
			$include "TressFXRendering"
			$include "GetWorldPos"
			$include "ErrorChecking"

            $include "TressFXShortCut_DepthsAlphaPS"

		EndPixelShader
	}
}

Technique ShortCutFillColors : Stenciled
{
	Pass P0
	{
		RenderTargetFormat = SU_FORMAT_R16G16B16A16_FLOAT

		ZEnable = true
		ZWriteEnable = false
                
        NumRenderTargets = 1
		ColorWriteEnableR = true
		ColorWriteEnableG = true
		ColorWriteEnableB = true
		ColorWriteEnableA = true

		BlendEnable = true
		SrcBlend = ONE
		DstBlend = ONE
		BlendOp = ADD
		SrcBlendAlpha = ONE
		DstBlendAlpha = ONE
		BlendOpAlpha = ADD

		PixelShader( HLSL )

			$include "TressFXShortCut_Common"
			$include "TressFXRendering"
			$include "GetWorldPos"
			$include "ErrorChecking"

            $include "Math"
            $include "Gamma"
            $include "ShadowMap"
            $include "ShadowedLighting"
            $include "SuLighting"
            $include "AccumulateHairLight"

            float4 ComputeSushiRGBA(float2 pixelCoord, float depth, float4 vTangentCoverage, float3 baseColor)
            {
                float3 vTangent = 2.0 * vTangentCoverage.xyz - 1.0;
                float3 vNDC = ScreenToNDC(float3(pixelCoord, depth), g_vViewport);
                float3 vPositionWS = NDCToWorld(vNDC, g_mInvViewProj);
                float3 vViewWS = g_vEye - vPositionWS;

                // TODO remove params, since we are using globals anyways.
                HairShadeParams params;

                params.cColor = baseColor;
                params.fRadius = g_FiberRadius;
                params.fSpacing = g_FiberSpacing;
                params.fAlpha = g_HairShadowAlpha;

                float3 color = AccumulateHairLight(vTangent, vPositionWS, vViewWS, params);
                return float4(color, vTangentCoverage.w);
            }

			#define HEAD_SHADING ComputeSushiRGBA

			$include "TressFXShortCut_FillColorsPS"

		EndPixelShader
	}
}
