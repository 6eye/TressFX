
#include "SuMath.shl"

// TEXTURES =======================================================================================================================
Texture2D tColor < BindRT = "tBackBuffer" >


// PARAMETERS =====================================================================================================================

// STREAMS ========================================================================================================================
Stream QuadStream <Normal>
{
   float3 POSITION Position,
   float2 UV       UV <slot = "">
}

StreamMap sm1 { QuadStream }

Sampler BilinearSampler
{
   Texture = tColor; // pointless texture bind required here because dx9
   Filter  = MIN_MAG_LINEAR_MIP_POINT;
   AddressU = CLAMP;
   AddressV = CLAMP;
};

Int bufferWidth         < AppUpdate = ScriptVariable, Name = "DOF.BUFFER_WIDTH" >
Int bufferHeight        < AppUpdate = ScriptVariable, Name = "DOF.BUFFER_HEIGHT" >
Int scale_factor        < AppUpdate = ScriptVariable, Name = "DOF.SCALE_FACTOR" >
Int padding             < AppUpdate = ScriptVariable, Name = "DOF.BUFFER_PADDING" >


Technique CopyFinalResults
{
   Properties { "CopyFinalResults" }

   Pass P0
   {
        RenderTargetFormat = SU_FORMAT_R8G8B8A8_UNORM_SRGB
        StreamMap = sm1
        CullMode = NONE
        ZEnable = false
        StencilEnable = false

        VertexShader( HLSL )
      
        struct VSInput
        {
            float3 vPosition : Position;
        };
         
        struct PSInput
        {
            float4 vPosition : SV_Position;
            float2 vUV       : TexCoord;
        };
         
        PSInput main( VSInput i )
        {
            PSInput o;

            float4 vPosition = float4( i.vPosition.xy, 0.5, 1 );
            float2 vUV = float2(vPosition.x, -vPosition.y) * 0.5 + 0.5;

            o.vPosition = vPosition;
            o.vUV = vUV;

            return o;
        }
      
        EndVertexShader

        PixelShader( HLSL, EntryPoint="PS")

            Texture2D<float4> tColor;
            SamplerState BilinearSampler;

            struct PSInput
            {
                float4 vPosition : SV_Position;
                float2 vUV       : TexCoord;
            };
            

            float4 PS ( PSInput i ) : SV_TARGET
            {
                return tColor.Sample(BilinearSampler, i.vUV);
            }
      EndPixelShader
   }
}

