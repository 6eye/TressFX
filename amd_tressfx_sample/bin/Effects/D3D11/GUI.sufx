ArtNotes
{
   Simple effect for GUI system
}

Matrix mProjection < AppUpdate = ProjMatrix >

Texture2D GUIFontTexture < BindSR = "GUIFontTexture" >
	
// Texture Sampler
Sampler sBase
{
   Texture = GUIFontTexture
   Filter = MIN_MAG_MIP_LINEAR
}

// Base mesh stream
Stream PosStream < Normal >
{
   float2 POSITION,
   float2 TEXCOORD0,
   ubyte4n COLOR0
}

StreamMap sm1 { PosStream }

Technique GUI
{
   Properties { "GUI" }
   Pass P0
   {
      StreamMap = sm1;

	  FillMode = SOLID
      CullMode = NONE
      BlendEnable = true
      SrcBlend = SRCALPHA;
      DstBlend = INVSRCALPHA;
      SrcBlendAlpha = ONE;
      DstBlendAlpha = ONE;
      ZEnable = false
      ZWriteEnable = false

	  	  
      VertexShader( HLSL, EntryPoint="VS" )

		 float4x4 mProjection;

         struct VsInput
         {
            float2 vPosition : POSITION;
			float2 vUV       : TEXCOORD0;
            float4 vColor   : COLOR;
         };

         struct VsOutput
         {
            float4 vPosition : SV_POSITION;
			float2 vUV       : TEXCOORD0;
            float4 vColor    : COLOR;
         };

         VsOutput VS ( VsInput i )
         {
            VsOutput o;
			
			o.vUV = i.vUV;
            o.vPosition = mul( mProjection, float4(i.vPosition.xy,0,1.0));
			o.vColor = i.vColor;
			
            return o;
         }
      EndVertexShader



      PixelShader( HLSL, EntryPoint="PS" )

         struct PSInput
         {
            float4 vPosition   : SV_POSITION;
			float2 vUV		   : TEXCOORD0;
            float4 vColor      : COLOR;
         };

		 struct PSOutput
		 {
			float4 vColor : SV_TARGET;
		 };
		 
         sampler sBase;
		 Texture2D <float4> GUIFontTexture;
		 
         PSOutput PS (PSInput i)
         {
			PSOutput o = (PSOutput)0;
			
			float4 color = i.vColor * GUIFontTexture.Sample(sBase, i.vUV);
			o.vColor = color;
			
			return o;
         }
      EndPixelShader
   }
}