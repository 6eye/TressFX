
TextureCube tIBLCosCube <  >
TextureCube tIBLGGXCube <  >

//Texture2D tIBLSphere < format = RGBA16F, colorSpace = Linear ,
//		source0 = < fileName = "s:/Demos/2015/HDR/Art/sourceImages/StarField.dds", channels = RGB, colorSpace=Linear, NoMips > >

Float fAmbientScale < AppUpdate = "ScriptVariable", Name = "fAmbientScale" >

Sampler sLinearClampIBL
{
   Filter = MIN_MAG_MIP_LINEAR;
   Texture = tIBLCosCube;
   AddressU = WRAP;
   AddressV = WRAP;
}




Float fGlobalSpecularScale < AppUpdate = "ScriptVariable", Name = "fGlobalSpecularScale" >
Float fLightScale < AppUpdate = "ScriptVariable", Name = "fLightScale" >


StartHLSL AccumulateLight

	float fGlobalSpecularScale;
	float fLightScale;

	sampler sLinearClampIBL;
	float fAmbientScale;


	float3 ConvertFromSRGB(float3 inColor)
	{
		//return SuGammaToLinear(inColor);
	}

	struct BRDFParams
	{
		float3 cDiffuse;
		float fSmoothness;
		float3 cSpecular;
	};

	float RoughToSPow(float fRoughness)
	{
		return (2.0/(fRoughness*fRoughness))-2.0;
	}

	static const float k0 = 0.00098, k1 = 0.9921;
	static const float fUserMaxSPow = 798;
 
	// pass this as a constant for optimization
	static const float g_fMaxT = ( exp2(-10.0/sqrt( fUserMaxSPow )) - k0)/k1;
	static const float k_nMips = 11;
	static const float nMipOffset = 3;
 
 
	float GetSpecPowToMip(float fSpecPow, int nMips)
	{
	   // Default curve - Inverse of TB2 curve with adjusted constants
	   float fSmulMaxT = ( exp2(-10.0/sqrt( fSpecPow )) - k0)/k1;
	 
	   return float(nMips-1-nMipOffset)*(1.0 - clamp( fSmulMaxT/g_fMaxT, 0.0, 1.0 ));
	}

	float GetRoughnessToMip(float fRoughness, float N, float R)
	{
		float fSpecPow = RoughToSPow(fRoughness);
		fSpecPow /= (4*max(dot(N,R), 1e-5));
		return GetSpecPowToMip(fSpecPow, k_nMips); 
	}


	float3 AccumulateLightNPV(float3 vNormalWS, float3 vPositionWS, float3 vViewWS, BRDFParams params, float fExtraAmbientScale = 1)
	{
		float3 N = normalize(vNormalWS);
		float3 V = normalize(vViewWS);
		float NdotV = abs((dot(N,V))) + 1e-5;


		float3 f0 = 0.16 * params.cSpecular*params.cSpecular;
		float linearRoughness = 1.0 - params.fSmoothness;
		float roughness = linearRoughness * linearRoughness;

		// Light update system only counts lights that affect this object.
		int lightCount = nNumLights; 

		float3 color = float3(0,0,0);

		for(int i=0; i < lightCount; ++i)
		{
			// volume lights will be treated as omni-directional.
			if( SuIsVolume( i ) )
			{
				color += SuComputeVolumeAmbient( vPositionWS, i );
			}
			else
			{
				float3 vLightDirWS, cLightColor;
				SuGetLightLocal( vPositionWS, i,  vLightDirWS, cLightColor);

				float3 L = normalize(vLightDirWS);
				float3 H = normalize( L + V );

				float NdotL = saturate(dot(N,L));
				float NdotH = saturate(dot(N,H));
				float LdotH = saturate(dot(L,H));

				float3 cReflectedLight = fGlobalSpecularScale * vLightParams[i].w * MicrofacetSpec( f0, roughness, NdotL, NdotV, NdotH, LdotH);
				cReflectedLight += vLightParams[i].z * Diffuse(params.cDiffuse, linearRoughness, NdotL, NdotV, NdotH, LdotH );

				int nLightID = nLightIndex[i]; // global ID used for shadows.
				cReflectedLight *= NdotL ;
				cReflectedLight *= ComputeLightShadow( nLightID, vPositionWS );
				cReflectedLight *= cLightColor;
				cReflectedLight *= fLightScale;

				color += max(0,cReflectedLight);
			}
		}


		return color;

	}

	// Two big differences here
	//  1)  f0 does not include 0.16 factor
	//  2)  Only specular computed

	float3 AccumulateMetalNPV(float3 vNormalWS, float3 vPositionWS, float3 vViewWS, BRDFParams params, float fExtraAmbientScale = 1)
	{
		float3 N = normalize(vNormalWS);
		float3 V = normalize(vViewWS);
		float NdotV = abs((dot(N,V))) + 1e-5;


		float3 f0 = params.cSpecular*params.cSpecular;
		float linearRoughness = 1.0 - params.fSmoothness;
		float roughness = linearRoughness * linearRoughness;

		// Light update system only counts lights that affect this object.
		int lightCount = nNumLights; 

		float3 color = float3(0,0,0);

		for(int i=0; i < lightCount; ++i)
		{
			// volume lights will be treated as omni-directional.
			if( SuIsVolume( i ) )
			{
				color += SuComputeVolumeAmbient( vPositionWS, i );
			}
			else
			{
				float3 vLightDirWS, cLightColor;
				SuGetLightLocal( vPositionWS, i,  vLightDirWS, cLightColor);

				float3 L = normalize(vLightDirWS);
				float3 H = normalize( L + V );

				float NdotL = saturate(dot(N,L));
				float NdotH = saturate(dot(N,H));
				float LdotH = saturate(dot(L,H));

				float3 cReflectedLight = fGlobalSpecularScale * vLightParams[i].w * MicrofacetSpec( f0, roughness, NdotL, NdotV, NdotH, LdotH);
				cReflectedLight += vLightParams[i].z * Diffuse(params.cDiffuse, linearRoughness, NdotL, NdotV, NdotH, LdotH );

				int nLightID = nLightIndex[i]; // global ID used for shadows.
				cReflectedLight *= NdotL ;
				cReflectedLight *= ComputeLightShadow( nLightID, vPositionWS );
				cReflectedLight *= cLightColor;
				cReflectedLight *= fLightScale;

				color += max(0,cReflectedLight);
			}
		}

		return color;

	}





EndHLSL

StartHLSL AccumulateHairLight

	float fLightScale;

	float3 AccumulateHairLight(float3 vTangent, float3 vPositionWS, float3 vViewWS, HairShadeParams params, float fExtraAmbientScale = 1)
	{

		// Light update system only counts lights that affect this object.
		int lightCount = nNumLights; 

		float3 color = float3(0,0,0);
        float3 V = normalize(vViewWS);
        float3 T = normalize(vTangent);

		for(int i=0; i < lightCount; ++i)
		{
			// volume lights will be treated as omni-directional.
			if( SuIsVolume( i ) )
			{
				color += SuComputeVolumeAmbient( vPositionWS, i );
			}
			else
			{
				float3 vLightDirWS, cLightColor;
				SuGetLightLocal( vPositionWS, i,  vLightDirWS, cLightColor);

				int nLightID = nLightIndex[i]; // global ID used for shadows.

                // yes, I know this seems weird - but it's basically a way to control
                // spec vs diffuse through the light.
                float lightEmitsDiffuse = vLightParams[i].z;
                float lightEmitsSpecular =  vLightParams[i].w;

				// if we get zero, we can save the BRDF eval, which is costly.
				float fShadowTerm = ComputeLightShadow( nLightID, vPositionWS);

				if(fShadowTerm > 0.00001 )
				{
					float3 L = normalize(vLightDirWS);

                    float3  reflection = TressFX_ComputeDiffuseSpecFactors(V, L, T);

					float3 cReflectedLight = reflection.x * cLightColor * lightEmitsDiffuse * params.cColor;
                    cReflectedLight += reflection.y * cLightColor * lightEmitsSpecular;
                    cReflectedLight += reflection.z * cLightColor * lightEmitsSpecular * params.cColor;
                    cReflectedLight *= fShadowTerm * fLightScale;// * 0.16;

					color += max( float3(0,0,0), cReflectedLight);

				}
			}
		}

		return color;

	}



EndHLSL

