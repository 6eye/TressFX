// ART NOTES ======================================================================================================================

ArtNotes
{
   TressFX Collision compute shader
}

// DEFINES =======================================================================================================================
#define THREAD_GROUP_SIZE 64

// INCLUDES =======================================================================================================================
#include "TressFXSDFCollision.hlsl"
#include "iTressFXBoneSkinning.shl"

//-----------------------
// Collision mesh
//-----------------------

// constant buffer
Matrix g_BoneSkinningMatrix[AMD_TRESSFX_MAX_NUM_BONES] < >
Int g_NumMeshVertices < >

// UAVs
RWStructuredBuffer collMeshVertexPositions < >

// SRVs
StructuredBuffer g_BoneSkinningData < >
StructuredBuffer initialVertexPositions < >

//--------------
// SDF
//--------------
#define INITIAL_DISTANCE 1e10f
#define MARGIN g_CellSize
#define GRID_MARGIN int3(1, 1, 1)

//Matrix g_ModelTransformForHead < >
//Matrix g_ModelInvTransformForHead < >

Vector g_Origin < >
Float g_CellSize < >
Int g_NumCellsX < >
Int g_NumCellsY < >
Int g_NumCellsZ < >

Int g_MaxMarchingCubesVertices < >
Float g_MarchingCubesIsolevel < >

Float g_CollisionMargin < >

Int g_NumHairVerticesPerStrand < >
Int g_NumTotalHairVertices < >
Float pad1 < >
Float pad2 < >
Float pad3 < >


//Actually contains floats; make sure to use asfloat() when accessing. uint is used to allow atomics.
RWStructuredBuffer g_SignedDistanceField < >
RWStructuredBuffer g_Sign < >
RWStructuredBuffer g_HairVertices < >
RWStructuredBuffer g_PrevHairVertices < >
RWStructuredBuffer g_PointsSDFDebugUAV < >

//Triangle input to SDF builder
StructuredBuffer g_TrimeshVertices < >
StructuredBuffer g_TrimeshVertexIndices < >

ComputeTechnique TressFX_BoneSkinning
{
	Pass C0
	{
		ComputeShader( HLSL, EntryPoint="BoneSkinning" )
			$include "TressFXBoneSkinningCS"
		EndComputeShader	
	}
}


ComputeTechnique TressFXSimulation_InitializeSignedDistanceField
{
	Pass C0
	{
		ComputeShader(HLSL, EntryPoint = "InitializeSignedDistanceField")
			$include "TressFXCollisionSDFCS"
		EndComputeShader
	}
}

ComputeTechnique TressFXSimulation_ConstructSignedDistanceField
		{
			Pass C0
		{
			ComputeShader(HLSL, EntryPoint = "ConstructSignedDistanceField")
			$include "TressFXCollisionSDFCS"
			EndComputeShader
		}
		}

ComputeTechnique TressFXSimulation_FinalizeSignedDistanceField
{
	Pass C0
	{
		ComputeShader(HLSL, EntryPoint = "FinalizeSignedDistanceField")
			$include "TressFXCollisionSDFCS"
		EndComputeShader
	}
}

ComputeTechnique TressFXSimulation_CollideHairVerticesWithSdf_forward
{
	Pass C0
	{
		ComputeShader(HLSL, EntryPoint = "CollideHairVerticesWithSdf_forward")
			$include "TressFXCollisionSDFCS"
		EndComputeShader
	}
}

ComputeTechnique TressFXSimulation_CollideHairVerticesWithSdf
{
	Pass C0
	{
		ComputeShader(HLSL, EntryPoint = "CollideHairVerticesWithSdf")
			$include "TressFXCollisionSDFCS"
		EndComputeShader
	}
}


