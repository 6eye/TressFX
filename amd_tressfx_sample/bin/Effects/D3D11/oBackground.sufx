// ART NOTES ======================================================================================================================

ArtNotes
{
    Sky shader. This shader effectively attaches the sky sphere to the camera and
    draws the sphere out at infinity. Make sure that the normals are pointing outwards.
    If the normals point inwards, the sphere will appear to be upside down and backwards.

    Instructions are according to Lys.  

    Prference tab
        miscellaneous panel
            Check "use leagacy DDS Header encoding"
    Main tab
        Specular panel
            Enable
            Set function to GGX
            Power Drop Default
            Check "Use Specular Power"
            Set Spec power to 798
            Mip offset 3
    export tab
       export panel
           Checking "cubemap"
           Seelcting "DDS"
           16_16_16_16F
           Selecting the 3 export map types: 
               Radiance, Irrandiance, and Specular.
       export dimensions panel
           uncheck "toggle global resolution uatomation"
           Cube map section
           radiance: uncheck and set to 2048
           irradiance: uncheck and set to 128
           specular: uncheck and set to 512 
   
   
   Slot                     Description
   ======                   ===============================
   Skydome Cube             Skydome exported from Lys as Radiance 
   Irradiance Cube          Skydome exported from Lys as Irradiance 
   Specular Cube            Skydome exported from Lys as Specular

}

TextureCube tBackground < format = RGBA16F, colorSpace = Linear , 
		source0 = < slot = "color", label = "Skydome Cube", channels = RGB, colorSpace = sRGB > >
TextureCube tIBLCosCube < format = RGBA16F, colorSpace = Linear ,
        source0 = < slot = "irrandianceCube", label = "Irradiance Cube", channels = RGB, colorSpace = sRGB > >
TextureCube tIBLGGXCube < format = RGBA16F, colorSpace = Linear ,
        source0 = < slot = "ggxCube", label = "Specular Cube", channels = RGB, colorSpace = sRGB > >


Sampler sBackground
{
   Filter = MIN_MAG_MIP_LINEAR;
   Texture = tBackground;
   AddressU = WRAP;
   AddressV = WRAP;
}

#include "SuMath.shl"

// PARAMETERS =====================================================================================================================
Matrix mVP < AppUpdate = ViewProjMatrix >
Vector vCameraPositionWS < AppUpdate = CameraPosition >
Float fBackgroundScale < AppUpdate = "ScriptVariable", Name = "fBackgroundScale" >



// STREAMS ========================================================================================================================
// Base mesh stream
Stream s1 < Normal >
{
   float3 Position      Position,
   float3 Normal        Normal
}

StreamMap sm1 { s1 }


// HLSL ===========================================================================================================================

// ================================================================================================================================
// Draw the mech as an opaque mesh   
// ================================================================================================================================
Technique Default
{
   Properties { "Normal", "Sky" }

   Pass P0
   {
		//RenderTargetFormat = SU_FORMAT_R16G16B16A16_FLOAT
		//SampleCount = SU_MSAA

      // Input stream
      StreamMap = sm1

      CullMode = NONE

      VertexShader( HLSL, EntryPoint="VS" )

         $include "Math"

         struct VsInput
         {
            float3 vPosition     : Position;
            float3 vNormal       : Normal;
         };

         struct VsOutput
         {
            float3 vNormal       : Normal;
            float4 vPositionSS   : SV_POSITION;
         };

         float4x4 mVP;
         float3 vCameraPositionWS;
 
         VsOutput VS( VsInput input )
         {
            VsOutput output;

            // We make the sky sphere be a unit sphere around the camera but then use a projection
            // trick to make its depth appear to be at the back of the view frustum.

            float3 vPositionWS = normalize(input.vNormal);         // Gives a unit sphere at the origin. 
            vPositionWS += vCameraPositionWS;                       // Move it to the camera's position
            output.vPositionSS = mul( mVP, float4(vPositionWS,1) ); // Project to screen space
            output.vPositionSS.z = output.vPositionSS.w;            // After the divide by w, vert will be at far end of the frustum

            output.vNormal = input.vNormal;
           
            return output;
         }
      EndVertexShader

      PixelShader( HLSL, EntryPoint="PS" )

         $include "Math"

         struct PsInput
         {
            float3 vNormal       : Normal;
            float4 vPositionSS   : SV_POSITION;
         };

         sampler sBackground;

         TextureCube<float3> tBackground;
		 float fBackgroundScale;
         
         float4 PS( PsInput input ) : SV_TARGET
         {

			// constant normalizes to peak channel.
            float3 vColor = 1.0/2.4 * fBackgroundScale * tBackground.Sample( sBackground, input.vNormal );
            vColor = tBackground.Sample( sBackground, input.vNormal );
            return float4(vColor,1);

         }

      EndPixelShader
   }
}
