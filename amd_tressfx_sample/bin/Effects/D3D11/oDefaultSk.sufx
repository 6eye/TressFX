

//=================================================================================================================================
//
// Author: Karl Hillesland
//         AMD, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/oDefaultSk.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2012 All rights reserved. 
//=================================================================================================================================


// ART NOTES ======================================================================================================================

ArtNotes
{
	There is only one roughness setting for both diffuse and specular (following the model of 
	Burley at Disney, or more specifically the normalized one of Frostbite)

	Best to keep everything in the 0 to 1 range if you can.  

	Max Glossiness sets the maximum glossiness of any bit of the material.  The glossiness texture
	is a scale on that (really, just using red) so if red is 255, then that's where the max glossiness 
	is.

	Min Glossiness sets what a "0" is in the gloss texture.

	Metal color comes from specular reflection, not diffuse.  Non-metal color comes from diffuse reflection.  The 
	specular reflection of non-metals is usually just a reflection of the light color, meaning it should probably
	be a grey-scale specular.

	Summary:
	Metal:  no diffuse (black diffuse texture ) + colored specular 
	Non-Metal:   diffuse + grey-scale specular
}

// INCLUDES =======================================================================================================================

#include "SuMath.shl"
#include "SuGamma.shl"
#define SU_LINEAR_SPACE_LIGHTING
#include "SuLighting.shl"
#include "iBRDF.shl"
//#include "iVrayDiffuse.shl"
#include "iVertexSk.shl"
#include "iShadows.shl"
#include "iShadowedLighting.shl"
#include "iLighting.shl"
#include "iNormalMap.shl"
#include "iUpsampleAO.shl"

// MISC ===========================================================================================================================

// MATERIAL PARAMETERS ===============================================
Float fReflectionScale (1.0) < edit = <ui = slider, min = 0, max = 50, slot = "fReflectionScale", label = "Specular Reflection Scale", animated = false >>
Float fMaxGlossiness (0.9) < edit = <ui = slider, min = 0, max = 1, slot = "Glossiness", label = "Max Glossiness", animated = false >>
Float fMinGlossiness (0.0) < edit = <ui = slider, min = 0, max = 1, slot = "minGlossiness", label = "Min Glossiness", animated = false >>



// GENERAL PARAMETERS ===============================================
Matrix mVP < AppUpdate = ViewProjMatrix >
Matrix mInvP < AppUpdate = ProjMatrixInverse >
Vector vCameraParams < AppUpdate = CameraProjParams > // FOV, Aspect, NearClip, FarClip
Vector vCameraPositionWS < AppUpdate = CameraPosition >
Vector vViewport < AppUpdate = Viewport >



// TEXTURES ================================================
Texture2D tColor    < format = DXT1, colorSpace = sRGB,
                          source0 = < slot = "color", label = "Diffuse Color", channels = RGB, colorSpace = sRGB > >
Texture2D tSpec    < format = DXT1, colorSpace = sRGB,
                          source0 = < slot = "reflectionColor", label = "Reflection Color", channels = RGB, colorSpace = sRGB >  >
Texture2D tGloss    < format = R8, colorSpace = Linear,
						  source0 = < slot = "glossTexture", label = "Gloss Texture", channels = R, colorSpace = Linear, semantic = Gray > >


// SAMPLERS ================================================
Sampler sAniso
{
   Texture = tColor
   Filter = ANISOTROPIC;
   MaxAniso = 16;
   AddressU = WRAP;
   AddressV = WRAP;
}








// HLSL ===========================================================================================================================




// NORMAL *************************************************************************************************************************


Technique Default
{
	Properties { "Normal", "Opaque" }
	
	Pass P0
	{
		//RenderTargetFormat = SU_FORMAT_R16G16B16A16_FLOAT
		//SampleCount = SU_MSAA

		StreamMap = smSkinnedTangentStream
		
		FillMode = SOLID
		
		// Render state
		CullMode = BACK;
		
		// Blend state
		
		VertexShader( HLSL, EntryPoint="VS" )
			$include "VertexSkinnedTangentSpace"
		EndVertexShader
		
		PixelShader( HLSL, EntryPoint="PS" )
		
			Matrix mInvP;
			float3 vCameraPositionWS;
			float4 vCameraParams;
			float4 vViewport;

			$include "Math"
			$include "Gamma"
            $include "OpaqueHairShadow"
			$include "ShadowMap"
			$include "ShadowedLighting"
			$include "SuLighting"
			$include "FrostbiteBRDF"
			$include "AccumulateLight"
			$include "NormalMap"
	        $include "UpsampleAO"
					
			struct PSInput
			{
				float2 vUV         : UV;
				centroid float3 vPositionWS : TEXCOORD0;
				float3 vNormalWS   : TEXCOORD1;
				float3 vTangentWS   : TEXCOORD2;
				float3 vBinormalWS   : TEXCOORD3;
				centroid float3 vCentroidNormalWS : TEXCOORD4;
				float4 vPos          : SV_POSITION;
			}; 

			float fMaxGlossiness;
			float fMinGlossiness;
			Texture2D<float3> tColor;
			Texture2D<float3> tSpec;
			Texture2D<float> tGloss;
			sampler sAniso;
			float fReflectionScale;
		
			float4 PS( PSInput i ) : SV_TARGET
			{
				//// Following code adjusts glossiness for anti-aliasing purposes, so we grab that value here.
				//float fGlossiness = saturate(fMinGlossiness + (fMaxGlossiness-fMinGlossiness)*tGloss.Sample(sAniso,i.vUV).r);
                //
				//// Spec aliasing tips from Alex Vlachos VR rendering talk
				//// Compute a minimum roughness based on local change of normal
				//float3 dxNormal = ddx(i.vNormalWS);
				//float3 dyNormal = ddy(i.vNormalWS);
				//float flGeometricRoughnessFactor = pow( saturate( max( dot( dxNormal.xyz, dxNormal.xyz ), dot(dyNormal.xyz, dyNormal.xyz ) ) ), 0.333 );
				//float adjustedSmoothness = 1.0 - flGeometricRoughnessFactor;
				//adjustedSmoothness = min(adjustedSmoothness, fGlossiness);
				//// Choose the centroid normal if normal length squared is greater than 1.01 (after taking derivatives with center normal)
				//if ( dot( i.vNormalWS.xyz, i.vNormalWS.xyz ) >= 1.01 )
				//{
				//	i.vNormalWS.xyz = i.vCentroidNormalWS.xyz;
				//}
                //
				//float2 vUV_AO = i.vPos.xy/vViewport.zw;
				//float3 fDepth = i.vPos.z;
				//float fLinearDepth = -GetViewSpaceFromUV( vUV_AO, fDepth ).z/(vCameraParams.w-vCameraParams.z);
                //
				//float3 vNormalWS_AO = i.vNormalWS;
                //
				//int2 nPosSS = floor( i.vPos.xy );
				//float fAO = FetchUpsampledAO( nPosSS, vUV_AO, vNormalWS_AO, fLinearDepth );
				//fAO = pow( fAO, 1.5);
				//fAO = min(fAO, 1.0);
                //
				//float2 vUV = i.vUV.xy;
				//float3 vNormalWS = ComputeNormalWS(i.vNormalWS, i.vTangentWS, i.vBinormalWS, vUV);
                //
                //
			   	//BRDFParams params;
				//params.cDiffuse = tColor.Sample( sAniso, vUV );
				//params.fSmoothness = adjustedSmoothness;
				//params.cSpecular = fReflectionScale*tSpec.Sample( sAniso, vUV ).rgb;
                //
				//float3 vFinalColor = AccumulateLightNPV(vNormalWS, i.vPositionWS, vCameraPositionWS - i.vPositionWS, params );
                //
				//// float3 vFinalColor = ComputeLambertLightingNP(vNormalWS, i.vPositionWS);
                //
				//vFinalColor *= fAO;
                //
                ////vFinalColor = float3(1,0,0);
                //
				//return float4( vFinalColor, 1 );

                float roughness = tSpec.Sample(sAniso, i.vUV);
                float mettalic  = tGloss.Sample(sAniso, i.vUV);
                float3 diffuse  = tColor.Sample(sAniso, i.vUV);
                
                float2 vUV = i.vUV.xy;
                float3 normal = ComputeNormalWS(i.vNormalWS, i.vTangentWS, i.vBinormalWS, vUV);
                
                BRDFParams params;
				params.cDiffuse = diffuse;
				params.fSmoothness = roughness;
				params.cSpecular = float3(mettalic,mettalic,mettalic);
                
                float3 viewRay = normalize(vCameraPositionWS - i.vPositionWS);
                
                float3 finalColor = AccumulateLightNPV(normal, i.vPositionWS, viewRay, params, 1);
                
                float2 UV_AO = i.vPos.xy / vViewport.zw;
                float3 depth = i.vPos.z;
                float LinearDepth = (2 * vCameraParams.z) / (vCameraParams.w + vCameraParams.z - depth * (vCameraParams.w - vCameraParams.z));

                int2 PositionSS = floor( i.vPos.xy );
                float AO = FetchUpsampledAO(PositionSS, UV_AO, normal, LinearDepth);
                AO = pow(AO, 1.5);
                AO = min(AO, 1.0);
                
                finalColor *= AO;
                
                return float4(finalColor, 1.0);
			}
		EndPixelShader
	}
}

Technique Normals : Default
{
	Properties { "Normals" }
	
	Pass P0
	{
		RenderTargetFormat = SU_FORMAT_R10G10B10A2_UNORM
        DepthStencilFormat = SU_FORMAT_D32_FLOAT
        
		SampleCount = 1

		StreamMap = smSkinnedTangentStream
		
		FillMode = SOLID
		
		// Render state
		CullMode = BACK;
		
		// Blend state
		
		VertexShader( HLSL, EntryPoint="VS" )
			$include "VertexSkinnedTangentSpace"
		EndVertexShader
		
		PixelShader( HLSL, EntryPoint="PS" )
		
			$include "Math"
			$include "Gamma"
			$include "NormalMap"
					
			struct PSInput
			{
				float2 vUV         : UV;
				centroid float3 vPositionWS : TEXCOORD0;
				float3 vNormalWS   : TEXCOORD1;
				float3 vTangentWS   : TEXCOORD2;
				float3 vBinormalWS   : TEXCOORD3;
				centroid float3 vCentroidNormalWS : TEXCOORD4;
			}; 

			float4 PS( PSInput i ) : SV_TARGET
			{
				// Choose the centroid normal if normal length squared is greater than 1.01
				if ( dot( i.vNormalWS.xyz, i.vNormalWS.xyz ) >= 1.01 )
				{
					i.vNormalWS.xyz = i.vCentroidNormalWS.xyz;
				}
				float2 vUV = i.vUV.xy;
				float3 vNormalWS = i.vNormalWS.xyz; //ComputeNormalWS(i.vNormalWS, i.vTangentWS, i.vBinormalWS, vUV);

				return float4( normalize(vNormalWS)*.5+.5, 1 );			
			}
		EndPixelShader
	}
}


Technique DepthOnly
{
   Properties { "ShadowMap", "DepthOnly" }

   Pass P0
   {
      NumRenderTargets = 0
	  DepthStencilFormat = SU_FORMAT_D32_FLOAT

      // Input stream
      StreamMap = smSkinnedDepthOnly

      // disable color writes
      ColorWriteEnableR = false
      ColorWriteEnableG = false
      ColorWriteEnableB = false
      ColorWriteEnableA = false      

      VertexShader( HLSL, EntryPoint="VS" )
		$include "VertexSkinnedDepth"
      EndVertexShader


      PixelShader( NULL )

   }
}


Technique DepthCopy : DepthOnly
{
   Properties { "ShadowMap", "DepthCopy" }
   Pass P0
   {
      NumRenderTargets = 1
	  RenderTargetFormat = SU_FORMAT_R32_FLOAT
      DepthStencilFormat = SU_FORMAT_D32_FLOAT

      // disable color writes
      ColorWriteEnableR = true
      ColorWriteEnableG = true
      ColorWriteEnableB = true
      ColorWriteEnableA = true     

      PixelShader( HLSL )

			struct PSInput
			{
				float4 vPosition   : SV_POSITION;
			}; 

			float main ( PSInput i ) : SV_TARGET
			{
				return float(i.vPosition.z);
				//return 0.0;
			}

		EndPixelShader
   }
}
