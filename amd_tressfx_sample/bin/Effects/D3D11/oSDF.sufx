//=================================================================================================================================
//
// Author: Karl Hillesland
//         AMD, Inc.
//
//=================================================================================================================================
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2015 All rights reserved. 
//=================================================================================================================================


// ART NOTES ======================================================================================================================

ArtNotes
{
   TressFX Collision Mesh for Signed Distance Field
}


// VARIABLES ===================================================================
Matrix mMW // model-world transform
Matrix mWVP < AppUpdate = ViewProjMatrix >
Vector g_vEye < AppUpdate = CameraPosition >

Vector cColor(0.6, 0.6, 0.6)
Vector vLightDir(1.0, 1.0, 1.0)

StructuredBuffer vertices < >

Stream sPos < Normal >
{
	float3 Position,
    float3 Normal,
}

StreamMap smNothing {  }

Technique MeshUAV
{
	Properties{ "Normal" }
	Pass P0
	{
        DepthStencilFormat = SU_FORMAT_D24_UNORM_S8_UINT

        StreamMap = smNothing

		FillMode = SOLID
		CullMode = NONE
		ZEnable = true
		ZFunc = LESSEQUAL

		VertexShader(HLSL, EntryPoint = "VS")
		float4x4 mMW;
		float4x4 mWVP;

		struct VertexData
		{
			float3 position;
			float3 normal;
		};

		StructuredBuffer<VertexData> vertices;

		struct VsOutput
		{
			float4 vPositionSS : SV_POSITION;
			float3 vPos_ : vPos_;
			float3 vNormal_ : vNormal_;
		};

		VsOutput VS(uint vertexId : SV_VertexID)
		{
			VsOutput output;

			output.vNormal_ = mul(vertices[vertexId].normal.xyz, (float3x3)mMW);
			float4 inputVertexPos = float4(vertices[vertexId].position.xyz, 1.0);

			float4 vPos = mul(mMW, float4(inputVertexPos.xyz, 1.0f));
			output.vPos_ = inputVertexPos.xyz;
			output.vPositionSS = mul(mWVP, vPos);
			return output;
		}
		EndVertexShader

		PixelShader(HLSL, EntryPoint = "PS")

		struct PSInput
		{
			float4 vPositionSS : SV_POSITION;
			float3 vPos_ : vPos_;
			float3 vNormal_ : vNormal_;
		};

		struct PSOutput
		{
			float4 vColor : SV_TARGET;
		};

		float3 cColor;
		float3 vLightDir;
		float3 g_vEye;

		PSOutput PS(PSInput input)
		{
			PSOutput output = (PSOutput)0;
			float4 vDiffuse = float4(cColor.xyz, 1.0);
			float fAmbient = 0.2;
			float3 vLightDir1 = float3(-1., 0., -1.);

			//float fLighting = saturate(dot(normalize(vLightDir), input.vNormal_));
			float fLighting = saturate(dot(normalize(vLightDir), input.vNormal_)) + 0.7*saturate(dot(normalize(vLightDir1), input.vNormal_));
			fLighting = max(fLighting, fAmbient);

			output.vColor = vDiffuse * fLighting;
			return output;
		}
		EndPixelShader
	}
}
