//=================================================================================================================================
//
// Author: Karl Hillesland
//         AMD, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/oDiffuseSk.sufx#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2012 All rights reserved. 
//=================================================================================================================================


// ART NOTES ======================================================================================================================

ArtNotes
{
    Diffuse scenerary (like Lambert)
}

// INCLUDES =======================================================================================================================

#include "SuMath.shl"
#define SU_LINEAR_SPACE_LIGHTING
#include "SuLighting.shl"
#include "iBRDF.shl"
#include "SuGamma.shl"
//#include "iVrayDiffuse.shl"
#include "iVertexSk.shl"
#include "iShadows.shl"
#include "iShadowedLighting.shl"
#include "iLighting.shl"
#include "iNormalMap.shl"
#include "iUpsampleAO.shl"

// MISC ===========================================================================================================================

// MATERIAL PARAMETERS ===============================================


// TEXTURES ================================================
Texture2D tColor    < format = DXT1, colorSpace = sRGB,
                          source0 = < slot = "color", label = "Diffuse Color", channels = RGB, colorSpace = sRGB > >



// SAMPLERS ================================================
Sampler sDiffuse
{
   Texture = tColor
   Filter = ANISOTROPIC;
   MaxAniso = 16;
   AddressU = WRAP;
   AddressV = WRAP;
}



// GENERAL PARAMETERS =====================================================================================================================
Matrix mVP < AppUpdate = ViewProjMatrix >
Matrix mInvP < AppUpdate = ProjMatrixInverse >
Vector vCameraParams < AppUpdate = CameraProjParams > // FOV, Aspect, NearClip, FarClip
Vector vCameraPositionWS < AppUpdate = CameraPosition >
Vector vViewport < AppUpdate = Viewport >

// HLSL ===========================================================================================================================





// NORMAL *************************************************************************************************************************

Technique Default
{
	Properties { "Normal", "Opaque" }
	
	Pass P0
	{
		//RenderTargetFormat = SU_FORMAT_R16G16B16A16_FLOAT
		//SampleCount = SU_MSAA

		StreamMap = smSkinnedTangentStream
		
		FillMode = SOLID
		
		// Render state
		CullMode = BACK;
		
		// Blend state
		
		VertexShader( HLSL, EntryPoint="VS" )
			$include "VertexSkinnedTangentSpace"
		EndVertexShader
		
		PixelShader( HLSL, EntryPoint="PS" )
		
			Matrix mInvP;
			float3 vCameraPositionWS;
			float4 vCameraParams;
			float4 vViewport;

			Texture2D<float3> tColor;
			sampler sDiffuse;

			$include "Math"
			$include "Gamma"
            $include "OpaqueHairShadow"
			$include "ShadowMap"
			$include "ShadowedLighting"
			$include "SuLighting"
			$include "FrostbiteBRDF"
			$include "AccumulateLight"
			$include "NormalMap"
	        $include "UpsampleAO"
					
			struct PSInput
			{
				float2 vUV         : UV;
				centroid float3 vPositionWS : TEXCOORD0;
				float3 vNormalWS   : TEXCOORD1;
				float3 vTangentWS   : TEXCOORD2;
				float3 vBinormalWS   : TEXCOORD3;
				centroid float3 vCentroidNormalWS : TEXCOORD4;
				float4 vPos          : SV_POSITION;
			}; 

			float4 PS( PSInput i ) : SV_TARGET
			{
				// Choose the centroid normal if normal length squared is greater than 1.01 (after taking derivatives with center normal)
				if ( dot( i.vNormalWS.xyz, i.vNormalWS.xyz ) >= 1.01 )
				{
					i.vNormalWS.xyz = i.vCentroidNormalWS.xyz;
				}

				float2 vUV_AO = i.vPos.xy/vViewport.zw;
				float3 fDepth = i.vPos.z;
				float fLinearDepth = -GetViewSpaceFromUV( vUV_AO, fDepth ).z/(vCameraParams.w-vCameraParams.z);

				float3 vNormalWS_AO = i.vNormalWS;

				int2 nPosSS = floor( i.vPos.xy );
				float fAO = FetchUpsampledAO( nPosSS, vUV_AO, vNormalWS_AO, fLinearDepth );
				fAO = pow( fAO, 1.5);
				fAO = min(fAO, 1.0);
				
				float2 vUV = i.vUV.xy;
				float3 vNormalWS = ComputeNormalWS(i.vNormalWS, i.vTangentWS, i.vBinormalWS, vUV);


			   	BRDFParams params;
				params.cDiffuse = tColor.Sample( sDiffuse, vUV );
				params.fSmoothness = 1;
				params.cSpecular = float3(0,0,0);

				float3 vFinalColor = AccumulateLightNPV(vNormalWS, i.vPositionWS, vCameraPositionWS - i.vPositionWS, params );

				// float3 vFinalColor = ComputeLambertLightingNP(vNormalWS, i.vPositionWS);
				//vFinalColor += GetIBL(vNormalWS) * tColor.Sample( sDiffuse, vUV );
			
				vFinalColor *= fAO;
                //vFinalColor = float3(1,0,0);

				return float4( vFinalColor, 1 );
			
			}
		EndPixelShader
	}
}


Technique Normals : Default
{
	Properties { "Normals" }
	
	Pass P0
	{
		RenderTargetFormat = SU_FORMAT_R10G10B10A2_UNORM
        DepthStencilFormat = SU_FORMAT_D32_FLOAT
		SampleCount = 1

		VertexShader( HLSL, EntryPoint="VS" )
			$include "VertexSkinnedTangentSpace"
		EndVertexShader
		
		PixelShader( HLSL, EntryPoint="PS" )
		
			$include "Math"
			$include "Gamma"
			$include "NormalMap"
					
			struct PSInput
			{
				float2 vUV         : UV;
				centroid float3 vPositionWS : TEXCOORD0;
				float3 vNormalWS   : TEXCOORD1;
				float3 vTangentWS   : TEXCOORD2;
				float3 vBinormalWS   : TEXCOORD3;
			}; 

			float3 vCameraPositionWS;
		
			float4 PS( PSInput i ) : SV_TARGET
			{
				float2 vUV = i.vUV.xy;
				float3 vNormalWS = ComputeNormalWS(i.vNormalWS, i.vTangentWS, i.vBinormalWS, vUV);
				
				return float4( normalize(i.vNormalWS)*.5+.5, 1 );
			}
		EndPixelShader
	}
}

Technique DepthOnly
{
   Properties { "ShadowMap" }

   Pass P0
   {
      NumRenderTargets = 0
	  DepthStencilFormat = SU_FORMAT_D32_FLOAT

      // Input stream
      StreamMap = smSkinnedDepthOnly

      // disable color writes
      ColorWriteEnableR = false
      ColorWriteEnableG = false
      ColorWriteEnableB = false
      ColorWriteEnableA = false      

      VertexShader( HLSL, EntryPoint="VS" )
		$include "VertexSkinnedDepth"
      EndVertexShader


      PixelShader( NULL )

   }
}


Technique DepthCopy : DepthOnly
{
   Properties { "ShadowMap", "DepthCopy" }
   Pass P0
   {
      NumRenderTargets = 1
	  RenderTargetFormat = SU_FORMAT_R32_FLOAT
      DepthStencilFormat = SU_FORMAT_D32_FLOAT

      // disable color writes
      ColorWriteEnableR = true
      ColorWriteEnableG = true
      ColorWriteEnableB = true
      ColorWriteEnableA = true     

      PixelShader( HLSL )

			struct PSInput
			{
				float4 vPosition   : SV_POSITION;
			}; 

			float main ( PSInput i ) : SV_TARGET
			{
				return float(i.vPosition.z);
				//return 0.0;
			}

		EndPixelShader
   }
}
