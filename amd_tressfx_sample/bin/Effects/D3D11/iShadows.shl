//=================================================================================================================================
//
// Authors: Christopher Oat, Saif Ali and Karl Hillesland
//         AMD, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/iShadows.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2008 All rights reserved. 
//=================================================================================================================================

#define SM_CONST_BIAS 0.000025

// INCLUDES =======================================================================================================================
#include "SuMath.shl"

// MISC ===========================================================================================================================

// TEXTURES =======================================================================================================================
Texture2DArray tShadowMap < BindRT = "ShadowMap" >

Sampler sComparisonPCF 
{
   Texture = tShadowMap
   Filter = COMPARISON_MIN_MAG_MIP_LINEAR
   ComparisonFunc = LESS
   AddressU = BORDER
   AddressV = BORDER
   BorderColor = (0, 0, 0, 0)
}

Sampler sComparison 
{
   Texture = tShadowMap
   Filter = COMPARISON_MIN_MAG_MIP_POINT
   ComparisonFunc = LESS
   AddressU = BORDER
   AddressV = BORDER
   BorderColor = (0, 0, 0, 0)
}


Sampler sPointBorder
{
  Texture = tShadowMap
   Filter = MIN_MAG_MIP_POINT;
   AddressU = BORDER
   AddressV = BORDER
   BorderColor = (1, 1, 1, 1)
}


// PARAMETERS =====================================================================================================================
Matrix mShadowVPT <AppUpdate = "ScriptVariable", Name = "Shadow_VP_Matrix" >
Vector vShadowMapDimensions < AppUpdate = ResourceDimensions, Slot = tShadowMap >  
Bool bEnableShadow < AppUpdate = "ScriptVariable", Name = "bShadowsEnable" >  

StructuredBuffer ShadowMatrices < BindRT = "ShadowMatrices" >
StructuredBuffer ShadowParams < BindRT = "ShadowParams" >

StartHLSL "OpaqueHairShadow"

float ComputeHairShadowAttenuation(float fDepthDistanceWS)
{
    return fDepthDistanceWS > SM_CONST_BIAS ? 0 : 1;
}


EndHLSL


// HLSL ===========================================================================================================================
StartHLSL "ShadowMap"

   Texture2DArray<float> tShadowMap;
   SamplerComparisonState sComparison;
   SamplerComparisonState sComparisonPCF;

   sampler sPointBorder;

   StructuredBuffer<float4x4> ShadowMatrices;
   StructuredBuffer<float4> ShadowParams;
   
   float4x4  mShadowVPT;
   float4 vShadowMapDimensions;

   bool bEnableShadow;

   #define BRIGHT_OUTSIDE_FRUSTUM 1

   bool FrustumCheck(float3 vPositionSM)
   {
   #if BRIGHT_OUTSIDE_FRUSTUM
		if ( max(vPositionSM.x,vPositionSM.y) > 1. ) { return false; }
		if ( min(vPositionSM.x,vPositionSM.y) < 0. ) { return false; }
		if ( vPositionSM.z > 1. ) return false;
		if ( vPositionSM.z < 0. ) return false;
   #endif
		return true;
   }

   //=================================================================
   //=================================================================
   float3 ComputeShadowUV ( float3 vPositionWS, int nSMIndex = 0 )
   {
      // Project position into shadow map
      //float4 vPositionSM = mul( mShadowVPT, float4( vPositionWS, 1 ) );
      float4 vPositionSM = mul( ShadowMatrices[nSMIndex], float4( vPositionWS, 1 ) );
      return vPositionSM.xyz / vPositionSM.www;
   }


   //=================================================================
   // Single tap comparison
   //=================================================================
   float ComputeShadow ( float3 vPositionWS, float nSMIndex = 0 )
   {
      float3 vPositionSM = ComputeShadowUV( vPositionWS, nSMIndex );

     // if ( max(vPositionSM.x,vPositionSM.y) > 1. ) { return 0; }
      //if ( min(vPositionSM.x,vPositionSM.y) < 0. ) { return 0; }

      float fShadow = tShadowMap.SampleCmpLevelZero( sComparison, float3(vPositionSM.xy,nSMIndex), vPositionSM.z - SM_CONST_BIAS );
      return fShadow;
   }

   //=================================================================
   // Single tap comparison
   //=================================================================
   float ComputeShadow ( float2 vUV, float fDepth, float nSMIndex = 0 )
   {
      float fShadow = tShadowMap.SampleCmpLevelZero( sComparison, float3(vUV,nSMIndex), fDepth- SM_CONST_BIAS );
      return fShadow;
   }

   //=================================================================
   // 2x2 PCF. 5 shades of gray.
   //=================================================================
   float ComputeShadowPCF ( float3 vPositionWS, float nSMIndex = 0 )
   {
      float3 vPositionSM = ComputeShadowUV( vPositionWS, nSMIndex );

      if (! FrustumCheck(vPositionSM)) return 1.0;

      float fShadow = tShadowMap.SampleCmpLevelZero( sComparisonPCF, float3(vPositionSM.xy,nSMIndex), vPositionSM.z - SM_CONST_BIAS );
      return fShadow;
   }

   //=================================================================
   // Shadow map sampling with 28 tap poisson kernel (each Poisson tap 
   // is a 2x2 PCF kernel). This gives 140 shades of gray.
   //=================================================================
   float ComputeShadowPoisson ( float3 vPositionWS, float fRadius = 5.0, float nSMIndex = 0 )
   {
      const float2 vPoisson[27] = { float2(-0.525820f, -0.127704f),
                                    float2( 0.595566f,  0.784995f),
                                    float2(-0.374618f, -0.460896f),
                                    float2( 0.646400f,  0.436244f),
                                    float2(-0.001001f,  0.271255f),
                                    float2( 0.943513f, -0.289188f),
                                    float2(-0.272002f,  0.515921f),
                                    float2(-0.952234f, -0.078234f),
                                    float2(-0.758021f,  0.217861f),
                                    float2( 0.073475f, -0.554726f),
                                    float2(-0.621979f, -0.768835f),
                                    float2( 0.268312f,  0.538478f),
                                    float2( 0.412263f,  0.171512f),
                                    float2(-0.148248f,  0.979633f),
                                    float2(-0.726008f,  0.630549f),
                                    float2( 0.212817f, -0.188554f),
                                    float2(-0.279090f, -0.893269f),
                                    float2( 0.114498f, -0.973203f),
                                    float2( 0.518764f, -0.453969f),
                                    float2( 0.728637f, -0.027399f),
                                    float2(-0.164580f, -0.109996f),
                                    float2( 0.206435f,  0.970726f),
                                    float2(-0.779092f, -0.445420f),
                                    float2( 0.416586f, -0.806773f),
                                    float2( 0.950401f,  0.277201f),
                                    float2(-0.341163f,  0.182236f),
                                    float2(-0.471442f,  0.867417f)  };

      float3 vPositionSM = ComputeShadowUV( vPositionWS, nSMIndex );
      if (! FrustumCheck(vPositionSM)) return 1.0;

      float2 vTexelSize = 1.0/vShadowMapDimensions.xy;
      float fShadow = tShadowMap.SampleCmpLevelZero( sComparisonPCF, float3(vPositionSM.xy, nSMIndex), vPositionSM.z - SM_CONST_BIAS );

      [unroll] for ( int nIndex = 0; nIndex < 27; nIndex++ )
      {
         fShadow += tShadowMap.SampleCmpLevelZero( sComparisonPCF, float3(vPositionSM.xy + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ), nSMIndex), vPositionSM.z - SM_CONST_BIAS );
      }

      return fShadow/28.0;
   }

   //=================================================================
   // Shadow map sampling with 28 tap poisson kernel (each Poisson tap 
   // is a 2x2 PCF kernel). This gives 140 shades of gray.
   //=================================================================
   float ComputeShadowPoisson10 ( float3 vPositionWS, float fRadius = 5.0, float nSMIndex = 0 )
   {
		const float2 vPoisson[10] = { 
			float2((0.079928-0.5)*2,       (0.995178-0.5)*2),
			float2((0.120334-0.5)*2,       (0.710807-0.5)*2),
			float2((0.186102-0.5)*2,       (0.400647-0.5)*2),
			float2((0.386639-0.5)*2,       (0.992065-0.5)*2),
			float2((0.448134-0.5)*2,       (0.469771-0.5)*2),
			float2((0.620014-0.5)*2,       (0.666311-0.5)*2),
			float2((0.719260-0.5)*2,       (0.385296-0.5)*2),
			float2((0.720695-0.5)*2,       (0.990722-0.5)*2),
			float2((0.888516-0.5)*2,       (0.187658-0.5)*2),
			float2((0.890286-0.5)*2,       (0.591052-0.5)*2) };

      float3 vPositionSM = ComputeShadowUV( vPositionWS, nSMIndex );
      if (! FrustumCheck(vPositionSM)) return 1.0;

      float2 vTexelSize = 1.0/vShadowMapDimensions.xy;
      float fShadow = tShadowMap.SampleCmpLevelZero( sComparisonPCF, float3(vPositionSM.xy, nSMIndex), vPositionSM.z - SM_CONST_BIAS );
	  //float fShadow = 0;

      [unroll] for ( int nIndex = 0; nIndex < 10; nIndex++ )
      {
         fShadow += tShadowMap.SampleCmpLevelZero( sComparisonPCF, float3(vPositionSM.xy + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ), nSMIndex), vPositionSM.z - SM_CONST_BIAS );
      }

      return fShadow/11.0;
   }



   float GetWSDepth_D3D(float depthNDC, float fNear, float fFar)
   {
        return fNear*fFar / (fFar - depthNDC*(fFar-fNear));
   }


      //=================================================================
   // Shadow map sampling with 28 tap poisson kernel (each Poisson tap 
   // is a 2x2 PCF kernel). This gives 140 shades of gray.
   //=================================================================
   float ComputeShadowHair ( float3 vPositionWS, float fRadius, float nSMIndex )
   {
		const float2 vPoisson[11] = { 
			float2(0, 0),
			float2((0.079928-0.5)*2,       (0.995178-0.5)*2),
			float2((0.120334-0.5)*2,       (0.710807-0.5)*2),
			float2((0.186102-0.5)*2,       (0.400647-0.5)*2),
			float2((0.386639-0.5)*2,       (0.992065-0.5)*2),
			float2((0.448134-0.5)*2,       (0.469771-0.5)*2),
			float2((0.620014-0.5)*2,       (0.666311-0.5)*2),
			float2((0.719260-0.5)*2,       (0.385296-0.5)*2),
			float2((0.720695-0.5)*2,       (0.990722-0.5)*2),
			float2((0.888516-0.5)*2,       (0.187658-0.5)*2),
			float2((0.890286-0.5)*2,       (0.591052-0.5)*2) };

        float3 vPositionSM = ComputeShadowUV( vPositionWS, nSMIndex );
        if (! FrustumCheck(vPositionSM)) return 1.0;

        float2 vTexelSize = 1.0/vShadowMapDimensions.xy;

        float fNear = ShadowParams[int(nSMIndex)].z;
        float fFar = ShadowParams[int(nSMIndex)].w;
        float fDepthFragment = GetWSDepth_D3D( vPositionSM.z, fNear, fFar);


        float fShadow = 0;

        float fTotalWeight = 0;

        for(int iSample = 0; iSample < 11; ++iSample)
        {

            float fWeight = 1.0;

            float fDepthSM_NDC = tShadowMap.SampleLevel(sPointBorder, float3(vPositionSM.xy + ( vTexelSize * vPoisson[iSample] * fRadius.xx ), nSMIndex), 0);
            float fDepthSM = GetWSDepth_D3D(fDepthSM_NDC, fNear, fFar);
            float fDeltaDepth = max(0, fDepthFragment - fDepthSM);

            fShadow += ComputeHairShadowAttenuation(fDeltaDepth)*fWeight;

            fTotalWeight += fWeight;
       }
       return fShadow/fTotalWeight;

   }




   	float ComputeIndexedShadow( float3 vPositionWS, float nSMIndex = 0 )
	{
		if( !bEnableShadow )
			return 1;

		float2 vShadowParams = ShadowParams[int(nSMIndex)].xy;

		float fRadius = vShadowParams.x;
		bool bIsHair = vShadowParams.y > 0;


		if (bIsHair)
			return ComputeShadowHair(vPositionWS, fRadius, nSMIndex);
		else
			return ComputeShadowPoisson10(vPositionWS, fRadius, nSMIndex);
			//return ComputeShadowPCF(vPositionWS, nSMIndex);
   }





EndHLSL

StartHLSL "ShadowDebugPixelShader"

   $include "Math"

   struct PSInput
   {
      float4 vPosition   : SV_POSITION;
   }; 

   float4 main ( PSInput i ) : SV_TARGET
   {
      return float4(1,0,i.vPosition.z,1.0);
   }

EndHLSL



