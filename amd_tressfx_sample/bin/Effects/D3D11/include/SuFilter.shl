//=================================================================================================================================
//
// Author: Joshua Barczak
//         3D Application Research Group
//         ATI Research, Inc.
//
// Image filtering shader include, from Sushi2
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/include/SuFilter.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

#ifndef SU_LOOP_UNROLL
#define SU_LOOP_UNROLL
#endif

#include "SuMath.shl"

//=============================================================================
// Misc image filtering functions
//=============================================================================
StartHLSL "Filter"

// Needed for SuPow()
$include "Math"


//=============================================================================
// sampler tSource = source texture being filtered.  *MUST* have LINEAR 
//                   TEXTURE FILTERING *ENABLED*.
//
// float2 texCoord = texture coordinate for destination texel.  this is
//                   where you will be writing to in the downsampled texture.
//
// float2 pixelSizeSource = size of a texel in the source image.  usually
//                          this will be a vector like: <1/width, 1/height>
//
// This function performs a 1/4 x 1/4 downsample by doing a box filter
// 
// +---+---+---+---+  This represents the destination texel.  The 16 sub-quads
// |   |   |   |   |  represent the source texels and are pixelSizeSource.x wide
// +---O---+---O---+  and pixelSizeSource.y tall.
// |   |   |   |   |  
// +---+---X---+---+  X = texCoordDest (the center of the destination texel)
// |   |   |   |   |  0 = samples taken from tSource 
// +---0---+---0---+    (offset from X by pixelSizeSource)
// |   |   |   |   |  
// +---+---+---+---+  
//                    
// After linear filtering, the kernel looks like this:
// +----+----+----+----+
// |1/16|1/16|1/16|1/16|
// |    |    |    |    |
// +----+----+----+----+
// |1/16|1/16|1/16|1/16|
// |    |    |    |    |
// +----+----+----+----+
// |1/16|1/16|1/16|1/16|
// |    |    |    |    |
// +----+----+----+----+
// |1/16|1/16|1/16|1/16|
// |    |    |    |    |
// +----+----+----+----+

//=============================================================================
float3 SuBoxFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV )
{
   float3 cOut;

   cOut  = tTexture.Sample( sSampler, vUV, int2( 1, 1) );
   cOut += tTexture.Sample( sSampler, vUV, int2(-1, 1) );
   cOut += tTexture.Sample( sSampler, vUV, int2( 1,-1) );
   cOut += tTexture.Sample( sSampler, vUV, int2(-1,-1) );
   cOut *= 0.25;

   return cOut;
}

float4 SuBoxFilter ( Texture2D<float4> tTexture, sampler sSampler, float2 vUV )
{
   float4 cOut;

   cOut  = tTexture.Sample( sSampler, vUV, int2( 1, 1) );
   cOut += tTexture.Sample( sSampler, vUV, int2(-1, 1) );
   cOut += tTexture.Sample( sSampler, vUV, int2( 1,-1) );
   cOut += tTexture.Sample( sSampler, vUV, int2(-1,-1) );
   cOut *= 0.25;

   return cOut;
}

float3 SuBoxFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float fLevel )
{
   float3 cOut;

   cOut  = tTexture.SampleLevel( sSampler, vUV, fLevel, int2( 1, 1) );
   cOut += tTexture.SampleLevel( sSampler, vUV, fLevel, int2(-1, 1) );
   cOut += tTexture.SampleLevel( sSampler, vUV, fLevel, int2( 1,-1) );
   cOut += tTexture.SampleLevel( sSampler, vUV, fLevel, int2(-1,-1) );
   cOut *= 0.25;

   return cOut;
}

float4 SuBoxFilter ( Texture2D<float4> tTexture, sampler sSampler, float2 vUV, float fLevel )
{
   float4 cOut;

   cOut  = tTexture.SampleLevel( sSampler, vUV, fLevel, int2( 1, 1) );
   cOut += tTexture.SampleLevel( sSampler, vUV, fLevel, int2(-1, 1) );
   cOut += tTexture.SampleLevel( sSampler, vUV, fLevel, int2( 1,-1) );
   cOut += tTexture.SampleLevel( sSampler, vUV, fLevel, int2(-1,-1) );
   cOut *= 0.25;

   return cOut;
}

//=============================================================================
// 15x15 Separable Gaussian Blur
// 
// SiHGaussianFilterRGB() = horizontal step
// SiVGaussianFilterRGB() = verticle step
// 
// tTexture = source texture being filtered.
//
// vUV = texture coordinate for destination texel.
//
// These functions perform a (separable) gaussian blur filter.  These functions 
// will generally be used together to ping-pong between two render targets.
// For example, you may first call SiHGaussianFilter to perform a horizontal
// gaussian blur and store the results in a render target.  The perform the verticle
// blur (SiVGaussianFilter) on the previous results to obtain a 15x15 gaussian
// blur.
// 
// See //depot/3darg/Research/Blurs/BlurAnalysis.xls for a full analysis of this
// blur kernel after consecutive iterations.
//=============================================================================
float3 SuHGaussianFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV )
{
   float3 cOut = 0;
   const float kernel[15] = {0.050f, 0.055f, 0.060f, 0.065f, 0.070f, 0.075f, 0.080f, 0.100f, 0.080f, 0.075f, 0.070f, 0.065f, 0.060f, 0.055f, 0.050f};
   
   SU_LOOP_UNROLL
   for ( int x = 0; x < 15; x++ )
   {
      cOut += kernel[x] * tTexture.Sample( sSampler, vUV, int2(x-7,0) );
   }
   
   return cOut;
}

float3 SuVGaussianFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV )
{
   float3 cOut = 0;
   const float kernel[15] = {0.050f, 0.055f, 0.060f, 0.065f, 0.070f, 0.075f, 0.080f, 0.100f, 0.080f, 0.075f, 0.070f, 0.065f, 0.060f, 0.055f, 0.050f};
   
   SU_LOOP_UNROLL
   for ( int y = 0; y < 15; y++ )
   {
      cOut += kernel[y] * tTexture.Sample( sSampler, vUV, int2(0,y-7) );
   }
   
   return cOut;
}

//=============================================================================
// Growable Poisson Disc Filter (28 tap)
// 
// sampler tTexture = source texture being filtered.
//
// float2 vUV = texture coordinate for destination texel.
//
// float fRadius = size to grow circle of confusion (0 will only sample from 
//                 texel at texCoordDest, 1.0 will sample from up to a pixel
//                 away in any direction, etc).
//
// to generate new sample points, check out the code checked in to:
// //depot/3darg/research/blurs/kernelcalc/
//=============================================================================
float3 SuGrowablePoissonDiscFilter28 ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float fRadius )
{
   const float2 vPoisson[27] = { float2(-0.525820f, -0.127704f),
                                 float2( 0.595566f,  0.784995f),
                                 float2(-0.374618f, -0.460896f),
                                 float2( 0.646400f,  0.436244f),
                                 float2(-0.001001f,  0.271255f),
                                 float2( 0.943513f, -0.289188f),
                                 float2(-0.272002f,  0.515921f),
                                 float2(-0.952234f, -0.078234f),
                                 float2(-0.758021f,  0.217861f),
                                 float2( 0.073475f, -0.554726f),
                                 float2(-0.621979f, -0.768835f),
                                 float2( 0.268312f,  0.538478f),
                                 float2( 0.412263f,  0.171512f),
                                 float2(-0.148248f,  0.979633f),
                                 float2(-0.726008f,  0.630549f),
                                 float2( 0.212817f, -0.188554f),
                                 float2(-0.279090f, -0.893269f),
                                 float2( 0.114498f, -0.973203f),
                                 float2( 0.518764f, -0.453969f),
                                 float2( 0.728637f, -0.027399f),
                                 float2(-0.164580f, -0.109996f),
                                 float2( 0.206435f,  0.970726f),
                                 float2(-0.779092f, -0.445420f),
                                 float2( 0.416586f, -0.806773f),
                                 float2( 0.950401f,  0.277201f),
                                 float2(-0.341163f,  0.182236f),
                                 float2(-0.471442f,  0.867417f)  };


   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
                         
   // center tap
   float3 cOut = tTexture.Sample( sSampler, vUV );

   SU_LOOP_UNROLL
   for ( int nIndex = 0; nIndex < 27; nIndex++ )
   {
      cOut += tTexture.Sample( sSampler, vUV + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ) );
   }

   return (cOut / 28.0f);
}

float4 SuGrowablePoissonDiscFilter28 ( Texture2D<float4> tTexture, sampler sSampler, float2 vUV, float fRadius )
{
   const float2 vPoisson[27] = { float2(-0.525820f, -0.127704f),
                                 float2( 0.595566f,  0.784995f),
                                 float2(-0.374618f, -0.460896f),
                                 float2( 0.646400f,  0.436244f),
                                 float2(-0.001001f,  0.271255f),
                                 float2( 0.943513f, -0.289188f),
                                 float2(-0.272002f,  0.515921f),
                                 float2(-0.952234f, -0.078234f),
                                 float2(-0.758021f,  0.217861f),
                                 float2( 0.073475f, -0.554726f),
                                 float2(-0.621979f, -0.768835f),
                                 float2( 0.268312f,  0.538478f),
                                 float2( 0.412263f,  0.171512f),
                                 float2(-0.148248f,  0.979633f),
                                 float2(-0.726008f,  0.630549f),
                                 float2( 0.212817f, -0.188554f),
                                 float2(-0.279090f, -0.893269f),
                                 float2( 0.114498f, -0.973203f),
                                 float2( 0.518764f, -0.453969f),
                                 float2( 0.728637f, -0.027399f),
                                 float2(-0.164580f, -0.109996f),
                                 float2( 0.206435f,  0.970726f),
                                 float2(-0.779092f, -0.445420f),
                                 float2( 0.416586f, -0.806773f),
                                 float2( 0.950401f,  0.277201f),
                                 float2(-0.341163f,  0.182236f),
                                 float2(-0.471442f,  0.867417f)  };


   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
                         
   // center tap
   float4 cOut = tTexture.Sample( sSampler, vUV );

   SU_LOOP_UNROLL
   for ( int nIndex = 0; nIndex < 27; nIndex++ )
   {
      cOut += tTexture.Sample( sSampler, vUV + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ) );
   }

   return (cOut / 28.0f);
}


float3 SuGrowablePoissonDiscFilter13 ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float fRadius )
{

   const float2 vPoisson[12] = { float2( -0.853882f, -0.092128f ),
                                 float2( -0.659043f, -0.720903f ),
                                 float2(  0.003400f,  0.854395f ),
                                 float2( -0.214935f, -0.344609f ),
                                 float2(  0.789979f,  0.416830f ),
                                 float2(  0.663741f, -0.747493f ),
                                 float2(  0.195950f,  0.288584f ),
                                 float2(  0.898129f, -0.165266f ),
                                 float2( -0.730501f,  0.664290f ),
                                 float2(  0.061460f, -0.985695f ),
                                 float2(  0.332153f, -0.267630f ),
                                 float2( -0.385891f,  0.203473f ) };
  

   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
                         
   // center tap
   float3 cOut = tTexture.Sample( sSampler, vUV );

   SU_LOOP_UNROLL
   for ( int nIndex = 0; nIndex < 12; nIndex++ )
   {
      cOut += tTexture.Sample( sSampler, vUV + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ) );
   }

   return (cOut / 13.0f);
}

float4 SuGrowablePoissonDiscFilter13 ( Texture2D<float4> tTexture, sampler sSampler, float2 vUV, float fRadius )
{
   const float2 vPoisson[12] = { float2( -0.853882f, -0.092128f ),
                                 float2( -0.659043f, -0.720903f ),
                                 float2(  0.003400f,  0.854395f ),
                                 float2( -0.214935f, -0.344609f ),
                                 float2(  0.789979f,  0.416830f ),
                                 float2(  0.663741f, -0.747493f ),
                                 float2(  0.195950f,  0.288584f ),
                                 float2(  0.898129f, -0.165266f ),
                                 float2( -0.730501f,  0.664290f ),
                                 float2(  0.061460f, -0.985695f ),
                                 float2(  0.332153f, -0.267630f ),
                                 float2( -0.385891f,  0.203473f ) };
   

   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
                         
   // center tap
   float4 cOut = tTexture.Sample( sSampler, vUV );

   SU_LOOP_UNROLL
   for ( int nIndex = 0; nIndex < 12; nIndex++ )
   {
      cOut += tTexture.Sample( sSampler, vUV + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ) );
   }

   return (cOut / 13.0f);
}

float3 SuGrowablePoissonDiscFilter5 ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float fRadius )
{
   const float2 vPoisson[4] = { float2(-0.615914f, 0.5137f),
                                float2(0.47234f, 0.4983f),
                                float2(-0.49642f, -0.458f),
                                float2(0.539f, -0.5771f) };

   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
                         
   // center tap
   float3 cOut = tTexture.Sample( sSampler, vUV );

   SU_LOOP_UNROLL
   for ( int nIndex = 0; nIndex < 4; nIndex++ )
   {
      cOut += tTexture.Sample( sSampler, vUV + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ) );
   }

   return (cOut / 5.0f);
}

float4 SuGrowablePoissonDiscFilter5 ( Texture2D<float4> tTexture, sampler sSampler, float2 vUV, float fRadius )
{
   const float2 vPoisson[4] = { float2(-0.615914f, 0.5137f),
                                float2(0.47234f, 0.4983f),
                                float2(-0.49642f, -0.458f),
                                float2(0.539f, -0.5771f) };

   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
                         
   // center tap
   float4 cOut = tTexture.Sample( sSampler, vUV );

   SU_LOOP_UNROLL
   for ( int nIndex = 0; nIndex < 4; nIndex++ )
   {
      cOut += tTexture.Sample( sSampler, vUV + ( vTexelSize * vPoisson[nIndex] * fRadius.xx ) );
   }

   return (cOut / 5.0f);
}

//=============================================================================
// sampler tSource = source texture being filtered.  *MUST* have LINEAR 
//                   TEXTURE FILTERING *ENABLED*.
//
// float2 texCoord = texture coordinate for destination texel.
//
// int iteration = 0 based iteration count ( ie. range [0, +infinity) )
//                   for every iteration, the samples move one diagonal pixel
//                   length away from texCoordDest
//
// This function performs a bloom (aka blur) filter.  This function will generally
// be used to ping-pong between two render targets while incrementing the interation
// variable each time.  For the first call, iteration is 0 and increases by 1 for
// every "ping" or "pong"
// 
// 1---+---+---1  This represents the destination texel and it's 3x3
// |   |   |   |  neighborhood.  Each texel is pixelSize.x wide and
// +---0---0---+  pixelSize.y tall.
// |   | X |   |  
// +---0---0---+  X = texCoord (the center of the destination texel)
// |   |   |   |  0 = samples taken from tSource during first iteration (ie. iteration = 0)
// 1---+---+---1  1 = samples taken from tSource during the second iteration (ie. iteration = 1)
//                    
// After linear filtering, the first iteration kernel looks like this:
// +----+----+----+
// |1/16|2/16|1/16|
// |    |    |    |
// +----+----+----+
// |2/16|4/16|2/16|
// |    |    |    |
// +----+----+----+
// |1/16|2/16|1/16|
// |    |    |    |
// +----+----+----+
// 
// See //depot/3darg/Research/Blurs/BlurAnalysis.xls for a full analysis of this
// blur kernel after consecutive iterations.  In general, 7 iterations are needed
// to achieve a smooth "gaussian-like" blur kernel approximation .
//=============================================================================
float3 SuWrecklessBloomFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, int nIteration )
{
   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
   float2 vHalfTexelSize = vTexelSize * 0.5;

   float2 dUV = (vTexelSize * float(nIteration)) + vHalfTexelSize;
   float2 dUV2 = float2(-1, 1) * dUV;     // precomputed variation of dUV with switched sign,
                                          // used to vectorize the texcoord calculations
   float3 cOut;

   cOut =  tTexture.Sample( sSampler, vUV + dUV2 );
   cOut += tTexture.Sample( sSampler, vUV + dUV );
   cOut += tTexture.Sample( sSampler, vUV - dUV2 );
   cOut += tTexture.Sample( sSampler, vUV - dUV );
   cOut *= 0.25;

   return cOut;
}

//=============================================================================
// sampler tSource = source texture being filtered.  *MUST* have LINEAR 
//                   TEXTURE FILTERING *ENABLED*.
//
// float2 texCoord = texture coordinate for destination texel.
//
// float2 pixelSize = size of a texel in the source and destination image.  
//                    usually this will be a vector like: <1/width, 1/height>
//
// int iteration = 0 based iteration count ( ie. range [0, +infinity) )
//                   for every iteration, the samples move one diagonal pixel
//                   length away from texCoordDest
//
// This function performs a bloom (aka blur) filter.  This function will generally
// be used to ping-pong between two render targets while incrementing the interation
// variable each time.  For the first call, iteration is 0 and increases by 1 for
// every "ping" or "pong".  The difference between this and SiRecklessBloomFilterRGB
// is that this also takes a center sample at each iteration.
// 
// 1---+---+---1  This represents the destination texel and it's 3x3
// |   |   |   |  neighborhood.  Each texel is pixelSize.x wide and
// +---0---0---+  pixelSize.y tall.
// |   | X |   |  
// +---0---0---+  X = texCoord (the center of the destination texel) sampled at every iteration
// |   |   |   |  0 = samples taken from tSource during first iteration (ie. iteration = 0)
// 1---+---+---1  1 = samples taken from tSource during the second iteration (ie. iteration = 1)
//                    
// After linear filtering, the first iteration kernel looks like this:
// +----+----+----+
// |1/17|2/17|1/17|
// |    |    |    |
// +----+----+----+
// |2/17|5/17|2/17|
// |    |    |    |
// +----+----+----+
// |1/17|2/17|1/17|
// |    |    |    |
// +----+----+----+
// 
// See //depot/3darg/Research/Blurs/BlurAnalysis.xls for a full analysis of this
// blur kernel after consecutive iterations.  
//=============================================================================
float3 SuWrecklessCenterBloomFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, int nIteration )
{
   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );
   float2 vHalfTexelSize = vTexelSize * 0.5;

   float2 dUV = (vTexelSize * float(nIteration)) + vHalfTexelSize;
   float2 dUV2 = float2(-1, 1) * dUV;     // precomputed variation of dUV with switched sign,
                                          // used to vectorize the texcoord calculations
   float3 cOut;

   cOut =  tTexture.Sample( sSampler, vUV + dUV2 );
   cOut += tTexture.Sample( sSampler, vUV + dUV );
   cOut += tTexture.Sample( sSampler, vUV - dUV2 );
   cOut += tTexture.Sample( sSampler, vUV - dUV );
   cOut += tTexture.Sample( sSampler, vUV );
   cOut *= 0.2;

   return cOut;
}


//=============================================================================
// sampler tSource = source texture being filtered.  
//
// float2 texCoord = texture coordinate for destination texel.
//
//
// float2 streakDirection = image space vector for direction of streak
//
// int streakSamples = determines number of samples for each streak iteration
//                     in general, 4 works well (for 2 or 3 iterations).
//
// float attenuation = should be ~0.9 - 0.95
//
// float iteration = 0 based iteration count ( ie. range [0, +infinity) )
//                   usually 2 or 3 iterations produces good results
//
// This function performs a streak
//
//
// ** Assuming streakDirection = (1, 0) and streakSamples = 4, the first and 
// ** second iterations look like this:
//
// X = texCoord (the center of the destination texel) sampled at every iteration
// 0 = samples taken from tSource during first iteration (ie. iteration = 0)
// 1 = samples taken from tSource during second iteration (ie. iteration = 1)
//
// +---+---+---+---+   
// | X | 0 | 0 | 0 |   <-- First iteration
// +---+---+---+---+   
//                    
// +---+---+---+---+ +---+---+---+---+ +---+---+---+---+ +---+---+---+---+
// | X |   |   |   | | 1 |   |   |   | | 1 |   |   |   | | 1 |   |   |   |   <-- Second Iteration
// +---+---+---+---+ +---+---+---+---+ +---+---+---+---+ +---+---+---+---+
//                   
// weight = a^(b*s)
// b = 4^(iteration)
// a = attenuation (~.9 - .95)
// s = sample [0, streakSamples]
// sample coord = texCoord + (b*s)
// 
//=============================================================================
float3 SuWrecklessStreakFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float2 vStreakDirection, int nStreakSamples, float fAttenuation, int nIteration)
{
   float3 cOut = 0;

   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );

   float fB = SuPow( nStreakSamples, nIteration );

   for ( int nS = 0; nS < nStreakSamples; nS++ )
   {
      
      float fWeight = SuPow( fAttenuation, fB * nS );
      float2 vTexCoord = vUV + (vStreakDirection * fB * float2(nS, nS) * vTexelSize);
      cOut += saturate(fWeight) * tTexture.Sample( sSampler, vTexCoord );
   }

   return cOut;
}


//=============================================================================
// sampler tSource = source texture being filtered.  
//
// float2 texCoord = texture coordinate for destination texel.
//
// float2 pixelSize = size of a texel in the source and destination image.  
//                    usually this will be a vector like: <1/width, 1/height>
//
// float separation = width of separation in pixels (ie. a value of 2 corresponds
//                    to a separation of 2 pixels in either direction).
//
// This function simulates a cheap LCD projector that has poor color convergence.
// A pixel's RGB components are spread across multiple pixels:
//
// +---+     +---+---+---+---+---+
// |RGB| --> | R |   | G |   | B |
// +---+     +---+---+---+---+---+
//          
//           [-------] = Separation width = 2
// 
//=============================================================================
float3 SuWrecklessProjectorFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float fSeparation )
{
   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );

   float3 cOut = 0;

   float3 cRed = tTexture.Sample( sSampler, vUV - float2(fSeparation * vTexelSize.x, 0.0f) );
   float3 cGreen = tTexture.Sample( sSampler, vUV );
   float3 cBlue = tTexture.Sample( sSampler, vUV + float2(fSeparation * vTexelSize.x, 0.0f) );

   // composite color separation composite
   cOut.r = cRed.r;
   cOut.g = cGreen.g;
   cOut.b = cBlue.b;

   return cOut;
}

//=============================================================================
// sampler tSource = source texture being filtered.  
//
// float2 texCoord = texture coordinate for destination texel.
//
//
//=============================================================================
float3 SuWrecklessCameraImageFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float fBlurRadius, float3 cGlare )
{
   static const float3 cGreyScaleCoef = float3( 0.30, 0.59, 0.11 );

   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );

   float3 cOut = SuGrowablePoissonDiscFilter13( tTexture, sSampler, vUV, fBlurRadius );
   cOut = cOut + cGlare;

   // calculate luminance
   float fLum = dot( saturate(cOut), cGreyScaleCoef );

   // emphasize contrast
   float3 cContrast = cOut * cOut;
   cOut = lerp( cOut, cContrast, fLum );
   
   return cOut;
}

//=============================================================================
// Same as above but with no blur
//
// sampler tSource = source texture being filtered.  
//
// float2 texCoord = texture coordinate for destination texel.
//
// float2 pixelSize = size of a texel in the source and destination image.  
//                    usually this will be a vector like: <1/width, 1/height>
//
//=============================================================================
float3 SuWrecklessCameraImageFilter ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float3 cGlare )
{
   static const float3 cGreyScaleCoef = float3( 0.30, 0.59, 0.11 );

   float3 cOut = tTexture.Sample( sSampler, vUV );
   cOut = cOut + cGlare;

   // calculate luminance
   float fLum = dot( saturate(cOut), cGreyScaleCoef );

   // emphasize contrast
   float3 cContrast = cOut * cOut;
   cOut = lerp( cOut, cContrast, fLum );
   
   return cOut;
}

//=============================================================================
// sampler tSource = source texture being filtered.  
//
// float2 texCoord = texture coordinate for destination texel.
//
// float2 pixelSize = size of a texel in the source and destination image.  
//                    usually this will be a vector like: <1/width, 1/height>
//
//=============================================================================
float3 SuWrecklessCameraImageFilter2 ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float fBlurRadius, float3 cGlare )
{
   static const float3 cGreyScaleCoef = float3( 0.30, 0.59, 0.11 );

   float fWidth, fHeight;
   tTexture.GetDimensions( fWidth, fHeight );
   float2 vTexelSize = 1.0/float2( fWidth, fHeight );

   float3 cOut = SuGrowablePoissonDiscFilter13( tTexture, sSampler, vUV, fBlurRadius );
   cOut = cOut + cGlare;

   // calculate luminance
   float fLum = dot( saturate(cOut), cGreyScaleCoef );

   // emphasize contrast
   float3 cContrast = cOut * cOut;
   cOut = lerp( cContrast, cOut, fLum );
   
   return cOut;
}

//=============================================================================
// Same as above but with no blur
//
// sampler tSource = source texture being filtered.  
//
// float2 texCoord = texture coordinate for destination texel.
//
// float2 pixelSize = size of a texel in the source and destination image.  
//                    usually this will be a vector like: <1/width, 1/height>
//
//=============================================================================
float3 SuWrecklessCameraImageFilter2 ( Texture2D<float3> tTexture, sampler sSampler, float2 vUV, float3 cGlare )
{
   static const float3 cGreyScaleCoef = float3( 0.30, 0.59, 0.11 );

   float3 cOut = tTexture.Sample( sSampler, vUV );
   cOut = cOut + cGlare;

   // calculate luminance
   float fLum = dot( saturate(cOut), cGreyScaleCoef );

   // emphasize contrast
   float3 cContrast = cOut * cOut;
   cOut = lerp( cContrast, cOut, fLum );
   
   return cOut;
}

//=============================================================================
// float3 cIn = Color in  
//
// takes a color as input (cIn) and converts it to sepia tone using Marwan's
// Game Programming Gem's IV method
//=============================================================================
float3 SuSepiaToneFilter ( float3 cIn )
{
   float3 cOut = 0;
   const float3 cIntensityCoef = {0.299f, 0.587f, 0.114f};
   const float3 cSepiaConst = {0.191f, -0.054f, -0.221f};

    // get intensity value (Y part of YIQ)
    float Y = dot(cIntensityCoef, cIn);

    // convert to sepia tone by adding constant
    cOut = Y + cSepiaConst;

    return saturate( cOut );
}

EndHLSL

