//=================================================================================================================================
//
// Author: Chris Oat
//         3D Application Research Group
//         ATI Research, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/include/SuAtmospheric.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================


// INCLUDES =======================================================================================================================
#include "SuMath.shl"

// MISC ===========================================================================================================================

// TEXTURES =======================================================================================================================

// PARAMETERS =====================================================================================================================

// STREAMS ========================================================================================================================

// HLSL ===========================================================================================================================

//=============================================================================
// SH math functions
//=============================================================================
StartHLSL Atmospheric 

   $include "Math"

   // A lot of the math in these functions could be collapse, but the compiler
   // can handle that on it's own (benchmarks showed no improvement with hand
   // optimization) and it's easier to read in this expanded form.
   
   #define SU_ATMOSPHERIC_REFRACTIVE_INDEX_AIR (1.0003)
   #define SU_ATMOSPHERIC_MOLECULAR_DENSITY_AIR (2.545e25)
   #define SU_ATMOSPHERIC_DEPOLARIZATION_FACTOR_AIR (0.035)

   // note that 650e-9 meters == 650 nanometers
   // 1/wavelength so that we can multiply instead 
   // of dividing, which is what they seem to do in all
   // the literature
   #define SU_ATMOSPHERIC_WAVELENGTH_RED   (1.0 / (650e-9))
   #define SU_ATMOSPHERIC_WAVELENGTH_GREEN (1.0 / (570e-9))
   #define SU_ATMOSPHERIC_WAVELENGTH_BLUE  (1.0 / (475e-9))

   // squared
   #define SU_ATMOSPHERIC_WAVELENGTH_RED_2   (1.0 / (423e-15))
   #define SU_ATMOSPHERIC_WAVELENGTH_GREEN_2 (1.0 / (325e-15))
   #define SU_ATMOSPHERIC_WAVELENGTH_BLUE_2  (1.0 / (226e-15))

   // raised to the 4th power
   #define SU_ATMOSPHERIC_WAVELENGTH_RED_4   (1.0 / (179e-27))
   #define SU_ATMOSPHERIC_WAVELENGTH_GREEN_4 (1.0 / (106e-27))
   #define SU_ATMOSPHERIC_WAVELENGTH_BLUE_4  (1.0 / (509e-28))

   //===========================================================================================================
   // Evaluated the Henyey-Greenstein phase function.
   //
   // fCosTheta : cosine of the angle between the direction of view and direction of incidence
   //
   // fHG : Henyey-Greensteint constant.  The phase function is expressed as the polar form of
   //       for an elipse, where fHG is the eccentricity.  Positive values of fHG will cause most
   //       of the light to be scattered in the forward direction, and negative values will cause
   //       most of it to be scattered backwards (for most particles, fHG should be positive and
   //       increase in magnitude when the particle size increases).
   //===========================================================================================================
   float SuAtmosphericHGPhaseFunc ( float fCosTheta, float fHG )
   {
      float fHGSquared = fHG * fHG;
      return ( 1.0 - fHGSquared ) / ( 4.0 * SU_PI * SuPow( ( 1.0 + fHGSquared - 2.0 * fHG * fCosTheta ), 3.0/2.0 ) );
   }

   //===========================================================================================================
   // Computes total and angular scattering coefficients for scattering due to small particles (particles are 
   // smaller than the light's wavelength).  The smaller the wavelength of the light hitting a particle, the 
   // greater the probability that it will be scattered.  It is due to Rayleigh scattering that we observe a
   // blue sky (blue light is shorter wavelength).
   //
   // fCosTheta : cosine of the angle between the light and view vectors (sun and view) 
   //
   //===========================================================================================================
   void SuAtmosphericRaleighScattering ( float fCosTheta, out float3 vRayleighTotal, out float3 vRayleighAngular )
   {
      // Rayleigh total scattering for molecules
      float3 vLambda4 = float3(SU_ATMOSPHERIC_WAVELENGTH_RED_4, SU_ATMOSPHERIC_WAVELENGTH_GREEN_4, SU_ATMOSPHERIC_WAVELENGTH_BLUE_4);
      vRayleighTotal = ((8.0 * SU_PI * SU_PI * SU_PI * 
                       (SU_ATMOSPHERIC_REFRACTIVE_INDEX_AIR * SU_ATMOSPHERIC_REFRACTIVE_INDEX_AIR - 1.0) *
                       (SU_ATMOSPHERIC_REFRACTIVE_INDEX_AIR * SU_ATMOSPHERIC_REFRACTIVE_INDEX_AIR - 1.0)) /
                       (3.0 * SU_ATMOSPHERIC_MOLECULAR_DENSITY_AIR )) * vLambda4 *
                       ( (6.0 + 3.0 * SU_ATMOSPHERIC_DEPOLARIZATION_FACTOR_AIR) / 
                       (6.0 - 7.0 * SU_ATMOSPHERIC_DEPOLARIZATION_FACTOR_AIR) );

      // Rayleigh phase function for molecules
      vRayleighAngular = (3.0 / (16.0 * SU_PI)) * vRayleighTotal * (1.0 + fCosTheta * fCosTheta);

      return;
   }

   //===========================================================================================================
   // Computes total and angular scattering coefficients for scattering due to large molecules (water vapor, smoke,
   // dust, haze, etc).  This kind of scattering doesn't add color, instead it makes a volume more opaque.  In 
   // other words, Mie scattering does not describe what we see but how much of it is visible or how murky it is
   // (it provides an attenuation factor).  Large particles scatter strongly in the forward direction and this scattering
   // is inversely proportional to the second order of the size of the particles and is independent of wavelength.
   //
   // fCosTheta : cosine of the angle between the light and view vectors (sun and view) 
   //
   // fTurbidity: Fraction of scattering due to haze as opposed to molecules 
   //             (See "A Practical Analytic Model for Daylight" by Preetham et. al.).
   //
   // fHenyeyGreenstein : Henyey/Greenstein's phase function eccentricity.  The HG phase function is used to 
   //                     approximate the Mie phase function.  This determines the degree of isotropy of Mie scattering.
   //                     -1 = Fully back scatters
   //                      0 = Isotropic Scattering (scatters equally in all directions)
   //                      1 = Fully forward scatters
   //===========================================================================================================
   void SuAtmosphericMieScattering (float fTurbidity, float fHenyeyGreenstein, float fCosTheta, out float3 vMieTotal, out float3 vMieAngular )
   {
      // Mie total scattering for haze
      float fC = (6.544 * fTurbidity - 6.51) * 1e-17;
      float3 vK = float3(0.685, 0.679, 0.670);
      float3 vLambda2 = float3(SU_ATMOSPHERIC_WAVELENGTH_RED_2, SU_ATMOSPHERIC_WAVELENGTH_GREEN_2, SU_ATMOSPHERIC_WAVELENGTH_BLUE_2);
      
      vMieTotal = 0.434 * fC * SU_PI * ((4.0 * SU_PI * SU_PI) * vLambda2) * vK;

      // Henyey Greenstein's G value
      float fGSquared = fHenyeyGreenstein * fHenyeyGreenstein;
      
      // Mie phase function is aproximated by the Henyey-Greenstein phase function
      vMieAngular = vMieTotal * SuAtmosphericHGPhaseFunc(fCosTheta, fHenyeyGreenstein);

      return;
   }

   //=================================================================================================================
   // Hoffman & Preetham's Atmospheric Scattering Model:
   //
   // cSourceColor : Fully shaded fragment of distant terrain (this is what get's fogged)
   //
   // cSunColor : The average sun color (use Hoffman's or Preetham's sky color models to figure this out)
   //
   // fDistance : Distance in kilometers from camera to point being shaded
   //
   // vView :   View vector (** from Camera to point you're shading, this is exactly 
   //           the opposite of what we generally use **)
   //
   // vSun : Vector to sun
   // 
   // fTurbidity: Fraction of scattering due to haze as opposed to molecules 
   //             (See "A Practical Analytic Model for Daylight" by Preetham et. al.).
   //
   // fG: Henyey/Greenstein's phase function eccentricity.  This determines the degree of isotropy of Mie scattering.
   //     -1 = Fully back scatters
   //      0 = Isotropic Scattering (scatters equally in all directions)
   //      1 = Fully forward scatters
   //
   // fInScatter : allows amount of in scattering to be scaled/tweaked
   //
   // fOutScatter : allows amount of fExtinction to be scaled/tweaked
   //=================================================================================================================
   float3 SuAtmosphericScattering ( float3 cSourceColor, float3 cSunColor, float fDistance, float3 vView, float3 vSun, float fTurbidity = 2.0, float fG = 0.1, float fInScatter = 1.0, float fExtinction = 1.0)
   {
      float fCosTheta = dot(vView, vSun);
      
      float3 vBetaRayTotal;
      float3 vBetaRayAngular;

      SuAtmosphericRaleighScattering( fCosTheta, vBetaRayTotal, vBetaRayAngular);
      

      float3 vBetaMieTotal;
      float3 vBetaMieAngular;

      SuAtmosphericMieScattering( fTurbidity, fG, fCosTheta, vBetaMieTotal, vBetaMieAngular);
      
      // Extinction factor
      float3 vExtinction = fExtinction * exp( -(vBetaRayTotal + vBetaMieTotal) * fDistance );

      // In scattering
      float3 vInScatter = fInScatter * ((vBetaRayAngular + vBetaMieAngular) / (vBetaRayTotal + vBetaMieTotal)) * cSunColor * (1.0 - vExtinction);

      // Visible terrain color
      float3 cFinalColor = cSourceColor * vExtinction + vInScatter;

      return cFinalColor;
   }

   //=================================================================================             
   // Hoffman's Sun Attenuation Model:
   //
   // vSun : Vector from world origin to sun 
   //
   // vZenith : Vector from world origin to sky zenith (up vector)
   //
   // fTurbidity: Fraction of scattering due to haze as opposed to molecules 
   //             (See "A Practical Analytic Model for Daylight" by Preetham et. al.).
   //=================================================================================             
   float3 SuAtmosphericSunAttenuation ( float3 vSun, float3 vZenith, float fTurbidity )
   {
      float fCosTheta = dot(vZenith, vSun);
      float fTheta = acos(fCosTheta);

      float fBeta = 0.04608365822050 * fTurbidity - 0.04586025928522;
      float3 vTau;
      float m = 1.0 /(fCosTheta + 0.15 * SuPow(93.885-fTheta/SU_PI*180.0,-1.253));
      float3 vLambda = float3(0.65, 0.57, 0.475);

      float fAlpha = 1.3;

      vTau = exp( -m * 0.008735 * SuPow(vLambda, -4.08)) * exp(-m * fBeta * pow(vLambda, -fAlpha));

      return vTau;
   }

   //=================================================================================================
   // Perez all weather sky luminance mode.  Computes the five sky luminance distribution coefficients.
   //
   // fTurbidity: Fraction of scattering due to haze as opposed to molecules 
   //             (See "A Practical Analytic Model for Daylight" by Preetham et. al.).
   //
   // [out] A : Distribution coefficient for darkening or brightening of the horizon
   //
   // [out] B : Distribution coefficient for the luminance gradient near the horizon
   // 
   // [out] C : Distribution coefficient for the relative intensity of the circumsolar region
   //
   // [out] D : Distribution coefficient for the width of the cicumsolar region
   //
   // [out] E : Distribution coefficient for relative backscattered light
   //=================================================================================================
   void SuAtmosphericPerezAllWeatherSkyCoefficients ( float fTurbidity, out float3 A, out float3 B, out float3 C, out float3 D, out float3 E )
   {
      float2 vT = float2( fTurbidity, 1.0 );

      A.x = dot( float2( -0.0193, -0.2592 ), vT );
      B.x = dot( float2( -0.0665, 0.0008 ), vT );
      C.x = dot( float2( -0.0004, 0.2125 ), vT );
      D.x = dot( float2( -0.0641, -0.8989 ), vT );
      E.x = dot( float2( -0.0033, 0.0452 ), vT );

      A.y = dot( float2( -0.0167, -0.2608 ), vT );
      B.y = dot( float2( -0.0950, 0.0092 ), vT );
      C.y = dot( float2( -0.0079, 0.2102 ), vT );
      D.y = dot( float2( -0.0441, -1.6537 ), vT );
      E.y = dot( float2( -0.0109, 0.0529 ), vT );

      A.z = dot( float2( 0.1787, -1.4630 ), vT );
      B.z = dot( float2( -0.3554, 0.4275 ), vT );
      C.z = dot( float2( -0.227, 5.3251 ), vT );
      D.z = dot( float2( 0.1206, -2.5771 ), vT );
      E.z = dot( float2( -0.0670, 0.3703 ), vT );

      return;
   }

   //=======================================================================================================================
   // Perez all weather sky luminance model.  Evaluates Perez's five parameter model for describing the sky luminance 
   // distribution.  Color is returned using the CIE xyY encoding.  Use SuAtmosphericPerezAllWeatherSkyCoefficients to 
   // actually find the right coefficients (A -> E).
   // 
   // A : Distribution coefficient for darkening or brightening of the horizon
   //
   // B : Distribution coefficient for the luminance gradient near the horizon
   // 
   // C : Distribution coefficient for the relative intensity of the circumsolar region
   //
   // D : Distribution coefficient for the width of the cicumsolar region
   //
   // E : Distribution coefficient for relative backscattered light
   //
   // fTheta : Angle between sun and view
   //
   // fCosTheta : cos(fTheta)  (see above)
   //
   // fGamma: Angle between zenith and view
   //=======================================================================================================================//
   float3 SuAtmosphericPerezAllWeatherSkyLuminance ( float3 A, float3 B, float3 C, float3 D, float3 E, float fCosTheta, float fGamma, float fCosGamma )
   {
      return (1.0 + A * exp(B / fCosTheta)) * (1.0 + C * exp(D * fGamma) + E * fCosGamma * fCosGamma);
   }

   //==========================================================================================================//
   // Converts the International Commission on Illumination (CIE) xyY color encoding to CIE XYZ color encoding //
   //==========================================================================================================//
   float3 SuAtomosphericConvertCIE_xyY ( float3 xyY )
   {
      float3 XYZ;
      
      XYZ.x = (xyY.x / xyY.y) * xyY.z;
      XYZ.y = xyY.z;
      XYZ.z = ((1.0 - xyY.x - xyY.y) / xyY.y) * xyY.z;

      return XYZ;
   }

   //================================================================================================//
   // Converts the International Commission on Illumination (CIE) XYZ color encoding to RGB encoding //
   //================================================================================================//
   float3 SuAtmosphericConvertCIE_XYZ ( float3 XYZ )
   {
      float3x3 mColorConv = { {3.240479, -1.537150, -0.498535},
                              {-0.969256,  1.875992,  0.041556},
                              {0.055648, -0.204043,  1.057311 } };

      return mul(mColorConv, XYZ);
   }

   //=====================================================================================
   // Preetham's Sky Color Model :
   //
   // vSun : Vector from world origin to sun 
   //
   // vZenith : Vector from world origin to sky zenith (up vector)
   //
   // vView :   View vector (** from Camera to point you're shading, this is exactly 
   //           the opposite of what we generally use **)
   //
   // fTurbidity: Fraction of scattering due to haze as opposed to molecules 
   //             (See "A Practical Analytic Model for Daylight" by Preetham et. al.).
   //
   // fExposure:  Camera exposure ([0,1]  0.1 works pretty well)
   //=====================================================================================
   float3 SuAtmosphericSkyColor ( float3 vSun, float3 vZenith, float3 vView, float fTurbidity, float fExposure )
   {
      
      float fCosThetaS = dot(vSun, vZenith);
      float fThetaS = acos(fCosThetaS);

      float4 vThetaS = float4(fThetaS*fThetaS*fThetaS, fThetaS*fThetaS, fThetaS, 1.0);
      float3 vTurbidity = float3(fTurbidity*fTurbidity, fTurbidity, 1.0);

      float3 vZenith_xyY = 0;
      float4 vTemp = 0;
      
      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00166, -0.02903, 0.11693) );
      vTemp.y = dot( vTurbidity, float3(-0.00375, 0.06377, -0.21196) );
      vTemp.z = dot( vTurbidity, float3(0.00209, -0.03202, 0.06052) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00394, 0.25886) );

      vZenith_xyY.x = dot(vTemp, vThetaS);

      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00275, -0.04214, 0.15346) );
      vTemp.y = dot( vTurbidity, float3(-0.00610, 0.08970, -0.26756) );
      vTemp.z = dot( vTurbidity, float3(0.00317, -0.04153, 0.06670) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00516, 0.26688) );

      vZenith_xyY.y = dot(vTemp, vThetaS);

      // Zenith luminance
      vZenith_xyY.z = (4.0453*fTurbidity - 4.9710) * tan((4.0/9.0 - fTurbidity/120.0) * (SU_PI - 2.0 * fThetaS)) - 0.2155*fTurbidity + 2.4192;
      
      float fCosTheta = saturate(dot(vView, vZenith));
      float fCosGamma = dot(vView, vSun);
      float fGamma = acos(fCosGamma);

      // Find the 5 parameters for the Perez all weater sky luminance distribution model
      float3 A, B, C, D, E;
      SuAtmosphericPerezAllWeatherSkyCoefficients(fTurbidity, A, B, C, D, E );

      float3 vNumerator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, fCosTheta, fGamma, fCosGamma);
      float3 vDenominator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, 1.0, fThetaS, fCosThetaS);

      float3 xyY = vNumerator / vDenominator * vZenith_xyY;

      xyY.z = 1.0 - exp(-fExposure * xyY.z);

      return SuAtmosphericConvertCIE_XYZ( SuAtomosphericConvertCIE_xyY( xyY ) );
   }

   //===========================================================================================================
   // Preetham's Sky Color Model : Same as above but allows you to pass in your own coefficients for the Perez
   // sky color model (which can be computed on the CPU.
   //===========================================================================================================
   float3 SuAtmosphericSkyColor ( float3 vSun, float3 vZenith, float3 vView, float fTurbidity, float fExposure, float3 A, float3 B, float3 C, float3 D, float3 E  )
   {
      
      float fCosThetaS = dot(vSun, vZenith);
      float fThetaS = acos(fCosThetaS);

      float4 vThetaS = float4(fThetaS*fThetaS*fThetaS, fThetaS*fThetaS, fThetaS, 1.0);
      float3 vTurbidity = float3(fTurbidity*fTurbidity, fTurbidity, 1.0);

      float3 vZenith_xyY = 0;
      float4 vTemp = 0;
      
      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00166, -0.02903, 0.11693) );
      vTemp.y = dot( vTurbidity, float3(-0.00375, 0.06377, -0.21196) );
      vTemp.z = dot( vTurbidity, float3(0.00209, -0.03202, 0.06052) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00394, 0.25886) );

      vZenith_xyY.x = dot(vTemp, vThetaS);

      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00275, -0.04214, 0.15346) );
      vTemp.y = dot( vTurbidity, float3(-0.00610, 0.08970, -0.26756) );
      vTemp.z = dot( vTurbidity, float3(0.00317, -0.04153, 0.06670) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00516, 0.26688) );

      vZenith_xyY.y = dot(vTemp, vThetaS);

      // Zenith luminance
      vZenith_xyY.z = (4.0453*fTurbidity - 4.9710) * tan((4.0/9.0 - fTurbidity/120.0) * (SU_PI - 2.0 * fThetaS)) - 0.2155*fTurbidity + 2.4192;
      
      float fCosTheta = saturate(dot(vView, vZenith));
      float fCosGamma = dot(vView, vSun);
      float fGamma = acos(fCosGamma);

      float3 vNumerator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, fCosTheta, fGamma, fCosGamma);
      float3 vDenominator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, 1.0, fThetaS, fCosThetaS);

      float3 xyY = vNumerator / vDenominator * vZenith_xyY;

      xyY.z = 1.0 - exp(-fExposure * xyY.z);

      return SuAtmosphericConvertCIE_XYZ( SuAtomosphericConvertCIE_xyY( xyY ) );
   }

   //=====================================================================================
   // Preetham's Sky Color Model (this version doesn't expose an exposure control, useful
   // you're rendering HDR and doing the tone mapping yourself):
   //
   // vSun : Vector from world origin to sun 
   //
   // vZenith : Vector from world origin to sky zenith (up vector)
   //
   // vView :   View vector (** from Camera to point you're shading, this is exactly 
   //           the opposite of what we generally use **)
   //
   // fTurbidity: Fraction of scattering due to haze as opposed to molecules 
   //             (See "A Practical Analytic Model for Daylight" by Preetham et. al.).
   //
   // fExposure:  Camera exposure ([0,1]  0.1 works pretty well)
   //=====================================================================================
   float3 SuAtmosphericSkyColor ( float3 vSun, float3 vZenith, float3 vView, float fTurbidity )
   {
      
      float fCosThetaS = dot(vSun, vZenith);
      float fThetaS = acos(fCosThetaS);

      float4 vThetaS = float4(fThetaS*fThetaS*fThetaS, fThetaS*fThetaS, fThetaS, 1.0);
      float3 vTurbidity = float3(fTurbidity*fTurbidity, fTurbidity, 1.0);

      float3 vZenith_xyY = 0;
      float4 vTemp = 0;
      
      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00166, -0.02903, 0.11693) );
      vTemp.y = dot( vTurbidity, float3(-0.00375, 0.06377, -0.21196) );
      vTemp.z = dot( vTurbidity, float3(0.00209, -0.03202, 0.06052) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00394, 0.25886) );

      vZenith_xyY.x = dot(vTemp, vThetaS);

      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00275, -0.04214, 0.15346) );
      vTemp.y = dot( vTurbidity, float3(-0.00610, 0.08970, -0.26756) );
      vTemp.z = dot( vTurbidity, float3(0.00317, -0.04153, 0.06670) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00516, 0.26688) );

      vZenith_xyY.y = dot(vTemp, vThetaS);

      // Zenith luminance
      vZenith_xyY.z = (4.0453*fTurbidity - 4.9710) * tan((4.0/9.0 - fTurbidity/120.0) * (SU_PI - 2.0 * fThetaS)) - 0.2155*fTurbidity + 2.4192;
      
      float fCosTheta = saturate(dot(vView, vZenith));
      float fCosGamma = dot(vView, vSun);
      float fGamma = acos(fCosGamma);

      // Find the 5 parameters for the Perez all weater sky luminance distribution model
      float3 A, B, C, D, E;
      SuAtmosphericPerezAllWeatherSkyCoefficients(fTurbidity, A, B, C, D, E );

      float3 vNumerator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, fCosTheta, fGamma, fCosGamma);
      float3 vDenominator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, 1.0, fThetaS, fCosThetaS);

      float3 xyY = vNumerator / vDenominator * vZenith_xyY;

      return SuAtmosphericConvertCIE_XYZ( SuAtomosphericConvertCIE_xyY( xyY ) );
   }

   //===========================================================================================================
   // Preetham's Sky Color Model : Same as above but allows you to pass in your own coefficients for the Perez
   // sky color model (which can be computed on the CPU.
   //===========================================================================================================
   float3 SuAtmosphericSkyColor ( float3 vSun, float3 vZenith, float3 vView, float fTurbidity, float3 A, float3 B, float3 C, float3 D, float3 E  )
   {
      
      float fCosThetaS = dot(vSun, vZenith);
      float fThetaS = acos(fCosThetaS);

      float4 vThetaS = float4(fThetaS*fThetaS*fThetaS, fThetaS*fThetaS, fThetaS, 1.0);
      float3 vTurbidity = float3(fTurbidity*fTurbidity, fTurbidity, 1.0);

      float3 vZenith_xyY = 0;
      float4 vTemp = 0;
      
      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00166, -0.02903, 0.11693) );
      vTemp.y = dot( vTurbidity, float3(-0.00375, 0.06377, -0.21196) );
      vTemp.z = dot( vTurbidity, float3(0.00209, -0.03202, 0.06052) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00394, 0.25886) );

      vZenith_xyY.x = dot(vTemp, vThetaS);

      // Zenith chromacity
      vTemp.x = dot( vTurbidity, float3(0.00275, -0.04214, 0.15346) );
      vTemp.y = dot( vTurbidity, float3(-0.00610, 0.08970, -0.26756) );
      vTemp.z = dot( vTurbidity, float3(0.00317, -0.04153, 0.06670) );
      vTemp.w = dot( vTurbidity, float3(0.0, 0.00516, 0.26688) );

      vZenith_xyY.y = dot(vTemp, vThetaS);

      // Zenith luminance
      vZenith_xyY.z = (4.0453*fTurbidity - 4.9710) * tan((4.0/9.0 - fTurbidity/120.0) * (SU_PI - 2.0 * fThetaS)) - 0.2155*fTurbidity + 2.4192;
      
      float fCosTheta = saturate(dot(vView, vZenith));
      float fCosGamma = dot(vView, vSun);
      float fGamma = acos(fCosGamma);

      float3 vNumerator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, fCosTheta, fGamma, fCosGamma);
      float3 vDenominator = SuAtmosphericPerezAllWeatherSkyLuminance(A, B, C, D, E, 1.0, fThetaS, fCosThetaS);

      float3 xyY = vNumerator / vDenominator * vZenith_xyY;

      return SuAtmosphericConvertCIE_XYZ( SuAtomosphericConvertCIE_xyY( xyY ) );
   }

EndHLSL

