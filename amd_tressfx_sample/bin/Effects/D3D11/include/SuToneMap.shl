//=================================================================================================================================
//
// Author: GPU Technology Initiatives
//         AMD, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/include/SuToneMap.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) AMD, Inc. 2012 All rights reserved. 
//=================================================================================================================================


// INCLUDES =======================================================================================================================

// PARAMETERS =====================================================================================================================
Float fKey            < AppUpdate = ScriptVariable, Name = "ToneMappingParams.fKey"                 >
Float fWhiteLevel     < AppUpdate = ScriptVariable, Name = "ToneMappingParams.fWhiteLevel"          >  
Float fAvgLuminance   < AppUpdate = ScriptVariable, Name = "ToneMappingParams.fAdaptLuminance"      >
Float fGamma          < AppUpdate = ScriptVariable, Name = "ToneMappingParams.fGamma"               >
Bool bUseToneMapping  < AppUpdate = ScriptVariable, Name = "ToneMappingParams.bUseToneMapping"      >

// HLSL ===========================================================================================================================
StartHLSL "ToneMap"


   float fKey;
   float fWhiteLevel;
   float fAvgLuminance;
   bool bUseToneMapping;

   //----------------------------------------------------------------------------------------------------------------------
   // Helper function for Reinhard tone mapping
   //----------------------------------------------------------------------------------------------------------------------
   float SuGetReinhardScaledLuminance( float fAvgLuminanceIn, float fPixelLuminance )
   {
         float fKeyOverLuminance = fKey / fAvgLuminanceIn;
       
         float fScaledLuminance = fKeyOverLuminance * fPixelLuminance;
       
         // The brightness level has to be scaled the same as the pixel luminance
         float fLw = fKeyOverLuminance * fWhiteLevel;
             
         float fTop = fScaledLuminance * ( 1 + ( fScaledLuminance / pow( fLw, 2 )) );
                   
         fScaledLuminance = fTop / ( 1 + fScaledLuminance );
             
         return fScaledLuminance;
   }
   
   //----------------------------------------------------------------------------------------------------------------------
   // Helper function for Reinhard tone mapping
   //----------------------------------------------------------------------------------------------------------------------
   float3 SuReinhardToneMap( float3 vColor )
   {
      // Given an HDR scene, first convert to luminance using the formula from the JGT paper by Reinhard:
      float fPixelLuminance =  SuGetReinhardLuminance( vColor );
      
      // Compute scaled luminance using Reinhard global tone map operator:
      float fScaledLuminance = SuGetReinhardScaledLuminance( fAvgLuminance, fPixelLuminance );
      
      float3 afterToneMapping = saturate(( vColor / fPixelLuminance ) * fScaledLuminance );
      		
      return afterToneMapping;
   }

EndHLSL

