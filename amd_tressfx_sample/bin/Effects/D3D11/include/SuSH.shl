//=================================================================================================================================
//
// Author: Chris Oat
//         3D Application Research Group
//         ATI Research, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/include/SuSH.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================


// INCLUDES =======================================================================================================================
#include "SuMath.shl"

// MISC ===========================================================================================================================

// TEXTURES =======================================================================================================================

// PARAMETERS =====================================================================================================================

// STREAMS ========================================================================================================================

// HLSL ===========================================================================================================================

//=============================================================================
// SH math functions
//=============================================================================
StartHLSL SH 

   $include "Math"

   //==================================================================================//
   // Get the per-band convolution coefficient for convolving with the Lambertian lobe //
   //                                                                                  //
   // nBandIndex = SH Band Index                                                       //
   //==================================================================================//
   float SuConvolutionCoefficient ( int nBandIndex )
   {
      static const float fSHConvolutionCoef[6] = { 1.0, 2.0/3.0, 1.0/4.0, 0.0, -6.0/144.0, 0.0 };
      return fSHConvolutionCoef[nBandIndex];
   }

   //=================================================================================//
   // Evaluate the associated legendre polynomial for a particular SH basis function  //
   //                                                                                 //
   // l = SH function's band index in the series [0, +Inf]                            //
   // m = SH function's index within the band l  [-l, l]                              //
   // x = point at which to evaluate                                                  //
   //=================================================================================//
   float SuComputeP (int l, int m, float x)
   {
      float pmm = 1.0;
      float dx = 0.0;

      if (m > 0)
      {
         float somx2 = sqrt((1.0 - x) * (1.0 + x));
         float fact = 1.0;

         for (int i = 1; i <= m; i++)
         {
            pmm *= (-fact) * somx2;
            fact += 2.0;
         }
      }

      float fRet;
      if (l == m)
      {
         fRet= pmm;
      }
      else
      {

         float pmmp1 = x * (2.0 * m + 1.0) * pmm;

         if (l == (m+1))
         {
            fRet= pmmp1;
         }
         else
         {

            float pll = 0.0;

            for (int ll = m+2; ll <= l; ++ll)
            {
               pll = ((2.0*ll-1.0)*x*pmmp1-(ll+m-1.0)*pmm) / (ll-m);
               pmm = pmmp1;
               pmmp1 = pll;
            }
            
            fRet = pll;
         }
         
      }

      return fRet;
   }


   //====================================================================//
   // Compute the renomalization constant for a given SH basis function. //
   //                                                                    //
   // l = SH function's band index in the series [0, +Inf]               //
   // m = SH function's index within the band l  [-l, l]                 //
   //====================================================================//     
   float SuLookUpK (int l, int m)
   {
      const float K[36] = {0.282094791774, 0.345494149471, 0.488602511903, 0.345494149471, 
                           0.128758067341, 0.257516134682, 0.630783130505, 0.257516134682, 
                           0.128758067341, 0.027814921576, 0.068132365096, 0.215453456076, 
                           0.746352665180, 0.215453456076, 0.068132365096, 0.027814921576, 
                           0.004214597071, 0.011920680675, 0.044603102904, 0.189234939152, 
                           0.846284375322, 0.189234939152, 0.044603102904, 0.011920680675, 
                           0.004214597071, 0.000491145189, 0.001553137459, 0.006589404174, 
                           0.032281355872, 0.170816879241, 0.935602579627, 0.170816879241, 
                           0.032281355872, 0.006589404174, 0.001553137459, 0.000491145189};

      int index = (l * (l + 1)) + m;

      return K[index];
   }

   //=====================================================================//
   // Evaluate a SH basis function at a point on the sphere.              //
   //                                                                     //
   // l = SH function's band index in the series [0, +Inf]                //
   // m = SH function's index within the band l  [-l, l]                  //
   // theta, phi = spherical coordinates of point at which to evaluate SH //
   //=====================================================================//
   float SuEvaluateSH (int l, int m, float cosTheta, float phi)
   {
      float fRet;
      if (m == 0)
      {
         fRet= SuLookUpK(l, 0) * SuComputeP(l, m, cosTheta);
      }
      else if (m > 0)
      {
         fRet= SU_SQRT2 * SuLookUpK(l, m) *  cos(m*phi) * SuComputeP(l, m, cosTheta);
      }
      else
      {
         fRet= SU_SQRT2 * SuLookUpK(l, -m) * sin(-m*phi) * SuComputeP(l, -m, cosTheta);
      }
      
      return fRet;
   }

   //==================================================================================//
   // Same as above but uses a cartesian parameterization rather than spherical coords //
   //==================================================================================//
   float SuEvaluateSH (int l, int m, float3 vDirection )
   {
      float fCosTheta;
      float fPhi;

      fCosTheta = vDirection.z;

      float fS = vDirection.x*vDirection.x + vDirection.y*vDirection.y;
      if (fS <= 0.0)
      {
         fPhi = 0.0;
      }
      else
      {
         fS = sqrt(fS);
    
         if (vDirection.x >= 0.0)
         {
            fPhi = asin(vDirection.y/fS);
         }
         else
         {
            fPhi = 3.14159265359 - asin(vDirection.y/fS);
         }
      }

      return SuEvaluateSH( l, m, fCosTheta, fPhi );
   }

EndHLSL


//===========================================//
// SH Math for 4th order spherical harmonics //
//===========================================//
StartHLSL SH4

   $include "SH"

   //=====================================================//
   // Evaluate a SH basis functions for a given direction //
   //=====================================================//
   void SHEvalDirection ( float3 vDirection, out float4 vOut[4] )
   {
      float3 vDirection2 = vDirection * vDirection;
      const float fY30Const = 0.373176333;
      const float fY31Const = 0.457045799;
      const float fY32Const = 1.445305721;
      const float fY33Const = 0.590043589;

      vOut[0].x = 0.282095;

      vOut[0].y = -0.488603 * vDirection.y;
      vOut[0].z = 0.488603 * vDirection.z;
      vOut[0].w = -0.488603 * vDirection.x;

      vOut[1].x = 1.092548 * vDirection.x * vDirection.y;
      vOut[1].y = -1.092548 * vDirection.y * vDirection.z;
      vOut[1].z = 0.315392 * (3.0*vDirection2.z - 1.0);
      vOut[1].w = -1.092548 * vDirection.x * vDirection.z;
      vOut[2].x = 0.546274 * (vDirection2.x - vDirection2.y);

      vOut[2].y = -fY33Const * vDirection.y * (3.0 * vDirection2.x - vDirection2.y);
      vOut[2].z = fY32Const * 2.0 * vDirection.x * vDirection.y * vDirection.z;
      vOut[2].w = -fY31Const * vDirection.y * (5.0 * vDirection2.z - 1.0);
      vOut[3].x = fY30Const * vDirection.z * (5.0 * vDirection2.z - 3.0);
      vOut[3].y = -fY31Const * vDirection.x * (5.0 * vDirection2.z - 1.0);
      vOut[3].z = fY32Const * vDirection.z * (vDirection2.x - vDirection2.y);
      vOut[3].w = -fY33Const * vDirection.x * (vDirection2.x - 3.0 * vDirection2.y);

      return;
   }

   //===============================================//
   // Rotate a 4th order SH vector about the Z axis //
   //===============================================//
   void SuSHRotateZ ( float fAngle, float4 vIn[4], out float4 vOut[4] )
   {
      float3 vAngleLUT = float3( 1, 2, 3 ) * fAngle;
      float3 vCosLUT =  cos( vAngleLUT );
      float3 vSinLUT =  sin( vAngleLUT );

      vOut[0].x = vIn[0].x;

      vOut[0].y = (vIn[0].y *  vCosLUT.x) + (vIn[0].w * vSinLUT.x);
      vOut[0].z =  vIn[0].z;
      vOut[0].w = (vIn[0].y * -vSinLUT.x) + (vIn[0].w * vCosLUT.x);

      vOut[1].x = (vIn[1].x *  vCosLUT.y) + (vIn[2].x * vSinLUT.y);
      vOut[1].y = (vIn[1].y *  vCosLUT.x) + (vIn[1].w * vSinLUT.x);
      vOut[1].z =  vIn[1].z;
      vOut[1].w = (vIn[1].y * -vSinLUT.x) + (vIn[1].w * vCosLUT.x);
      vOut[2].x = (vIn[1].x * -vSinLUT.y) + (vIn[2].x * vCosLUT.y);

      vOut[2].y = (vIn[2].y *  vCosLUT.z) + (vIn[3].w * vSinLUT.z);
      vOut[2].z = (vIn[2].z *  vCosLUT.y) + (vIn[3].z * vSinLUT.y);
      vOut[2].w = (vIn[2].w *  vCosLUT.x) + (vIn[3].y * vSinLUT.x);
      vOut[3].x =  vIn[3].x;
      vOut[3].y = (vIn[2].w * -vSinLUT.x) + (vIn[3].y * vCosLUT.x);
      vOut[3].z = (vIn[2].z * -vSinLUT.y) + (vIn[3].z * vCosLUT.y);
      vOut[3].w = (vIn[2].y * -vSinLUT.z) + (vIn[3].w * vCosLUT.z);
   }

   //==============================================================//
   // Rotate a 4th order SH vector about the X axis by +90 degrees //
   //==============================================================//
   void SuSHRotateXp90 ( float4 vIn[4], out float4 vOut[4] )
   {
      vOut[0].x = vIn[0].x;

      vOut[0].y = vIn[0].z;
      vOut[0].z = -vIn[0].y;
      vOut[0].w = vIn[0].w;

      vOut[1].x = vIn[1].w;
      vOut[1].y = -vIn[1].y;
      vOut[1].z = (vIn[1].z * -0.5) + (vIn[2].x * -0.866025403784);
      vOut[1].w = -vIn[1].x;
      vOut[2].x = (vIn[1].z * -0.866025403784) + (vIn[2].x * 0.5);

      vOut[2].y  = ((vIn[3].x * -0.7905694246) + (vIn[3].z * 0.6123724580));
      vOut[2].z = -vIn[2].z;
      vOut[2].w = ((vIn[3].x * -0.6123724580) + (vIn[3].z * -0.7905694842));
      vOut[3].x = ((vIn[2].y * 0.7905693650) + (vIn[2].w * 0.6123723984));
      vOut[3].y = (vIn[3].y * -0.25) + (vIn[3].w * -0.9682458639f);
      vOut[3].z = ((vIn[2].y * -0.6123724580) + (vIn[2].w * 0.7905694246));
      vOut[3].w = (vIn[3].y  * -0.9682458639) + (vIn[3].w * 0.25);
   }

   //==============================================================//
   // Rotate a 4th order SH vector about the X axis by -90 degrees //
   //==============================================================//
   void SuSHRotateXn90 ( float4 vIn[4], out float4 vOut[4] )
   {
      vOut[0].x = vIn[0].x;

      vOut[0].y = -vIn[0].z;
      vOut[0].z = vIn[0].y;
      vOut[0].w = vIn[0].w;

      vOut[1].x = -vIn[1].w;
      vOut[1].y = -vIn[1].y;
      vOut[1].z = (vIn[1].z * -0.5f) + (vIn[2].x * -0.866025403784f);
      vOut[1].w = vIn[1].x;
      vOut[2].x = (vIn[1].z * -0.866025403784f) + (vIn[2].x * 0.5f);

      vOut[2].y  = -((vIn[3].x * -0.7905694246f) + (vIn[3].z * 0.6123724580f));
      vOut[2].z = -vIn[2].z;
      vOut[2].w = -((vIn[3].x * -0.6123724580f) + (vIn[3].z * -0.7905694842f));
      vOut[3].x = -((vIn[2].y * 0.7905693650f) + (vIn[2].w * 0.6123723984f));
      vOut[3].y = (vIn[3].y * -0.25f) + (vIn[3].w * -0.9682458639f);
      vOut[3].z = -((vIn[2].y * -0.6123724580f) + (vIn[2].w * 0.7905694246f));
      vOut[3].w = (vIn[3].y  * -0.9682458639f) + (vIn[3].w * 0.25f);
   }




   //==============================================================//
   // Rotate a 4th order SH vector by an arbitrary rotation matrix //
   //==============================================================//
   void SuSHRotate ( float3x3 mRotation, float4 vIn[4], out float4 vOut[4] )
   {
      //mRotation[0] = normalize( mRotation[0] );
      //mRotation[1] = normalize( mRotation[1] );
      //mRotation[2] = normalize( mRotation[2] );

      float3 v0 = normalize( float3( mRotation[0][0], mRotation[1][0], mRotation[2][0] ) );
      float3 v1 = normalize( float3( mRotation[0][1], mRotation[1][1], mRotation[2][1] ) );
      float3 v2 = normalize( float3( mRotation[0][2], mRotation[1][2], mRotation[2][2] ) );

      mRotation[0] = float3( v0.x, v1.x, v2.x );
      mRotation[1] = float3( v0.y, v1.y, v2.y );
      mRotation[2] = float3( v0.z, v1.z, v2.z );

      //=======================================================================================//
      // convert to euler angles using the following identities :                              //
      //                                                                                       //
      // pMatrix[0] = (cosf(alpha) * cosf(beta) * cosf(gamma)) - (sinf(alpha) * sinf(gamma));  //
      // pMatrix[1] = (sinf(alpha) * cosf(beta) * cosf(gamma)) + (cosf(alpha) * sinf(gamma));  //
      // pMatrix[2] = -sinf(beta) * cosf(gamma);                                               //
      // pMatrix[3] = 0.0f;                                                                    //
      //                                                                                       //
      // pMatrix[4] = (-cosf(alpha) * cosf(beta) * sinf(gamma)) - (sinf(alpha) * cosf(gamma)); //
      // pMatrix[5] = (-sinf(alpha) * cosf(beta) * sinf(gamma)) + (cosf(alpha) * cosf(gamma)); //
      // pMatrix[6] = sinf(beta) * sinf(gamma);                                                //
      // pMatrix[7] = 0.0f;                                                                    //
      //                                                                                       //
      // pMatrix[8] = cosf(alpha) * sinf(beta);                                                //
      // pMatrix[9] = sinf(alpha) * sinf(beta);                                                //
      // pMatrix[10] = cosf(beta);                                                             //
      // pMatrix[11] = 0.0f;                                                                   //
      //                                                                                       //
      // pMatrix[12] = 0.0f;                                                                   //
      // pMatrix[13] = 0.0f;                                                                   //
      // pMatrix[14] = 0.0f;                                                                   //
      // pMatrix[15] = 1.0f;                                                                   //
      //                                                                                       //
      // notation conventions come from:                                                       //
      // http://casgm3.anorg.chemie.uni-tuebingen.de/klaus/nmr/conventions/euler/euler.html    //
      //=======================================================================================//
      float fCosBeta = mRotation[2][2];
   
      float fSinBeta = sqrt( 1.0 - (fCosBeta * fCosBeta) );

      float fAlpha;
      float fBeta;
      float fGamma;

      //=============================================================//
      // prevent a divide by zero by special casing beta == {0 | PI} //
      //=============================================================//
      if ( abs( fSinBeta ) < SU_EPSILON_FLOAT )
      {
         fAlpha = SuAtan2( -mRotation[0][1], mRotation[1][1] );
         fBeta = fCosBeta < 0.0 ? SU_PI : 0.0;
         fGamma = 0.0;
      }
      else
      {
         fAlpha = SuAtan2( mRotation[1][2], mRotation[0][2] );
         fBeta = SuAtan2( fSinBeta, fCosBeta );
         fGamma = SuAtan2( mRotation[2][1], -mRotation[2][0] );
      }

      float4 vSHTemp[4];

      SuSHRotateZ( fGamma, vIn, vOut );
      SuSHRotateXn90( vOut, vSHTemp );
      SuSHRotateZ( -fBeta, vSHTemp, vOut );
      SuSHRotateXp90( vOut, vSHTemp );
      SuSHRotateZ( fAlpha, vSHTemp, vOut);

      return;
   }

EndHLSL

//===========================================//
// SH Math for 3rd order spherical harmonics //
//===========================================//
StartHLSL SH3

   $include "SH"

   //=====================================================//
   // Evaluate a SH basis functions for a given direction //
   //=====================================================//
   void SHEvalDirection ( float3 vDirection, out float4 vOut[3] )
   {
      float3 vDirection2 = vDirection * vDirection;
      
      vOut[0].x = 0.282095;

      vOut[0].y = -0.488603 * vDirection.y;
      vOut[0].z = 0.488603 * vDirection.z;
      vOut[0].w = -0.488603 * vDirection.x;

      vOut[1].x = 1.092548 * vDirection.x * vDirection.y;
      vOut[1].y = -1.092548 * vDirection.y * vDirection.z;
      vOut[1].z = 0.315392 * (3.0*vDirection2.z - 1.0);
      vOut[1].w = -1.092548 * vDirection.x * vDirection.z;
      vOut[2].x = 0.546274 * (vDirection2.x - vDirection2.y);
      
      vOut[2].yzw = 0.0;

      return;
   }

   //===============================================//
   // Rotate a 3rd order SH vector about the Z axis //
   //===============================================//
   void SuSHRotateZ ( float fAngle, float4 vIn[3], out float4 vOut[3] )
   {
      float3 vAngleLUT = float3( 1, 2, 3 ) * fAngle;
      float3 vCosLUT =  cos( vAngleLUT );
      float3 vSinLUT =  sin( vAngleLUT );

      vOut[0].x = vIn[0].x;

      vOut[0].y = (vIn[0].y *  vCosLUT.x) + (vIn[0].w * vSinLUT.x);
      vOut[0].z =  vIn[0].z;
      vOut[0].w = (vIn[0].y * -vSinLUT.x) + (vIn[0].w * vCosLUT.x);

      vOut[1].x = (vIn[1].x *  vCosLUT.y) + (vIn[2].x * vSinLUT.y);
      vOut[1].y = (vIn[1].y *  vCosLUT.x) + (vIn[1].w * vSinLUT.x);
      vOut[1].z =  vIn[1].z;
      vOut[1].w = (vIn[1].y * -vSinLUT.x) + (vIn[1].w * vCosLUT.x);
      vOut[2].x = (vIn[1].x * -vSinLUT.y) + (vIn[2].x * vCosLUT.y);

      vOut[2].yzw = 0;
   }

   //==============================================================//
   // Rotate a 3rd order SH vector about the X axis by +90 degrees //
   //==============================================================//
   void SuSHRotateXp90 ( float4 vIn[3], out float4 vOut[3] )
   {
      vOut[0].x = vIn[0].x;

      vOut[0].y = vIn[0].z;
      vOut[0].z = -vIn[0].y;
      vOut[0].w = vIn[0].w;

      vOut[1].x = vIn[1].w;
      vOut[1].y = -vIn[1].y;
      vOut[1].z = (vIn[1].z * -0.5) + (vIn[2].x * -0.866025403784);
      vOut[1].w = -vIn[1].x;
      vOut[2].x = (vIn[1].z * -0.866025403784) + (vIn[2].x * 0.5);

      vOut[2].yzw = 0;
   }

   //==============================================================//
   // Rotate a 3rd order SH vector about the X axis by -90 degrees //
   //==============================================================//
   void SuSHRotateXn90 ( float4 vIn[3], out float4 vOut[3] )
   {
      vOut[0].x = vIn[0].x;

      vOut[0].y = -vIn[0].z;
      vOut[0].z = vIn[0].y;
      vOut[0].w = vIn[0].w;

      vOut[1].x = -vIn[1].w;
      vOut[1].y = -vIn[1].y;
      vOut[1].z = (vIn[1].z * -0.5f) + (vIn[2].x * -0.866025403784f);
      vOut[1].w = vIn[1].x;
      vOut[2].x = (vIn[1].z * -0.866025403784f) + (vIn[2].x * 0.5f);

      vOut[2].yzw = 0;
   }

   //==============================================================//
   // Rotate a 3rd order SH vector by an arbitrary rotation matrix //
   //==============================================================//
   void SuSHRotate ( float3x3 mRotation, float4 vIn[3], out float4 vOut[3] )
   {
      //mRotation[0] = normalize( mRotation[0] );
      //mRotation[1] = normalize( mRotation[1] );
      //mRotation[2] = normalize( mRotation[2] );

      float3 v0 = normalize( float3( mRotation[0][0], mRotation[1][0], mRotation[2][0] ) );
      float3 v1 = normalize( float3( mRotation[0][1], mRotation[1][1], mRotation[2][1] ) );
      float3 v2 = normalize( float3( mRotation[0][2], mRotation[1][2], mRotation[2][2] ) );

      mRotation[0] = float3( v0.x, v1.x, v2.x );
      mRotation[1] = float3( v0.y, v1.y, v2.y );
      mRotation[2] = float3( v0.z, v1.z, v2.z );

      //=======================================================================================//
      // convert to euler angles using the following identities :                              //
      //                                                                                       //
      // pMatrix[0] = (cosf(alpha) * cosf(beta) * cosf(gamma)) - (sinf(alpha) * sinf(gamma));  //
      // pMatrix[1] = (sinf(alpha) * cosf(beta) * cosf(gamma)) + (cosf(alpha) * sinf(gamma));  //
      // pMatrix[2] = -sinf(beta) * cosf(gamma);                                               //
      // pMatrix[3] = 0.0f;                                                                    //
      //                                                                                       //
      // pMatrix[4] = (-cosf(alpha) * cosf(beta) * sinf(gamma)) - (sinf(alpha) * cosf(gamma)); //
      // pMatrix[5] = (-sinf(alpha) * cosf(beta) * sinf(gamma)) + (cosf(alpha) * cosf(gamma)); //
      // pMatrix[6] = sinf(beta) * sinf(gamma);                                                //
      // pMatrix[7] = 0.0f;                                                                    //
      //                                                                                       //
      // pMatrix[8] = cosf(alpha) * sinf(beta);                                                //
      // pMatrix[9] = sinf(alpha) * sinf(beta);                                                //
      // pMatrix[10] = cosf(beta);                                                             //
      // pMatrix[11] = 0.0f;                                                                   //
      //                                                                                       //
      // pMatrix[12] = 0.0f;                                                                   //
      // pMatrix[13] = 0.0f;                                                                   //
      // pMatrix[14] = 0.0f;                                                                   //
      // pMatrix[15] = 1.0f;                                                                   //
      //                                                                                       //
      // notation conventions come from:                                                       //
      // http://casgm3.anorg.chemie.uni-tuebingen.de/klaus/nmr/conventions/euler/euler.html    //
      //=======================================================================================//
      float fCosBeta = mRotation[2][2];
   
      float fSinBeta = sqrt( 1.0 - (fCosBeta * fCosBeta) );

      float fAlpha;
      float fBeta;
      float fGamma;

      //=============================================================//
      // prevent a divide by zero by special casing beta == {0 | PI} //
      //=============================================================//
      if ( abs( fSinBeta ) < SU_EPSILON_FLOAT )
      {
         fAlpha = SuAtan2( -mRotation[0][1], mRotation[1][1] );
         fBeta = fCosBeta < 0.0 ? SU_PI : 0.0;
         fGamma = 0.0;
      }
      else
      {
         fAlpha = SuAtan2( mRotation[1][2], mRotation[0][2] );
         fBeta = SuAtan2( fSinBeta, fCosBeta );
         fGamma = SuAtan2( mRotation[2][1], -mRotation[2][0] );
      }

      float4 vSHTemp[3];

      SuSHRotateZ( fGamma, vIn, vOut );
      SuSHRotateXn90( vOut, vSHTemp );
      SuSHRotateZ( -fBeta, vSHTemp, vOut );
      SuSHRotateXp90( vOut, vSHTemp );
      SuSHRotateZ( fAlpha, vSHTemp, vOut);

      return;
   }

EndHLSL

//===========================================//
// SH Math for 2nd order spherical harmonics //
//===========================================//
StartHLSL SH2

   $include "SH"

    //=====================================================//
   // Evaluate a SH basis functions for a given direction //
   //=====================================================//
   void SHEvalDirection ( float3 vDirection, out float4 vOut )
   {
      vOut.x = 0.282095;

      vOut.y = -0.488603 * vDirection.y;
      vOut.z = 0.488603 * vDirection.z;
      vOut.w = -0.488603 * vDirection.x;

      return;
   }

   //==============================================================//
   // Rotate a 2nd order SH vector by an arbitrary rotation matrix //
   //==============================================================//
   void SuSHRotate ( float3x3 mRotation, float4 vIn, out float4 vOut )
   {

      float3 vTmp = float3( -vIn.w, -vIn.y, vIn.z );
      vTmp = mul( mRotation, vTmp );

      vOut.x = vIn.x;
      vOut.yzw = float3( -vTmp.y, vTmp.z, -vTmp.x );

      return;
   }

EndHLSL

