//=================================================================================================================================
//
// Author: Jeremy Shopf
//         3D Application Research Group
//         ATI Research, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3D11/include/SuBRDF.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================


// INCLUDES =======================================================================================================================
#include "SuMath.shl"

// MISC ===========================================================================================================================

// TEXTURES =======================================================================================================================

// PARAMETERS =====================================================================================================================

// STREAMS ========================================================================================================================

// HLSL ===========================================================================================================================

//=============================================================================
// SH math functions
//=============================================================================
StartHLSL BRDF 

   $include "Math"
   
   //===========================================================================================================
   // Tangent-space trig functions ( for convenience )
   //
   //===========================================================================================================
   float CosTheta( float3 w )
   {
      return w.z;
   }
   float SinTheta( float3 w )
   {
      return SuSqrt( max( 0.0, 1.0 - w.z * w.z ) );
   } 
   
   float CosPhi( float3 w )
   {
      return w.x / SinTheta( w );
   }
   
   float SinPhi( float3 w )
   {
      return w.y / SinTheta( w );
   }
   
   // Schlick's approximation of Fresnel
   float Fresnel( float costheta, float R )
   {
      return ( R + SuPow( 1.0 - costheta, 5.0 ) * ( 1.0 - R ) );
   }
      
   float Geometry( float NdotH, float NdotV, float VdotH, float NdotL )
   {
      return min( 1.0, min( 2 * (NdotH) * (NdotV) / (VdotH), 2 * (NdotH) * (NdotL) / (VdotH) ) );
   }
      
   float MicrofacetDist( float exponent, float NdotH )
   {
         return SuPow( saturate( NdotH ),  exponent );
   }
   
   //===========================================================================================================
   // Torrance-Sparrow with Blinn microfacet distribution (aka Blinn-Phong)
   // exponent = phong exponent for highlight
   // R = reflectivity for Fresnel
   //===========================================================================================================
   float4 BlinnPhong( float3 vNormalWS, float3 vViewWS, float3 vLightWS, float3 BaseColor,
                                float kd, float ks, float R, float exponent )
   {
   
      // Calculate half vector between light and view
      float3 vHalfWS = ( vLightWS + vViewWS );
      vHalfWS /= length( vHalfWS );  
      
      // Calculate all the angles we need
      float NdotH = dot( vNormalWS, vHalfWS );
      float NdotV = dot( vNormalWS, vViewWS );
      float VdotH = dot( vViewWS, vHalfWS );
      float NdotL = dot( vNormalWS, vLightWS );  
        
      // Calculate microfacet distribution, masking term, and fresnel
      float G = Geometry( NdotH, NdotV, VdotH, NdotL );
      float D = MicrofacetDist( exponent, NdotH );
      float F = Fresnel( NdotV, R );
      
      // Calculate specular and diffuse
      float spec = D * G * F / NdotV;
      float diffuse = NdotL;
      
      return float4( kd * diffuse * BaseColor + ks * spec, 1.0 );
   }
   
   
   //===========================================================================================================
   // Bank's Anisotropic Lighting Model ( physically-_feasible_ )
   //     This lighting model is  not reciprocal and does not handle self-shadowing.
   //     But it is easy to compute and depends only on two dot products.
   // vTangent = direction describing the direction of the cylindrical microfacets
   // p = exponent used to combat "excess brightness" due to using a modified normal. 
   //     suggested values 1 to 10
   // q = Phong exponent
   //
   // Originally described in his 1994 paper "Illumination in Diverse Codimensions" though
   //    this code is adapted from the book "Real-time Shading" by Olano et al.
   //
   //===========================================================================================================
   float4 BanksAnisotropic( float3 vViewTS, float3 vLightTS, float3 vTangent,
                            float3 BaseColor, float kd, float ks, float p, float q )
   {
      float LdotT = dot( vLightTS, vTangent );
      float LdotTsq = LdotT * LdotT;
      float VdotT = dot( vViewTS, vTangent );
      
      float NprimeDotL = SuSqrt( 1 - LdotTsq );
      float VdotR = NprimeDotL * SuSqrt( 1.0 - VdotT * VdotT ) - LdotT * VdotT;
      
      float diffuse = kd * SuPow( NprimeDotL, p );
      float spec = ks * SuPow( VdotR, q );
      
      return float4( ( BaseColor * diffuse + spec ) * CosTheta( vLightTS ), 1.0 );
   }
   
   
   //===========================================================================================================
   // Ashikhmin (and Shirley) Anisotropic BRDF ( physically-plausible )
   //  
   // ex = exponent which controls the distribution function for half-angle vectors with an 
   //      azimuthal angle which orients them exactly along the x axis
   // ey = exponent for orientation with the y-axis
   // R  = reflectivity for Fresnel
   //
   // This implementation is an amalgamation of the implementation in Pharr "Physically-Based Rendering" and
   // Olano's "Real-time Shading"
   //===========================================================================================================
   float4 AshikhminAnisotropic( float3 vViewTS, float3 vLightTS, float3 vHalfTS, float3 vBaseColor, float kd, 
                                float ks, float R, float ex, float ey )
   {
      // We're in tangent space so the dot product is just the Z value
      float NdotH = CosTheta( vHalfTS );
      float e = ( ex * vHalfTS.x * vHalfTS.x + ey * vHalfTS.y * vHalfTS.y ) /
                ( 1.f - NdotH * NdotH );

      float spec = MicrofacetDist( e, NdotH );
      spec /= max( abs(dot(vLightTS, vHalfTS)), abs(dot(vViewTS, vHalfTS)) ) * Fresnel( dot( vLightTS, vHalfTS ), R );
      
      float diffuse = 28.0/(23.0*SU_PI) * (1.0 - SuPow( 1.0 - max( 0.0, CosTheta( vViewTS ) )/2.0, 5.0 ) * 
                      SuPow( 1.0 - max( 0.0, CosTheta( vLightTS ))/2.0, 5.0 ));

      return float4( vBaseColor * diffuse * kd * ( 1.0 - ks ) + spec * ks, 1.0 );
   }
   
   //===========================================================================================================
   // Ashikhmin Isotropic BRDF ( physically-plausible )
   // 
   // R = reflectivity for Fresnel
   // exponent = Phong exponent
   //===========================================================================================================
   float4 AshikhminIsotropic( float3 vViewTS, float3 vLightTS, float3 vHalfTS, float3 BaseColor,
                              float kd, float ks, float R, float exponent )
   {
      float NdotH = CosTheta( vHalfTS );
      float NdotV = CosTheta( vViewTS );
      float NdotL = CosTheta( vLightTS );
      float VdotH = dot( vViewTS, vHalfTS );
      
      float spec = ( (exponent+1.0) * SuPow( NdotH, exponent ) * Fresnel( VdotH, R ) / 
                     ( abs(VdotH) * max( NdotV, NdotL )* 8 * SU_PI ) );
      float diffuse = 28.0/(23.0*SU_PI) * (1.0 - SuPow( ( 1.0 - NdotV/2.0 ), 5.0 ) * SuPow( 1.0 - NdotL/2.0, 5.0 ));
      diffuse = max( 0.0, CosTheta( vLightTS ) );

      return float4( BaseColor * diffuse * kd + ks * spec, 1.0 );

   }   

   
   
   
   //===========================================================================================================
   // Oren-Nayar Diffuse BRDF
   //  
   // sigma = the standard deviation (in radians) of the orientation angle of the microfacets
   //
   // Originally described in 1994 paper "Generalization of Lambert's Reflectance Model" but adapted here from
   //      page 439-440 of "Physically Based Rendering" by Pharr and Humphries
   //===========================================================================================================
   float4 OrenNayar( float3 vViewTS, float3 vLightTS, float3 BaseColor, float sigma )
   {
      float sigma2 = sigma * sigma;
      float A = 1.0 - ( sigma2 ) / ( 2.0 * ( sigma2  + 0.33 ));
      float B = 0.45 * sigma2 / ( sigma2 + 0.09 );
      
      float sinthetaL = SinTheta( vLightTS );
      float sinthetaV = SinTheta( vViewTS );
      
      float sinphiL = SinPhi( vLightTS ), cosphiL = CosPhi( vLightTS );
      float sinphiV = SinPhi( vViewTS ), cosphiV = CosPhi( vViewTS );
      float dcos = cosphiL * cosphiV + sinphiL * sinphiV;
      float maxcos = max( 0.0f, dcos );
      
      float sinalpha, tanbeta;
      
      if( abs( CosTheta( vLightTS )) > abs( CosTheta( vViewTS )))
      {
         sinalpha = sinthetaV;
         tanbeta = sinthetaL / abs( CosTheta( vLightTS ));
      }
      else
      {
         sinalpha = sinthetaL;
         tanbeta = sinthetaV / abs( CosTheta( vViewTS ));
      }
      
      return float4( BaseColor * CosTheta( vLightTS )* ( A + B * maxcos * sinalpha * tanbeta ), 1.0 );
   
   }
EndHLSL
