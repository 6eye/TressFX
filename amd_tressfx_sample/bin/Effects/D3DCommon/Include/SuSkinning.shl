//=================================================================================================================================
//
// Author: Thorsten Scheuermann
//         3D Application Research Group
//         ATI Research, Inc.
//
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3DCommon/Include/SuSkinning.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

#ifndef SU_SKINNING_MAX_BONES
   #error "You must #define SU_SKINNING_MAX_BONES and SU_SKINNING_NUM_BONES in your effect before including SuSkinning.shl"
#endif
#ifndef SU_SKINNING_NUM_BONES
   #error "You must #define SU_SKINNING_MAX_BONES and SU_SKINNING_NUM_BONES in your effect before including SuSkinning.shl"
#endif

// INCLUDES =======================================================================================================================

// MISC ===========================================================================================================================

// TEXTURES =======================================================================================================================


// PARAMETERS =====================================================================================================================
Matrix mPoseToWorldSpace[ SU_SKINNING_MAX_BONES ] < AppUpdate = Bones >
Vector vPoseToWorldSpace4x3[ 3*SU_SKINNING_MAX_BONES ] < AppUpdate = Bones4x3 >

// HLSL ===========================================================================================================================


StartHLSL Skinning4x3
   
#if defined(SU_3D_API_D3D10) || defined(SU_3D_API_D3D11)
   cbuffer cbBones4x3
   {
#endif

   /// 4x3 bone matrices, packed as an array of vectors.  The reason for using a float4 array is to simplify the effect layer
   float4   vPoseToWorldSpace4x3[ 3*SU_SKINNING_MAX_BONES ];

#if defined(SU_3D_API_D3D10) || defined(SU_3D_API_D3D11)
   }
#endif

   /// Retrieves a 4x3 bone transform
   float3x4 SuGetBone4x3( int nIndex = 0 )
   {
      return float3x4( vPoseToWorldSpace4x3[(3*nIndex)], vPoseToWorldSpace4x3[(3*nIndex)+1], vPoseToWorldSpace4x3[(3*nIndex)+2] ) ;
   }

   /// Returns a 4x3 matrix to transform vertex attributes from pose space to world space
   float3x4 SuGetSkinningMatrix4x3( float4 vWeights, int4 vIndices )
   {
      float3x4 mSkinning = vWeights[0] * SuGetBone4x3( vIndices[0] );

#ifdef SU_3D_API_D3D9
      for( int i = 1; i< SU_SKINNING_NUM_BONES; i++ )
      {
         mSkinning += vWeights[i] * SuGetBone4x3( vIndices[i] );
      }
#else // D3D 10 & D3D 11

   // The D3D10 HLSL compiler currently chokes on the loop so we have to do the #if stupidity instead
   #if SU_SKINNING_NUM_BONES > 1
         mSkinning += vWeights[1] * SuGetBone4x3( vIndices[1] );
   #endif
   #if SU_SKINNING_NUM_BONES > 2
         mSkinning += vWeights[2] * SuGetBone4x3( vIndices[2] );
   #endif
   #if SU_SKINNING_NUM_BONES > 3
         mSkinning += vWeights[3] * SuGetBone4x3( vIndices[3] );
   #endif
#endif

      return mSkinning;
   }

   /// Transforms a four-vector by a 4x3 bone
   float3 SuSkin4x3SingleBone( float4 vVector, in int nIndex = 0 )
   {
      int nIndex3 = nIndex*3;
      return float3( dot( vVector, vPoseToWorldSpace4x3[ nIndex3 ] ),
                     dot( vVector, vPoseToWorldSpace4x3[ nIndex3+1 ] ),
                     dot( vVector, vPoseToWorldSpace4x3[ nIndex3+2 ] ) );
   }

   /// Transforms a three-vector by a 4x3 bone
   float3 SuSkin4x3SingleBone( float3 vVector, in int nIndex = 0 )
   {
      int nIndex3 = nIndex*3;
      return float3( dot( vVector, vPoseToWorldSpace4x3[ nIndex3 ] ),
                     dot( vVector, vPoseToWorldSpace4x3[ nIndex3+1 ] ),
                     dot( vVector, vPoseToWorldSpace4x3[ nIndex3+2 ] ) );
   }

   /// Applies skinning matrices directly to a 4-vector.  When skinning multiple things, it is generally more efficient
   /// to call SuGetSkinningMatrix4x3 instead to obtain a skinning matrix, and then perform a single multiply
   float3 SuSkin4x3( float4 vVec, float4 vWeights, int4 vIndices )
   {
#ifdef SU_3D_API_D3D9
      float3 vSkinned = 0;
      for( int i = 0; i < SU_SKINNING_NUM_BONES; i++ )
      {
         vSkinned += vWeights[i] * SuSkin4x3SingleBone( vVec, vIndices[i] );
      }

      return vSkinned;
#else
      // For some reason the above code doesn't work in D3D10. I blame the HLSL compiler...
      return mul( SuGetSkinningMatrix4x3( vWeights, vIndices ), vVec );
#endif
   }


EndHLSL



//=============================================================================
// Skinning functions
//=============================================================================
StartHLSL Skinning

   float4x4 mPoseToWorldSpace[ SU_SKINNING_MAX_BONES ];


   // Returns a 4x4 matrix to transform vertex attributes from pose space to world space
   float4x4 SuGetSkinningMatrix4x4( float4 vWeights, int4 vIndices )
   {
      float4x4 mSkinning = vWeights[0] * mPoseToWorldSpace[ vIndices[0] ];
      for( int i = 1; i < SU_SKINNING_NUM_BONES; i++ )
      {
         mSkinning += vWeights[i] * mPoseToWorldSpace[ vIndices[i] ];
      }

      return mSkinning;
   }

   // Applies skinning matrices directly to a 4-vector
   float4 SuSkin4x4( float4 vVec, float4 vWeights, int4 vIndices )
   {
      float4 vSkinned = 0;
      for( int i = 0; i < SU_SKINNING_NUM_BONES; i++ )
      {
         vSkinned += vWeights[i] * mul( mPoseToWorldSpace[ vIndices[i] ], vVec );
      }

      return vSkinned;
   }

   // Rotation only (for skinning normals, etc)
   float3 SuSkin3x3( float3 vVec, float4 vWeights, int4 vIndices )
   {
      float3 vSkinned = 0;
      for( int i = 0; i < SU_SKINNING_NUM_BONES; i++ )
      {
         vSkinned += vWeights[i] * mul( mPoseToWorldSpace[ vIndices[i] ], vVec );
      }

      return vSkinned;
   }

   // Apply a single transform
   float4 SuSkin4x4SingleBone( float4 vVec, int nIndex = 0 )
   {
      return mul( mPoseToWorldSpace[nIndex], vVec );
   }

   float4x4 SuGetBone( int nIndex = 0 )
   {
      return mPoseToWorldSpace[nIndex];
   }

EndHLSL
