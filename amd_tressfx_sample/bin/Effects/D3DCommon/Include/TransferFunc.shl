//=================================================================================================================================
//
// Author: Jeremy Shopf
//         3D Application Research Group
//         ATI Research, Inc.
//
// Common functions for mapping transfer functions
//=================================================================================================================================
// $Id: //depot/3darg/Demos/Effects/TressFXRelease/amd_tressfx_sample/bin/Effects/D3DCommon/Include/TransferFunc.shl#1 $ 
// 
// Last check-in:  $DateTime: 2017/03/28 18:02:41 $ 
// Last edited by: $Author: khillesl $
//=================================================================================================================================
//   (C) ATI Research, Inc. 2006 All rights reserved. 
//=================================================================================================================================

StartHLSL "TransferFunc"

   struct MaterialInfo
   {
      float3 color;
      float  ambient;
      float  diffuse;
      float  specular;
   };

   struct VolumeInfo
   {
      float3         normal;
      float          gradmag;
      float          opacity;
      MaterialInfo   mat;
   };

   struct BumpInfo
   {
      float  center;
      float  width;
      float3 color;
      float  opacity;
      float  gcenter;
      float  gwidth;
      float  maskmult;
   };

   // Apply a bump with gaussian distribution
   // (currently not used)
   void ApplyBump( float sample, inout float cum_opacity, inout MaterialInfo result, BumpInfo bump )
   {
      // Assuming 2 * std dev is about the end of the bump, sigma = width/2.0
      float sigma = bump.width / 3.0;
      float t1 = 1.0 / ( sigma * sqrt( 2.0 * 3.14159 ) );
      float t2 = pow( 2.71828183, -pow( abs( sample - bump.center ), 2.0 )/( 2.0*sigma*sigma ) );
      
      float l = 1.0 / ( sigma * sqrt( 2.0 * 3.14159 ) );
      //t2 = t2*t1;

      if( t2 * bump.opacity > cum_opacity )
      {
         cum_opacity = t2 * bump.opacity;
         result.color = bump.color;
      }

      result.ambient += t2 * 0.2;
      result.diffuse += t2 * 1.0;
      result.specular += t2 * 0.0;
   }

   // Apply a bump with tent distribution
   void ApplyBumpTent( float sample, inout float opacity, inout MaterialInfo result, BumpInfo bump, float3 vMaterial )
   {
      float factor = 1.0 - saturate( abs(bump.center - sample) / bump.width );

      opacity = factor * bump.opacity;

      // Testing Pre-integrated stuff
      //opacity = step( .001, factor );

      result.ambient += factor * vMaterial.x;
      result.diffuse += factor * vMaterial.y;
      result.specular += factor * vMaterial.z;

   }

   // The gradient dimension of the histogram is in log space
   // This is currently a hack.. you can't linearly interpolate in log space
   float ApplyGradTent( inout float fOpacity, float fGradientMag, BumpInfo bump )
   {
      //return 1.0 - saturate( abs( bump.gcenter - fGradientMag )/bump.gwidth );


      return 1.0 - saturate( abs( bump.gcenter - fGradientMag )/bump.gwidth );
   }

EndHLSL
