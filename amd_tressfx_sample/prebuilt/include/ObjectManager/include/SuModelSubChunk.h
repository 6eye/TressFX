//
// Copyright (c) 2016 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#ifndef _SU_MODELSUBCHUNK_H_
#define _SU_MODELSUBCHUNK_H_

#include "SuBoundingBox.h"

//=================================================================================================================================
/// \ingroup ObjectManager
/// \brief A description of a sub-chunk
/// 
///  A sub-chunk is a subset of a chunk that is used for culling purposes.  Each subchunk contains subsets of the vertex and index
///  buffer in its parent chunk, along with a bounding volume, and the index of the bone in the model's skeleton which transforms it.
/// 
///  The use of sub-chunking is entirely optional.  At the moment, sub-chunking is only allowed if the shader performs rigid transformation
/// 
///  Sub-chunking will only be used if the effect file calls for it.  If the effect file does call for it, then the sub-chunks
///  will be generated by the preprocessor.
///
//=================================================================================================================================
class SuModelSubChunk
{
public:

   /// Default constructor
   SU_DLL SuModelSubChunk();

   SU_DLL ~SuModelSubChunk();

   inline uint32 GetMinVertex() const { return m_nMinVertex; };
   inline uint32 GetMaxVertex() const { return m_nMaxVertex; };
   inline uint32 GetMinIndex() const  { return m_nMinIndex;  };
   inline uint32 GetMaxIndex() const  { return m_nMaxIndex;  };
   inline uint32 GetBoneIndex() const { return m_nBone; };
   inline const SuBoundingBox& GetBoundingBox() const { return m_bbox; };
  
   void SetVertexRanges( uint32 nMin, uint32 nMax )
   {
      m_nMinVertex = nMin;
      m_nMaxVertex = nMax;
   };

   void SetIndexRanges( uint32 nMin, uint32 nMax )
   {
      m_nMinIndex = nMin;
      m_nMaxIndex = nMax;
   };

   void SetBoneID( uint32 nBone ) { m_nBone = nBone; };
   void SetBoundingBox( const SuBoundingBox& rBox ) { m_bbox = rBox; };
  
private:

   uint32 m_nMinVertex;
   uint32 m_nMaxVertex;
   uint32 m_nMinIndex;
   uint32 m_nMaxIndex;
   uint32 m_nBone;
   SuBoundingBox m_bbox;
};


#endif // _SU_MODELSUBCHUNKDESC_H_
